import 'package:domain/constants/error_types.dart';
import 'package:domain/error/app_error.dart';
import 'package:neo_bank/generated/l10n.dart';

class ErrorParser {
  ErrorParser._();

  static String getLocalisedStringError({AppError? error, required S localisedHelper}) {
    switch (error?.type) {
      case ErrorType.IOEXCEPTION:
        return localisedHelper.genericError;
      case ErrorType.UI:
        return localisedHelper.genericError;
      case ErrorType.NETWORK:
        return localisedHelper.genericError;
      case ErrorType.INVALID_BENEFICIARY:
        return localisedHelper.invalidBeneficiary;
      case ErrorType.INVALID_ADDITIONAL_SOURCE_INCOME_VALUE:
        return localisedHelper.invalidIncomeSourceValue;
      case ErrorType.NET_SERVER_MESSAGE:
        return localisedHelper.genericError;
      case ErrorType.NET_NO_INTERNET_CONNECTION:
        return localisedHelper.serverUnderMaintenance;
      case ErrorType.CONNECTION_FAILED:
        return localisedHelper.connectionFailed;
      case ErrorType.DATABASE:
        return localisedHelper.genericError;
      case ErrorType.DATABASE_NOT_SUPPORTED:
        return localisedHelper.genericError;
      case ErrorType.DB_ERROR1:
        return localisedHelper.genericError;
      case ErrorType.DB_USER_NOT_FOUND:
        return localisedHelper.genericError;
      case ErrorType.INVALID_PIN:
        return localisedHelper.genericError;
      case ErrorType.NO_DOCUMENT_FOUND:
        return localisedHelper.genericError;
      case ErrorType.INVALID_MOBILE:
        return localisedHelper.enterValidMobileNumber;
      case ErrorType.ERROR_DECRYPT_CARD:
        return localisedHelper.establishCallError;
      case ErrorType.ERROR_GENERATE_BLOCK_PIN:
        return localisedHelper.weWillConnectYou;
      case ErrorType.INVALID_OTP:
        return localisedHelper.enterValidOtp;
      case ErrorType.INVALID_REQUESTED_AMOUNT:
        return localisedHelper.invalidRequestedAmount;
      case ErrorType.INVALID_OTP:
        return localisedHelper.enterValidOtp;
      case ErrorType.INVALID_EMPLOYMENT_STATUS:
        return localisedHelper.invalidEmploymentStatus;
      case ErrorType.INVALID_OCCUPATION:
        return localisedHelper.invalidOccupation;
      case ErrorType.INVALID_SOURCE_INCOME:
        return localisedHelper.invalidMainSourceIncome;
      case ErrorType.INVALID_MONTHLY_INCOME:
        return localisedHelper.invalidMonthlyIncome;
      case ErrorType.INVALID_MONTHLY_INCOME_VALUE:
        return localisedHelper.invalidExpectedMonthlyIncomeSourceValue;
      case ErrorType.INVALID_ANNUAL_INCOME:
        return localisedHelper.invalidAnnualIncome;
      case ErrorType.INVALID_PURPOSE_OF_ACCOUNT_OPENING:
        return localisedHelper.invalidPurposeOfOpeningAccount;
      case ErrorType.INVALID_EMPLOYER_NAME:
        return localisedHelper.invalidEmployerName;
      case ErrorType.INVALID_EMPLOYER_COUNTRY:
        return localisedHelper.invalidEmployerCountry;
      case ErrorType.INVALID_EMPLOYER_CITY:
        return localisedHelper.invalidEmployerCity;
      case ErrorType.INVALID_EMPLOYER_CONTACT:
        return localisedHelper.invalidEmployerContact;
      case ErrorType.INVALID_ADDITIONAL_SOURCE_INCOME:
        return localisedHelper.invalidAdditionSourceIncome;
      case ErrorType.INVALID_TOTAL_ADDITIONAL_INCOME:
        return localisedHelper.invalidTotalAdditionalIncome;
      case ErrorType.EMPTY_EMAIL:
        return localisedHelper.emptyEmailMessage;
      case ErrorType.INVALID_EMAIL:
        return localisedHelper.enterValidEmail;
      case ErrorType.INVALID_TAX_COUNTRY:
        return localisedHelper.invalidTaxCountry;
      case ErrorType.INVALID_TIN_NUMBER:
        return localisedHelper.invalidTinNumber;
      case ErrorType.INVALID_REASON_OF_UNAVAILABILITY:
        return localisedHelper.invalidReasonUnavailability;
      case ErrorType.INVALID_EXPLANATION_FOR_UNAVAILABILITY:
        return localisedHelper.invalidExplanationForUnavailability;
      case ErrorType.INVALID_NAME:
        return localisedHelper.enterValidSpouseName;
      case ErrorType.INVALID_NATURE:
        return localisedHelper.enterValidNature;
      case ErrorType.INVALID_EMPLOYEE_STATUS:
        return localisedHelper.enterValidEmployeeStatus;
      case ErrorType.EMPTY_PASSWORD:
        return localisedHelper.enterPassword;
      case ErrorType.EMPTY_CONFIRM_PASSWORD:
        return localisedHelper.enterConfirmPassword;
      case ErrorType.PASSWORD_MISMATCH:
        return localisedHelper.passwordMismatch;
      case ErrorType.CONDITION_NOT_CHECKED:
        return localisedHelper.retrieveConditionNotChecked;
      case ErrorType.EMPTY_NAME:
        return localisedHelper.emptyName;
      case ErrorType.EMPTY_ID_NUMBER:
        return localisedHelper.emptyIdNumber;
      case ErrorType.EMPTY_DATE_OF_BIRTH:
        return localisedHelper.emptyDob;
      case ErrorType.EMPTY_NATIONALITY:
        return localisedHelper.emptyNationality;
      case ErrorType.EMPTY_EXPIRY_DATE:
        return localisedHelper.emptyExpiryDate;
      case ErrorType.EMPTY_GENDER:
        return localisedHelper.emptyGender;
      case ErrorType.EMPTY_MOTHER_NAME:
        return localisedHelper.emptyMotherName;
      case ErrorType.EMPTY_RESIDENT_COUNTRY:
        return localisedHelper.emptyResidentCountry;
      case ErrorType.EMPTY_HOME_ADDRESS:
        return localisedHelper.emptyHomeAddress;
      case ErrorType.EMPTY_STREET_ADDRESS:
        return localisedHelper.emptyStreetAddress;
      case ErrorType.EMPTY_BUILDING_NAME_OR_NUMBER:
        return localisedHelper.emptyBuildingNameOrNo;
      case ErrorType.INVALID_EXPECTED_ANNUAL_TRANSACTION:
        return localisedHelper.invalidExpectedAnnualTransaction;
      case ErrorType.INVALID_EXPECTED_MONTHLY_TRANSACTION:
        return localisedHelper.invalidExpectedMonthlyTransaction;
      case ErrorType.INVALID_TYPES_OF_TRANSACTION:
        return localisedHelper.invalidTypesOfTransaction;
      case ErrorType.INVALID_DECLARATION_SELECTION:
        return localisedHelper.invalidDeclarationSelection;
      case ErrorType.INVALID_VERIFY_INFO_DECLARATION_SELECTION:
        return localisedHelper.invalidDeclarationSelection;
      case ErrorType.INVALID_NAME_AS_PER_TAX_RETURN:
        return localisedHelper.invalidNameAsPerTaxReturn;
      case ErrorType.INVALID_DOB:
        return localisedHelper.invalidDOB;
      case ErrorType.INVALID_CITIZENSHIP:
        return localisedHelper.invalidCitizenship;
      case ErrorType.INVALID_PERMANENT_ADDRESS_LINE:
        return localisedHelper.invalidPermanentAddress;
      case ErrorType.INVALID_COUNTRY:
        return localisedHelper.invalidCountry;
      case ErrorType.INVALID_STATE:
        return localisedHelper.invalidState;
      case ErrorType.INVALID_CITY:
        return localisedHelper.invalidCity;
      case ErrorType.INVALID_POSTCODE:
        return localisedHelper.invalidPostCode;
      case ErrorType.INVALID_ADDRESS:
        return localisedHelper.invalidAddress;
      case ErrorType.INVALID_REQUESTER_NAME:
        return localisedHelper.nameHint;
      case ErrorType.INVALID_REQUESTER_ADDRESS:
        return localisedHelper.invalidAddress;
      case ErrorType.INVALID_REQUESTER_COUNTRY:
        return localisedHelper.invalidCountry;
      case ErrorType.INVALID_REQUESTER_STATE:
        return localisedHelper.invalidState;
      case ErrorType.INVALID_REQUESTER_CITY:
        return localisedHelper.invalidCity;
      case ErrorType.INVALID_REQUESTER_POSTCODE:
        return localisedHelper.invalidPostCode;
      case ErrorType.INVALID_TAX_PAYER:
        return localisedHelper.invalidTaxPayer;
      case ErrorType.INVALID_SECURITY_NUMBER:
        return localisedHelper.invalidSocialSecurityNumber;
      case ErrorType.INVALID_IDENTIFICATION_NUMBER:
        return localisedHelper.invalidIdentificationNumber;
      case ErrorType.INVALID_BENEFICIAL_ADDRESS:
        return localisedHelper.invalidCountry;
      case ErrorType.INVALID_BENEFICIAL_IDENTIFICATION_NUMBER:
        return localisedHelper.invalidIdentificationNumber;
      case ErrorType.INVALID_INCOME_TYPE:
        return localisedHelper.invalidIncomeType;
      case ErrorType.INVALID_EXPLANATION:
        return localisedHelper.invalidExplanation;
      case ErrorType.INVALID_REFERENCE_NO:
        return localisedHelper.invalidReferenceNumber;
      case ErrorType.INVALID_PREFERRED_DATE:
        return localisedHelper.invalidPreferredDate;
      case ErrorType.INVALID_PREFERRED_TIME:
        return localisedHelper.invalidPreferredTime;
      case ErrorType.INVALID_RELATIONSHIP:
        return localisedHelper.invalidRelationship;
      case ErrorType.INVALID_PERSON_NAME:
        return localisedHelper.invalidName;
      case ErrorType.INVALID_PERSON_ROLE:
        return localisedHelper.invalidRole;
      case ErrorType.EMPTY_INCOME_PROOF:
        return localisedHelper.invalidRole;
      case ErrorType.EMPTY_INCOME_DOCUMENT:
        return localisedHelper.emptyIncomeDocument;
      case ErrorType.EMPTY_ADDRESS_DOCUMENT:
        return localisedHelper.emptyAddressDocument;
      case ErrorType.EMPTY_PERMANENT_HOME_ADDRESS:
        return localisedHelper.emptyHomeAddress;
      case ErrorType.EMPTY_PERMANENT_STREET_ADDRESS:
        return localisedHelper.emptyStreetAddress;
      case ErrorType.EMPTY_PERMANENT_BUILDING_NAME_OR_NUMBER:
        return localisedHelper.emptyBuildingNameOrNo;
      case ErrorType.INVALID_JOB_NAME:
        return localisedHelper.invalidJobName;
      case ErrorType.EMPTY_DOCUMENT:
        return localisedHelper.emptyDocument;
      case ErrorType.EMPTY_PERMANENT_RESIDENT_COUNTRY:
        return localisedHelper.emptyResidentCountry;
      case ErrorType.EMPTY_CITY:
        return localisedHelper.emptyCity;
      case ErrorType.INVALID_BENEFICIAL_OWNER_ACCOUNT:
        return localisedHelper.invalidBeneficialOwnerAccount;
      case ErrorType.INVALID_BUSINESS_TYPE:
        return localisedHelper.invalidBusinessType;
      case ErrorType.EMPTY_BUSINESS:
        return localisedHelper.emptyBusiness;
      case ErrorType.INVALID_LEGAL_DOCUMENT:
        return localisedHelper.invalidDocumentNo;
      case ErrorType.INVALID_ISSUING_DATE:
        return localisedHelper.invalidIssuingDate;
      case ErrorType.INVALID_ISSUING_PLACE:
        return localisedHelper.invalidIssuingPlace;
      case ErrorType.EMPTY_DISTRICT:
        return localisedHelper.emptyDistrict;
      case ErrorType.PERMANENT_EMPTY_CITY:
        return localisedHelper.emptyCity;
      case ErrorType.DEVICE_NOT_FOUND:
        return localisedHelper.deviceNotFound;
      case ErrorType.ERROR_SAVING_ID_CARD:
        return localisedHelper.errorSavingIdCard;
      case ErrorType.ID_CARD_EXPIRED:
        return localisedHelper.idCardExpired;
      case ErrorType.INVALID_USERNAME_PASSWORD:
        return localisedHelper.invalidUserNamePassword;
      case ErrorType.ID_CARD_NOT_ALLOWED:
        return localisedHelper.idCardNotAllowed;
      case ErrorType.ERROR_SAVING_STATUS:
        return localisedHelper.errorSavingStatus;
      case ErrorType.EMPTY_NATIONALITY_DOCUMENT:
        return localisedHelper.emptyNationalityDocument;
      case ErrorType.ERROR_WHILE_UPLOADING_IMAGE:
        return localisedHelper.errorUploadImage;
      case ErrorType.INVALID_NETWORK_OTP:
        return localisedHelper.invalidOtp;
      case ErrorType.OTP_EXPIRED:
        return localisedHelper.otpExpired;
      case ErrorType.EMAIL_ALREADY_EXIST:
        return localisedHelper.emailAlreadyExist;
      case ErrorType.OTP_VERIFY_LIMIT_EXCEEDED:
        return localisedHelper.otpLimitExceed;
      case ErrorType.ERROR_CREATING_ACCOUNT:
        return localisedHelper.errorCreatingAccount;
      case ErrorType.UNABLE_TO_VERIFY_ID_CARD:
        return localisedHelper.unableToVerifyIDCard;
      case ErrorType.INVALID_USER:
        return localisedHelper.invalidUser;
      case ErrorType.ERROR_WHILE_LOGOUT:
        return localisedHelper.errorWhileLogout;
      case ErrorType.MOBILE_NUMBER_EXIST:
        return localisedHelper.mobileNoExist;
      case ErrorType.USER_NOT_REGISTER:
        return localisedHelper.userNotRegister;
      case ErrorType.ERROR_WHILE_REGISTRATION:
        return localisedHelper.errorWhileRegistration;
      case ErrorType.ERROR_GET_ADDITIONAL_DOCUMENTATION:
        return localisedHelper.errorWhileGetAdditionalDocument;
      case ErrorType.ACCOUNT_LOCKED:
        return localisedHelper.accountLocked;
      case ErrorType.IMAGE_UPLOAD_ERROR:
        return localisedHelper.pleaseProvideSelfie;
      case ErrorType.DIFFERENT_ADDRESS_LINE:
        return localisedHelper.enterMailingAddress;
      case ErrorType.DIFFERENT_COUNTRY:
        return localisedHelper.invalidCountry;
      case ErrorType.DIFFERENT_STATE:
        return localisedHelper.invalidState;
      case ErrorType.DIFFERENT_CITY:
        return localisedHelper.invalidCity;
      case ErrorType.DIFFERENT_POSTCODE:
        return localisedHelper.invalidPostCode;
      case ErrorType.INVALID_TREATY_CLAIM_RATE:
        return localisedHelper.invalidProvisionClaim;
      case ErrorType.INVALID_PROVISION_CLAIM:
        return localisedHelper.invalidTreatyClaimRate;
      case ErrorType.INVALID_SIGNATURE:
        return localisedHelper.emptySignature;
      case ErrorType.INVALID_USERNAME:
        return localisedHelper.invalidUserName;
      case ErrorType.ERROR_WHILE_GET_ACCOUNT:
        return localisedHelper.errorWhileGetAccount;
      case ErrorType.EMPTY_PIN:
        return localisedHelper.emptyPin;
      case ErrorType.INVALID_PIN_LENGTH:
        return localisedHelper.invalidPinLength;
      case ErrorType.PIN_NOT_MATCH:
        return localisedHelper.pinDoesNotMatch;
      case ErrorType.ACCOUNT_INQUIRY_WENT_WRONG:
        return localisedHelper.accountInquiryWentWrong;
      case ErrorType.ACCOUNT_INQUIRY_WENT_WRONG_61:
        return localisedHelper.accountInquiryWentWrong61;
      case ErrorType.ZERO_AMOUNT:
        return localisedHelper.amountZero;
      case ErrorType.EMPTY_NEW_PASSWORD:
        return localisedHelper.emptyNewPassword;
      case ErrorType.INVALID_ID_CARD:
        return localisedHelper.invalidIDCard;
      case ErrorType.WENT_WRONG_WHILE_LOGIN:
        return localisedHelper.wentWrongWhileLogin;
      case ErrorType.ERROR_GET_ACCOUNT_DETAILS:
        return localisedHelper.errorGetAccountDetails;
      case ErrorType.ACCOUNT_NOT_FOUND:
        return localisedHelper.accountNotFound;
      case ErrorType.INVALID_OTP_ENTERED:
        return localisedHelper.invalidOtpEntered;
      case ErrorType.LOCATION_SERVICE_NOT_ENABLED:
        return localisedHelper.locationServiceDisabled;
      case ErrorType.LIMIT_EXCEEDED:
        return localisedHelper.limitExceeded;
      case ErrorType.ATM_WITHDRAWAL_VALUE_EXCEEDED:
        return localisedHelper.atmLimitExceeded;
      case ErrorType.MERCHANT_PAYMENT_EXCEEDED:
        return localisedHelper.merchantPaymentValueExceeded;
      case ErrorType.ONLINE_PURCHASE_VALUE_EXCEEDED:
        return localisedHelper.onlinePurchaseExceeded;
      case ErrorType.EMPTY_IBAN_MOBILE:
        return localisedHelper.emptyIbanOrMobile;
      case ErrorType.EMPTY_PURPOSE:
        return localisedHelper.emptyPurpose;
      case ErrorType.EMPTY_PURPOSE_DETAIL:
        return localisedHelper.emptyPurposeDetail;
      case ErrorType.BENEFICIARY_NOT_FOUND:
        return localisedHelper.beneficiaryNotFound;
      case ErrorType.ERROR_WHILE_BALANCE_INQUIRY:
        return localisedHelper.errorWhileBalanceInquiry;
      case ErrorType.INSUFFICIENT_BALANCE:
        return localisedHelper.insufficientBalance;
      case ErrorType.INSUFFICIENT_BALANCE_TRANSFER:
        return localisedHelper.insufficientBalanceTransfer;
      case ErrorType.REQUEST_NOT_COMPLETED:
        return localisedHelper.requestNotCompleted;
      case ErrorType.SELECT_CANCELATION_REASON:
        return localisedHelper.pleaseSelectTheReason;
      case ErrorType.AGREE_TO_THE_TERM_AND_CONDITION:
        return localisedHelper.pleaseAgreeToTheTermAndCondition;
      case ErrorType.INVALID_LIMIT_VALUE:
        return localisedHelper.invalidLimitValue;
      case ErrorType.EMPTY_CONFIRM_PIN:
        return localisedHelper.emptyConfirmPin;
      case ErrorType.CALL_HANGUP_ERROR:
        return localisedHelper.callHangupError;
      case ErrorType.GET_CALL_TOKEN_ERROR:
        return localisedHelper.getCallTokenError;
      case ErrorType.ESTABLISH_CALL_ERROR:
        return localisedHelper.establishCallError;
      case ErrorType.GET_CALL_DURATION_ERROR:
        return localisedHelper.getCallDurationError;
      case ErrorType.EMPTY_INCOME:
        return localisedHelper.emptyIncome;
      case ErrorType.PASSWORD_NOT_MEET_CRITERIA:
        return localisedHelper.passwordNotMeetCriteria;
      case ErrorType.CONFIRM_PASSWORD_NOT_MATCH_WITH_NEW_PASSWORD:
        return localisedHelper.confirmPasswordNotMatch;
      case ErrorType.CURRENT_PASSWORD_INVALID:
        return localisedHelper.currentPasswordInvalid;
      case ErrorType.SELECT_EXPECTED_TRANSACTION:
        return localisedHelper.selectExpectedTransaction;
      case ErrorType.ERROR_WHILE_GET_COMBO_VALUES:
        return localisedHelper.errorWhileGetComboValues;
      case ErrorType.USER_ALREADY_EXISTS:
        return localisedHelper.userAlreadyExists;
      case ErrorType.PLEASE_TRY_AGAIN:
        return localisedHelper.pleaseTryAgain;
      case ErrorType.INVALID_FOREIGN_IDENTIFICATION_NUMBER:
        return localisedHelper.invalidForeignIdNumber;
      case ErrorType.INVALID_EXEMPTION_FATCA_CODE:
        return localisedHelper.invalidExemptionFromFatcaReporting;
      case ErrorType.INVALID_EMPLOYER_ID:
        return localisedHelper.invalidEmployerId;
      case ErrorType.ERROR_ACCESSING_ID:
        return localisedHelper.errorWhileAccessingIdData;
      case ErrorType.NOT_ALLOWED_COUNTRY:
        return localisedHelper.notAllowedCountry;
      case ErrorType.INVALID_CHECKED_VALUE:
        return localisedHelper.agreeTermsCondition;
      case ErrorType.EMPTY_MINIMUM_SETTLEMENT_VALUE:
        return localisedHelper.emptyMinimumSettlement;
      case ErrorType.ERROR_GETTING_FATCA_CRS:
        return localisedHelper.fatca;
      case ErrorType.ERROR_WHILE_GETTING_DASHBOARD:
        return localisedHelper.errorWhileGettingDashboard;
      case ErrorType.MOBILE_ALREADY_EXIST:
        return localisedHelper.mobileAlreadyExists;
      case ErrorType.DO_NOT_RECOMMEND_TO_USE_PREVIOUS_TENPASS:
        return localisedHelper.weDoNotRecommendToUsePreviousTenPass;
      case ErrorType.CURRENT_PASSWORD_INCORRECT:
        return localisedHelper.currentPasswordIncorrect;
      case ErrorType.EMPTY_NICKNAME_VALUE:
        return localisedHelper.emptyNickName;
      case ErrorType.EMPTY_VERIFY_EMAIL:
        return localisedHelper.emptyVerifyEmail;
      case ErrorType.EMPTY_VERIFY_EXPIRY_DATE:
        return localisedHelper.emptyVerifyExpiryDate;
      case ErrorType.CHECK_PASSWORD_CRED_ERROR:
        return localisedHelper.checkForgetPasswordError;
      case ErrorType.ERROR_PROCESS_WHILE_LOAN_REQUEST:
        return localisedHelper.errorWhileProcessLoanRequest;
      case ErrorType.ERROR_WHILE_GETTING_ACCOUNT_CLOSE_OTP:
        return localisedHelper.errorWhileGettingAccountCloseOtp;
      case ErrorType.INVALID_DOCUMENT:
        return localisedHelper.invalidDocument;
      case ErrorType.SELECT_CREDIT_LIMIT_SETTINGS:
        return localisedHelper.selectCreditLimitSettings;
      case ErrorType.ID_CARD_NOT_FOUND:
        return localisedHelper.idCardNotFound;
      case ErrorType.CHANGE_CARD_PIN_ERROR:
        return localisedHelper.changeCardPinError;
      case ErrorType.ERROR_WHILE_LINKING_DEBIT_CARD:
        return localisedHelper.errorWhileLinkingDebitCard;
      case ErrorType.INVALID_ANNUAL_INCOME_VALUE:
        return localisedHelper.invalidAnnualIncomeValue;
      case ErrorType.SELECT_ADDITIONAL_INCOME:
        return localisedHelper.selectAdditionalIncome;
      case ErrorType.ERROR_WHILE_GET_STATUS:
        return localisedHelper.errorWhileGetStatus;
      case ErrorType.INVALID_EXPECTED_MONTHLY_TRANSACTION_VALUE:
        return localisedHelper.invalidExpectedMonthlyIncomeSourceValue;
      case ErrorType.USER_NOT_ELIGIBLE:
        return localisedHelper.userNotEligible;
      case ErrorType.NO_DUE_AMOUNT:
        return localisedHelper.noDueAmount;
      case ErrorType.INVALID_ACCOUNT_BALANCE:
        return localisedHelper.invalidAccountBalance;
      case ErrorType.ERROR_ADDING_USERNAME:
        return localisedHelper.errorAddingUserName;
      case ErrorType.REGISTRATION_PROCESS_ERROR:
        return localisedHelper.registrationProcessError;
      case ErrorType.AHWAL_ERROR:
        return localisedHelper.ahwalError;
      case ErrorType.KYC_STATUS_ERROR:
        return localisedHelper.kycStausError;
      case ErrorType.SAVING_ID_CARD_ERROR:
        return localisedHelper.savingIdCardError;
      case ErrorType.SAVING_COUNTRY_RESIDENCE_ERROR:
        return localisedHelper.savingCountryResidenceError;
      case ErrorType.SAVING_PROFILE_STATUS_ERROR:
        return localisedHelper.savingProfileStatusError;
      case ErrorType.SAVING_JOB_DETAILS_ERROR:
        return localisedHelper.savingJobDetailsError;
      case ErrorType.ADD_ACCOUNT_PURPOSE_ERROR:
        return localisedHelper.addAccountPurposeError;
      case ErrorType.FATCA_CRS_ERROR:
        return localisedHelper.fatcaCrsError;
      case ErrorType.UPLOAD_FATCA_SIGNATURE_ERROR:
        return localisedHelper.uploadFatcaSignatureError;
      case ErrorType.SAVING_FATCA_DETAILS_ERROR:
        return localisedHelper.savingFatcaDetailsError;
      case ErrorType.SAVING_W8_FORM_ERROR:
        return localisedHelper.savingW8FormError;
      case ErrorType.SAVING_W9_FORM_ERROR:
        return localisedHelper.savingW9FormError;
      case ErrorType.SELFIE_CHECK_ERROR:
        return localisedHelper.selfieCheckError;
      case ErrorType.ENABLE_FINGERPRINT_ERROR:
        return localisedHelper.enableFingerPrintError;
      case ErrorType.DISABLE_FINGERPRINT_ERROR:
        return localisedHelper.disableFingerPrintError;
      case ErrorType.GET_COMBO_VALUES_ERROR:
        return localisedHelper.getComboValuesError;
      case ErrorType.GET_ADDITIONAL_DOCUMENTATION_ERROR:
        return localisedHelper.getAdditionalDocumentationError;
      case ErrorType.SAVE_ADDITIONAL_DOCUMENTATION_ERROR:
        return localisedHelper.saveAdditionalDocumentationError;
      case ErrorType.GET_ACCOUNT_DETAILS_ERROR:
        return localisedHelper.getAccountDetailsError;
      case ErrorType.CREATING_ACCOUNT_ERROR:
        return localisedHelper.creatingAccountError;
      case ErrorType.CHECK_VIDEO_CALL_STATUS_ERROR:
        return localisedHelper.checkVideoCallStatusError;
      case ErrorType.CHECK_OTHER_NATIONALITY_STATUS_ERROR:
        return localisedHelper.checkOtherNationalityStatusError;
      case ErrorType.UPLOAD_DOCUMENTS_ERROR:
        return localisedHelper.uploadDocumentsError;
      case ErrorType.LOGOUT_ERROR:
        return localisedHelper.logoutError;
      case ErrorType.REGISTER_INTEREST_ERROR:
        return localisedHelper.registerInterestError;
      case ErrorType.VERIFY_OTP_ERROR:
        return localisedHelper.verifyOtpError;
      case ErrorType.IPHONE_LOGIN_ERROR:
        return localisedHelper.iphoneLoginError;
      case ErrorType.CHECK_DOCUMENT_STATUS_ERROR:
        return localisedHelper.checkDocumentStatusError;
      case ErrorType.CHECK_AGENT_STATUS:
        return localisedHelper.checkAgentStatusError;
      case ErrorType.CHANGE_CALL_STATUS_ERROR:
        return localisedHelper.changeCallStatusError;
      case ErrorType.SAVE_CUSTOMER_TIME_STATUS_ERROR:
        return localisedHelper.saveCustomerTimeStatusError;
      case ErrorType.GET_ALLOWED_COUNTRIES_ERROR:
        return localisedHelper.getAllowedCountriesError;
      case ErrorType.GET_COUNTRIES_ERROR:
        return localisedHelper.getCountriesError;
      case ErrorType.REMOVE_DEBIT_LOCK_ERROR:
        return localisedHelper.removeDebitLockError;
      case ErrorType.SUPPLEMENTARY_CARD_APPLICATION_ERROR:
        return localisedHelper.supplementaryCardApplicationError;
      case ErrorType.REQUEST_SUPPLEMENTARY_CARD_ERROR:
        return localisedHelper.requestSupplementaryCardError;
      case ErrorType.SUPPLEMENTARY_CARD_STEP_2_ERROR:
        return localisedHelper.supplementaryCardStep2Error;
      case ErrorType.SUPPLEMENTARY_CARD_STEP_3_ERROR:
        return localisedHelper.supplementaryCardStep3Error;
      case ErrorType.RELATIONSHIP_LIST_ERROR:
        return localisedHelper.relationshipListError;
      case ErrorType.GET_CURRENT_VALUES_ERROR:
        return localisedHelper.getCurrentValuesError;
      case ErrorType.ENABLE_BIOMETRIC_ERROR:
        return localisedHelper.enableBiometricError;
      case ErrorType.GET_CIPHER_ERROR:
        return localisedHelper.getCipherError;
      case ErrorType.GENERATE_KEY_PAIR_ERROR:
        return localisedHelper.generateKeyPairError;
      case ErrorType.ANDROID_LOGIN_ERROR:
        return localisedHelper.androidLoginError;
      case ErrorType.CHECK_CUSTOMER_STATUS_ERROR:
        return localisedHelper.checkCustomerStatusError;
      case ErrorType.GET_BENEFICIARIES_ERROR:
        return localisedHelper.getBeneficiariesError;
      case ErrorType.GET_ATM_ERROR:
        return localisedHelper.getAtmError;
      case ErrorType.CHECK_ISSUER:
        return localisedHelper.checkIssuer;
      case ErrorType.GET_STATES_ERROR:
        return localisedHelper.getStatesError;
      case ErrorType.GET_CITIES_ERROR:
        return localisedHelper.getCitiesError;
      case ErrorType.GET_CITIES_BY_COUNTRY_ERROR:
        return localisedHelper.getCitiesByCountryError;
      case ErrorType.GET_CONTACTS_ERROR:
        return localisedHelper.getContactsError;
      case ErrorType.ADD_BENEFICIARY_ERROR:
        return localisedHelper.addBeneficiaryError;
      case ErrorType.UPDATE_BENEFICIARY_ERROR:
        return localisedHelper.updateBeneficiaryError;
      case ErrorType.VERIFY_BENEFICIARY_OTP_ERROR:
        return localisedHelper.verifyBeneficiaryOtpError;
      case ErrorType.DELETE_BENEFICIARY_ERROR:
        return localisedHelper.deleteBeneficiaryError;
      case ErrorType.UPLOAD_BENEFICIARY_ERROR:
        return localisedHelper.uploadBeneficiaryError;
      case ErrorType.GET_PROFILE_INFO_ERROR:
        return localisedHelper.getProfileInfoError;
      case ErrorType.DELETE_PROFILE_IMAGE_ERROR:
        return localisedHelper.deleteProfileImageError;
      case ErrorType.Get_CUSTOMER_DOCUMENT_ERROR:
        return localisedHelper.getCustomerDocumentError;
      case ErrorType.Get_CUSTOMER_DOCUMENT_ID_ERROR:
        return localisedHelper.getCustomerDocumentIdError;
      case ErrorType.CHANGE_PROFILE_IMAGE_ERROR:
        return localisedHelper.changeProfileImageError;
      case ErrorType.CHANGE_EMAIL_ERROR:
        return localisedHelper.changeEmailError;
      case ErrorType.VERIFY_CHANGE_EMAIL_ERROR:
        return localisedHelper.verifyChangeEmailError;
      case ErrorType.CHANGE_MOBILE_NO_ERROR:
        return localisedHelper.changeMobileNoError;
      case ErrorType.VERIFY_CHANGE_MOBILE_NO_ERROR:
        return localisedHelper.verifyChangeMobileNoError;
      case ErrorType.CHANGE_PASSWORD_ERROR:
        return localisedHelper.changePasswordError;
      case ErrorType.VERIFY_OTP_PASSWORD_ERROR:
        return localisedHelper.verifyOtpPasswordError;
      case ErrorType.REQUEST_TO_PAY_STATUS_ERROR:
        return localisedHelper.requestToPayStatusError;
      case ErrorType.CARD_ISSUANCE_ERROR:
        return localisedHelper.cardIssuanceError;
      case ErrorType.SET_CARD_PIN_ERROR:
        return localisedHelper.setCardPintError;
      case ErrorType.CONFIRM_DELIVERY_ERROR:
        return localisedHelper.confirmDeliveryError;
      case ErrorType.GET_DASHBOARD_DATA_ERROR:
        return localisedHelper.getDashboardDataError;
      case ErrorType.MONEY_THOR_ERROR:
        return localisedHelper.moneyThorError;
      case ErrorType.DEBIT_CARD_TRANSACTION_LIST_ERROR:
        return localisedHelper.debitCardTransactionListError;
      case ErrorType.ACCOUNT_ACTIVITY_ERROR:
        return localisedHelper.accountActivityError;
      case ErrorType.CONFIRM_CREDIT_CARD_DELIVERY_ERROR:
        return localisedHelper.confrimCreditCardDeliveryError;
      case ErrorType.CREDIT_DASHBOARD_DATA_ERROR:
        return localisedHelper.creditDashboardDataError;
      case ErrorType.CREDIT_CARD_REQ_ERROR:
        return localisedHelper.creditCardReqError;
      case ErrorType.CREDIT_CARD_TRANSACTION_LIST_ERROR:
        return localisedHelper.creditCardTransactionListError;
      case ErrorType.GET_CREDIT_YEARS_ERROR:
        return localisedHelper.getCreditYearsError;
      case ErrorType.CREDIT_CARD_STATEMENT_ERROR:
        return localisedHelper.creditCardStatementError;
      case ErrorType.GET_DEBIT_YEARS_ERROR:
        return localisedHelper.getDebitYearsError;
      case ErrorType.DEBIT_CARD_STATEMENT_ERROR:
        return localisedHelper.debitCardStatementError;
      case ErrorType.UPDATE_LIMIT_ERROR:
        return localisedHelper.updateLimitError;
      case ErrorType.FREEZE_DEBIT_CARD_ERROR:
        return localisedHelper.freezeDebitCardError;
      case ErrorType.UNFREEZE_DEBIT_CARD_ERROR:
        return localisedHelper.unfreezeDebitCardError;
      case ErrorType.CANCEL_DEBIT_CARD_ERROR:
        return localisedHelper.cancelDebitCardError;
      case ErrorType.VERIFY_CHANGE_PIN_ERROR:
        return localisedHelper.verifyChangePinError;
      case ErrorType.CHANGE_PIN_ERROR:
        return localisedHelper.changePinError;
      case ErrorType.UNBLOCK_DEBIT_CARD_PIN_ERROR:
        return localisedHelper.unblockDebitCardPinError;
      case ErrorType.GET_DEBIT_CARD_LIMIT_ERROR:
        return localisedHelper.getDebitCardLimitError;
      case ErrorType.REQUEST_SUPPLEMENTARY_DEBIT_CARD_ERROR:
        return localisedHelper.requestSupplementaryDebitCardError;
      case ErrorType.FREEZE_CREDIT_CARD_ERROR:
        return localisedHelper.freezeCreditCardError;
      case ErrorType.UNFREEZE_CREDIT_CARD_ERROR:
        return localisedHelper.unfreezeCreditCardError;
      case ErrorType.UNBLOCK_CREDIT_CARD_PIN_ERROR:
        return localisedHelper.unblockCreditCardPinError;
      case ErrorType.GET_ACCOUNT_BY_ALIAS_ERROR:
        return localisedHelper.getAccountByAliasError;
      case ErrorType.REQUEST_TO_PAY_ERROR:
        return localisedHelper.requestToPayError;
      case ErrorType.CHECK_SEND_MONEY_ERROR:
        return localisedHelper.checkSendMoneyError;
      case ErrorType.VERIFY_TRANSFER_API_ERROR:
        return localisedHelper.verifyTransferApiError;
      case ErrorType.VERIFY_TRANSFER_API_V2_ERROR:
        return localisedHelper.verifyTransferApiV2Error;
      case ErrorType.GET_TRANSFER_PURPOSE_ERROR:
        return localisedHelper.getTransferPurposeError;
      case ErrorType.PAYMENT_ACTIVITY_API_ERROR:
        return localisedHelper.paymentActivityApiError;
      case ErrorType.CHECK_CREDENTIALS_FOR_FORGET_PASSWORD_ERROR:
        return localisedHelper.checkCredentialsForForgetPasswordError;
      case ErrorType.FORGET_PASSWORD_ERROR:
        return localisedHelper.forgetPasswordError;
      case ErrorType.VERIFY_FORGET_PASSWORD_ERROR:
        return localisedHelper.verifyForgetPasswordError;
      case ErrorType.SEND_OTP_TOKEN_ERROR:
        return localisedHelper.sendOtpTokenError;
      case ErrorType.VERIFY_DEIVICE_CHANGE_OTP_ERROR:
        return localisedHelper.verifyDeviceChangeOtpError;
      case ErrorType.RESEND_OTP_ERROR:
        return localisedHelper.resendOtpError;
      case ErrorType.CHECK_EXISTING_CALL_ERROR:
        return localisedHelper.checkExistingCallError;
      case ErrorType.REQUEST_CALL_ERROR:
        return localisedHelper.requestCallError;
      case ErrorType.GET_GENDER_STATUS_ERROR:
        return localisedHelper.getGenderStatusError;
      case ErrorType.GET_TIME_SLOTS_ERROR:
        return localisedHelper.getTimeSlotsError;
      case ErrorType.ADD_CALL_ERROR:
        return localisedHelper.addCallError;
      case ErrorType.CHECK_CALL_STATUS:
        return localisedHelper.checkCallStatusError;
      case ErrorType.GET_CARD_APPLICATION_ERROR:
        return localisedHelper.getCardApplicationError;
      case ErrorType.GET_LOAN_VALUES_ERROR:
        return localisedHelper.getLoanValuesError;
      case ErrorType.PROCESS_LOAN_VALUES_ERROR:
        return localisedHelper.processLoanValuesError;
      case ErrorType.PAYBACK_CREDIT_CARD_ERROR:
        return localisedHelper.paybackCreditCardError;
      case ErrorType.EXPIRY_DATE_ERROR:
        return localisedHelper.expiryDateError;
      case ErrorType.PASSWORD_MISMATCH_ERROR:
        return localisedHelper.passwordMismatchError;
      case ErrorType.SENDING_DEVICE_OTP_ERROR:
        return localisedHelper.sendingDeviceOtpError;
      case ErrorType.SELECT_FUTURE_DATE:
        return localisedHelper.selectFutureDate;
      case ErrorType.INVALID_GENDER_VALUE:
        return localisedHelper.invalidGenderValue;
      case ErrorType.INVALID_SCHEDULE_TIME:
        return localisedHelper.invalidScheduleTime;
      case ErrorType.FIREBASE_CONNECTION_ISSUE:
        return localisedHelper.firebaseConnectionIssue;
      case ErrorType.CALL_RECORD_NOT_FOUND:
        return localisedHelper.callRecordNotFound;
      case ErrorType.NI_HANDLER_ERROR:
        return localisedHelper.niHandlerError;
      case ErrorType.LOAN_VALUES_ERROR:
        return localisedHelper.loanValuesError;
      case ErrorType.INVALID_LOAN_VALUE_ID:
        return localisedHelper.inValidLoanValueId;
      case ErrorType.INVALID_CREDIT_LIMIT:
        return localisedHelper.inValidCreditLimit;
      case ErrorType.LOAN_VALUE_PROCESS_ERROR:
        return localisedHelper.loanValueProcessError;
      case ErrorType.LOAN_VALUE_REQUEST_PROCESSING_ERROR:
        return localisedHelper.loanValueRequestProcessingError;
      case ErrorType.INVALID_CUSTOMER_ID:
        return localisedHelper.invalidCustomerId;
      case ErrorType.INVALID_CREDIT_CARD_ID:
        return localisedHelper.invalidCreditCardId;
      case ErrorType.STEP_2_INCOMPLETE:
        return localisedHelper.step2Complete;
      case ErrorType.LOAN_STEP_NOT_DONE:
        return localisedHelper.loanStepNotDone;
      case ErrorType.LOAN_VALUES_NOT_FOUND:
        return localisedHelper.loanValuesNotFound;
      case ErrorType.ERROR_IN_MESSAGE:
        return localisedHelper.errorInMessage;
      case ErrorType.CRIF_UPDATE_ERROR:
        return localisedHelper.cridUpdateError;
      case ErrorType.ARMEX_API_ERROR:
        return localisedHelper.armexApiError;
      case ErrorType.INVALID_PAYBACK_AMOUNT:
        return localisedHelper.invalidPayBackAmount;
      case ErrorType.CREDIT_CARD_DATA_NOT_FOUND:
        return localisedHelper.creditCardDataNotFound;
      case ErrorType.ACCOUNT_CLAIM_NOT_FOUND:
        return localisedHelper.accountClaimNotFound;
      case ErrorType.CARD_LOAN_ACC_NOT_FOUND:
        return localisedHelper.cardLoanAccNotFound;
      case ErrorType.PAYMENT_CASHBACK_ERROR:
        return localisedHelper.paymentCashbackError;
      case ErrorType.REGISTERING_USER_TO_VKEY_ERROR:
        return localisedHelper.registeringUserToVKeyError;
      case ErrorType.NULL_ID:
        return localisedHelper.nullId;
      case ErrorType.ASSIGN_TOKEN_ERROR:
        return localisedHelper.assignTokenError;
      case ErrorType.TOKEN_SERIAL_APN_EMPTY:
        return localisedHelper.tokenSerialApnEmpty;
      case ErrorType.PIN_REQUIRED:
        return localisedHelper.pinRequired;
      case ErrorType.INVALID_MESSAGE_ID:
        return localisedHelper.invalidMessageId;
      case ErrorType.VKEY_TRANSACTION_FAILED:
        return localisedHelper.vKeyTransactionFailed;
      case ErrorType.VKEY_MESSAGE_ID_REQUIRED:
        return localisedHelper.vKeyMessageIdRequired;
      case ErrorType.LOGIN_NOT_ALLOWED:
        return localisedHelper.loginNotAllowed;
      case ErrorType.ENTER_DETAILS:
        return localisedHelper.enterDetails;
      case ErrorType.IMAGE_NULL:
        return localisedHelper.imageNull;
      case ErrorType.PROOF_REQUIRED:
        return localisedHelper.proofRequired;
      case ErrorType.OTP_NULL:
        return localisedHelper.otpNull;
      case ErrorType.DEVICE_IS_REQUIRED:
        return localisedHelper.deviceIsRequired;
      case ErrorType.UNAUTHORIZED_USER:
        return localisedHelper.sessionTimeout;

      ///error parsing
      case ErrorType.MODEL_NOT_CORRECT:
        return localisedHelper.errorModelNotCorrect;
      case ErrorType.UNAUTHORIZE:
        return localisedHelper.unauthorize;
      case ErrorType.YOU_LOCKED:
        return localisedHelper.youLocked;
      case ErrorType.ENTER_VALID_USERNAME:
        return localisedHelper.enterValidUserName;
      case ErrorType.INVALID_ACCOUNT_ID:
        return localisedHelper.invalidAccountID;
      case ErrorType.ERROR_GETTING_RETAIL_CIF:
        return localisedHelper.errorWhileGettingRetailCIF;
      case ErrorType.INVALID_PRODUCT_ID:
        return localisedHelper.invalidProductId;
      case ErrorType.RESIDENT_INFO_NOT_FOUND:
        return localisedHelper.residentInfoNotFound;
      case ErrorType.INVALID_PRODUCT_SHORT_CODE:
        return localisedHelper.invalidProductShortCode;
      case ErrorType.MAXIMUM_ACCOUNT_OPENING_EXCEED:
        return localisedHelper.maximumAccountOpeningExceed;
      case ErrorType.MAXIMUM_AGE_OF_USER:
        return localisedHelper.maximumAgeOfUser;
      case ErrorType.CANNOT_PROCEED_FOR_PRODUCT:
        return localisedHelper.forThisProductCannotProceed;
      case ErrorType.RESIDENT_COUNTRY_RESTRICTED:
        return localisedHelper.residentCountryRestricted;
      case ErrorType.NATIONALITY_RESTRICTED:
        return localisedHelper.nationalityRestricted;
      case ErrorType.ID_NO_BLACKLISTED:
        return localisedHelper.idNoBlacklisted;
      case ErrorType.ERROR_WHILE_CHECKING_ID_NO_BLACKLISTED:
        return localisedHelper.errorWhileCheckingIDNoBlacklisted;
      case ErrorType.NOT_ALLOWED_TO_OPEN_ACCOUNT:
        return localisedHelper.notAllowedToOpenAccount;
      case ErrorType.ID_CARD_SCANNING_ERROR:
        return localisedHelper.idCardScanningError;
      case ErrorType.INVALID_ISSUER_COUNTRY:
        return localisedHelper.invalidIssuerCountry;
      case ErrorType.INVALID_ID_CARD_CANNOT_PROCEED:
        return localisedHelper.invalidIdCardCannotProceed;
      case ErrorType.INVALID_NATIONAL_ID_CARD:
        return localisedHelper.invalidNationalIdCard;
      case ErrorType.ID_CARD_IS_EXPIRED:
        return localisedHelper.idCardIsExpired;
      case ErrorType.LESS_THAN_PRIMARY:
        return localisedHelper.lessThanPrimary;
      case ErrorType.INVALID_NATIONALITY:
        return localisedHelper.invalidNationality;
      case ErrorType.WS_CHILD_ERROR:
        return localisedHelper.wsChildError;
      case ErrorType.CREATE_CARD_ERROR:
        return localisedHelper.createCardError;
      case ErrorType.INVALID_SUPPLEMENTARY_CARD_ID:
        return localisedHelper.invalidSupplementaryCardId;
      case ErrorType.SET_CONTACTLESS_ZERO_ERROR:
        return localisedHelper.setContactLessZeroError;
      case ErrorType.CONTACTLESS_ALREADY_DONE:
        return localisedHelper.contactlessAlreadyDone;
      case ErrorType.STEP_2_NOT_DONE_CREDIT_CARD:
        return localisedHelper.step2NotDoneCreditCard;
      case ErrorType.PROCESS_LOAN_STEP_NOT_DONE:
        return localisedHelper.processLoanStepNotDone;
      case ErrorType.CREATING_SHIPMENT_ERROR:
        return localisedHelper.creatingShippmentError;
      case ErrorType.PLATFORM_NOT_FOUND:
        return localisedHelper.platformNotFound;
      case ErrorType.TRANSACTION_NOT_ALLOWED:
        return localisedHelper.transactionNotAllowed;
      case ErrorType.UNABLE_TO_PROCEED_TRANSACTION:
        return localisedHelper.unableToProceedTransaction;
      case ErrorType.UNABLE_TO_COMPLETE_TRANSACTION:
        return localisedHelper.unableToCompleteTransaction;
      case ErrorType.GET_LOAN_PAYMENT_ERROR:
        return localisedHelper.getLoanPaymentError;
      case ErrorType.PROCESS_LOAN_ERROR:
        return localisedHelper.processLoanError;
      case ErrorType.CUSTOMER_NOT_ELIGIBLE:
        return localisedHelper.customerNotEligible;
      case ErrorType.LOAN_NOT_ACTIVE:
        return localisedHelper.loanNotActive;
      case ErrorType.RETRIEVE_INSTRUCTION_DETAILS:
        return localisedHelper.retrieveInstructionDetails;
      case ErrorType.EDRAW_API_GOT_WRONG:
        return localisedHelper.edrawApiGotWrong;
      case ErrorType.ESETTLEMENT_WENT_WRONG:
        return localisedHelper.esettlementGoneWrong;
      case ErrorType.AMOUNT_LIMIT_ERROR:
        return localisedHelper.amountLimitError;
      case ErrorType.AMOUNT_GREATER_THAN_OUTSTANDING:
        return localisedHelper.amountGreaterThanOutstanding;
      case ErrorType.BUSINESS_RULES_NOT_IMPLEMENTED_AGAINST_COMPANY_ID:
        return localisedHelper.businessRulesNotImplementedAgainstCompanyId;
      case ErrorType.USE_VALID_ID:
        return localisedHelper.useValidId;
      case ErrorType.GUARDIAN_AGE_VALIDATION:
        return localisedHelper.guardianAgeMustBe;
      case ErrorType.PROFILE_STATUS_NOT_FOUND:
        return localisedHelper.profileStatusNotFound;
      case ErrorType.RESPONSE_1_REQUIRED:
        return localisedHelper.response1Required;
      case ErrorType.RESPONSE_2_REQUIRED:
        return localisedHelper.response2Required;
      case ErrorType.RESPONSE_3_REQUIRED:
        return localisedHelper.response3Required;
      case ErrorType.RESPONSE_4_REQUIRED:
        return localisedHelper.response4Required;
      case ErrorType.RESPONSE_5_REQUIRED:
        return localisedHelper.response5Required;
      case ErrorType.RESIDENCE_COUNTRY_NOT_FOUND:
        return localisedHelper.residenceCountryNotFound;
      case ErrorType.NO_SIGNATURE_FOUND:
        return localisedHelper.noSignatureFound;
      case ErrorType.FATCA_DETAILS_NOT_FOUND:
        return localisedHelper.fatcaDetailNotFound;
      case ErrorType.INVALID_MOBILE_CODE:
        return localisedHelper.invalidMobileCode;
      case ErrorType.INVALID_LIVELINESS_SCORE:
        return localisedHelper.invalidLivelinessSCore;
      case ErrorType.INVALID_FACE_MATCH_SCORE:
        return localisedHelper.invalidFaceMatchScore;
      case ErrorType.FINGERPRINT_ALREADY_EXIST_FOR_DEVICE:
        return localisedHelper.fingerPrintAlreadyExistForDevice;
      case ErrorType.FINGERPRINT_NOT_FOUND:
        return localisedHelper.fingerPrintNotFound;
      case ErrorType.JOB_DETAILS_NOT_FOUND:
        return localisedHelper.jobDetailsNotFound;
      case ErrorType.ACCOUNT_PURPOSE_NOT_FOUND:
        return localisedHelper.accountPurposeNotFound;
      case ErrorType.ID_CARD_DATA_NOT_FOUND:
        return localisedHelper.idCardDataNotFound;
      case ErrorType.CUSTOMER_PREFERENCE_NOT_FOUND:
        return localisedHelper.customerPreferenceNotFound;
      case ErrorType.INVALID_MINIMUM_AGE:
        return localisedHelper.invalidMinimumAge;
      case ErrorType.INVALID_MAXIMUM_AGE:
        return localisedHelper.invalidMaximumAge;
      case ErrorType.INVALID_ACCOUNT_LIMIT:
        return localisedHelper.invalidAccountLimit;
      case ErrorType.APPLICATION_UNDER_REVIEW:
        return localisedHelper.applicationUnderReview;
      case ErrorType.RIMNO_TAKEN_BY_OTHER_USER:
        return localisedHelper.rimNoTakenByOtherUser;
      case ErrorType.ERROR_CREATING_WORKSPACE:
        return localisedHelper.errorCreatingWorkSpace;
      case ErrorType.ERROR_CREATING_DOCUMENTS:
        return localisedHelper.errorCreatingDocuments;
      case ErrorType.ERROR_UPDATING_CATEGORY_CIF:
        return localisedHelper.errorUpdatingCategoryCif;
      case ErrorType.ERROR_UPDATING_CATEGORY:
        return localisedHelper.errorUpdatingCategory;
      case ErrorType.NOT_REGISTERED_BANK:
        return localisedHelper.notRegisteredBank;
      case ErrorType.PROVIDED_COUNTRY_NOT_ALLOWED:
        return localisedHelper.providedCountryNotAllowed;
      case ErrorType.INVALID_OTP_NETWORK:
        return localisedHelper.invalidOtpNetwork;
      case ErrorType.INVALID_OTP_CODE_NETWORK:
        return localisedHelper.invalidOtpCodeNetwork;
      case ErrorType.OTP_REQUESTED_MANY_TIME:
        return localisedHelper.otpRequestedManyTime;
      case ErrorType.OTP_EXPIRED_NETWORK:
        return localisedHelper.otpExpiredNetwork;
      case ErrorType.NOT_ALLOWED_TO_LOGIN:
        return localisedHelper.notAllowedToLogin;
      case ErrorType.IP_ADDRESS_CALL_INTERNAL_SERVER_ERROR:
        return localisedHelper.ipAddressCallInternalServerError;
      case ErrorType.APPLICATION_IN_PROCESS:
        return localisedHelper.applicationInProcess;
      case ErrorType.NO_ACCOUNT_FOUND:
        return localisedHelper.noAccountFound;
      case ErrorType.ERROR_UPDATING_ACCOUNT:
        return localisedHelper.errorUpdatingAccount;
      case ErrorType.INVALID_SIGNATURE_NETWORK:
        return localisedHelper.invalidSignatureNetwork;
      case ErrorType.NO_ATM_DATA:
        return localisedHelper.noATMData;
      case ErrorType.NOT_VERIFIED:
        return localisedHelper.notVerified;
      case ErrorType.OTP_LIMIT_EXCEED:
        return localisedHelper.otpLimitExceedNetwork;
      case ErrorType.INVALID_OTP_REQ:
        return localisedHelper.invalidOtpReq;
      case ErrorType.IMAGE_NOT_FOUND:
        return localisedHelper.imageNotFound;
      case ErrorType.DOCUMENTS_NOT_FOUND:
        return localisedHelper.documentsNotFound;
      case ErrorType.INVALID_EMAIL_NETWORK:
        return localisedHelper.invalidEmailNetwork;
      case ErrorType.INVALID_MOBILE_NO:
        return localisedHelper.invalidMobileNo;
      case ErrorType.INVALID_CURRENT_PASS:
        return localisedHelper.invalidCurrentPass;
      case ErrorType.NO_REQUEST_FOUND_RTP:
        return localisedHelper.noRequestFoundRTP;
      case ErrorType.ISO_NATIONALITY_NOT_FOUND:
        return localisedHelper.isoNationalityNotFound;
      case ErrorType.ERROR_WHILE_ISSUE_CARD:
        return localisedHelper.errorWhileIssueCard;
      case ErrorType.ERROR_WHILE_GETTING_XCS_CUSTOMER_DETAILS:
        return localisedHelper.errorWhileGettingXCSCustomerDetails;
      case ErrorType.NO_DEBIT_CARD_RECORD_FOUND:
        return localisedHelper.noDebitCardRecordFound;
      case ErrorType.ERROR_EURONET_CUSTOMER_CARD_DETAILS:
        return localisedHelper.errorEuronetCustomerCardDetails;
      case ErrorType.ERROR_SETTING_PIN_EURONET:
        return localisedHelper.errorSettingPinEuronet;
      case ErrorType.INVALID_CARD_ID:
        return localisedHelper.invalidCardId;
      case ErrorType.INVALID_FOUR_DIGIT:
        return localisedHelper.invalidFourDigit;
      case ErrorType.CONTACTLESS_ERROR:
        return localisedHelper.contactlessError;
      case ErrorType.CARD_INFO_ERROR:
        return localisedHelper.cardInfoError;
      case ErrorType.ERROR_GETTING_CARD_INFO:
        return localisedHelper.errorGettingCardInfo;
      case ErrorType.LOAN_ACCOUNT_LIST_NOT_FOUND:
        return localisedHelper.loanAccountListNotFound;
      case ErrorType.PRIMARY_LOAN_ACC_LIST_NOT_FOUND:
        return localisedHelper.primaryLoanAccListNotFound;
      case ErrorType.PRIMARY_CARD_NOT_ACTIVE:
        return localisedHelper.primaryCardNotActive;
      case ErrorType.RELATIVE_ID_ERROR:
        return localisedHelper.relativeIdError;
      case ErrorType.ERROR_CREATE_CREDIT_CARD:
        return localisedHelper.errorCreateCreditCard;
      case ErrorType.SETTING_CONTACTLESS_ERROR:
        return localisedHelper.settingContactLessError;
      case ErrorType.ERROR_GETTING_CARD_INFO_NET:
        return localisedHelper.errorInGetCardInfoNet;
      case ErrorType.ERROR_UPDATING_LIMITS:
        return localisedHelper.errorUpdatingLimits;
      case ErrorType.ERROR_UPDATING_CARD_STATUS_RULEENGINE:
        return localisedHelper.errorUpdatingCardStatusRuleEngine;
      case ErrorType.NO_DEBIT_CARD_FOUND:
        return localisedHelper.noDebitCardFound;
      case ErrorType.ERROR_WHILE_UPDATING_PIN_STATUS_RE:
        return localisedHelper.errorWhileUpdatingPinStatusRE;
      case ErrorType.ERROR_WHILE_UPDATING_CARD_STATUS_NI:
        return localisedHelper.errorWhileUpdatingCardStatusNI;
      case ErrorType.ERROR_WHILE_UNBLOCK_PIN_NI:
        return localisedHelper.errorWhileUnblockPinNI;
      case ErrorType.ERROR_WHILE_GETTING_ACCOUNT_DETAILS_A2A:
        return localisedHelper.errorWhileGettingAccountDetailsA2A;
      case ErrorType.PURPOSE_DETAILS_NOT_FOUND:
        return localisedHelper.purposeDetailsNotFound;
      case ErrorType.ERROR_CUSTOMER_BY_ACCOUNT_A2A:
        return localisedHelper.errorCustomerByAccountA2A;
      case ErrorType.ERROR_WHILE_RTP_A2A:
        return localisedHelper.errorWhileRTPA2A;
      case ErrorType.INVALID_ACCOUNT:
        return localisedHelper.invalidAccount;
      case ErrorType.ERROR_WHILE_GETTING_ACCOUNT_BS:
        return localisedHelper.errorWhileGettingAccountBS;
      case ErrorType.INVALID_AMOUNT:
        return localisedHelper.invalidAmount;
      case ErrorType.ERROR_MULTIBRANCH_API_BS:
        return localisedHelper.errorMultibranchAPIBS;
      case ErrorType.TRANSFER_TYPE_NF:
        return localisedHelper.transferTypeNF;
      case ErrorType.TRANSFER_TYPE_NF_RTP:
        return localisedHelper.transferTypeNFRTP;
      case ErrorType.INVALID_ID_NO:
        return localisedHelper.invalidIdNo;
      case ErrorType.INVALID_EXPIRY_DATE:
        return localisedHelper.invalidExpiryDate;
      case ErrorType.EMPTY_CARD_NO:
        return localisedHelper.emptyCardNo;
      case ErrorType.MINOR_NOT_ALLOWED:
        return localisedHelper.minorNotAllowed;
      case ErrorType.INVALID_PRIMARY_ID:
        return localisedHelper.invalidPrimaryId;
      case ErrorType.DEVICE_NOT_COMPATIBLE:
        return localisedHelper.scanIdToProceedFurther;
      case ErrorType.REQUEST_TIMEOUT:
        return localisedHelper.requestTimeOut;
      case ErrorType.INVALID_ID_VERIFICATION_177:
        return localisedHelper.idVerificationFailed177;
      case ErrorType.INVALID_ID_VERIFICATION_178:
        return localisedHelper.idVerificationFailed178;
      case ErrorType.AGENT_NOT_AVAILABLE:
        return localisedHelper.agentNotAvailable;
      case ErrorType.EMPTY_CLIQ_ID_TYPE:
        return localisedHelper.emptyCliqIdType;
      case ErrorType.EMPTY_ALIAS:
        return localisedHelper.emptyAlias;
      case ErrorType.NO_PLACEHOLDER_FOUND:
        return localisedHelper.noPlaceholderFound;
      case ErrorType.PLACEHOLDER_ID_NULL:
        return localisedHelper.placeholderIdNull;
      case ErrorType.PRIMARY_NOT_COMPLETE:
        return localisedHelper.primaryNotComplete;
      case ErrorType.RELATION_NULL:
        return localisedHelper.relationNull;
      case ErrorType.AHWAL_FAILED:
        return localisedHelper.ahwalFailed;
      case ErrorType.INVALID_RELATION:
        return localisedHelper.invalidRelation;
      case ErrorType.PRIMARY_ID_NOT_MATCH_GROOM:
        return localisedHelper.primaryIdNotMatchWithGroom;
      case ErrorType.SEC_ID_NOT_MATCH_FATHER_MOTHER:
        return localisedHelper.suppIdNotMatchWIthMotherFather;
      case ErrorType.PRIMARY_DEBIT_CARD_NOT_MATCH_WITH_FATHER_MOTHER:
        return localisedHelper.primaryDebitCardIdNotMatchWithMotherFather;
      case ErrorType.RELATIONSHIP_NULL:
        return localisedHelper.relationShipNull;
      case ErrorType.INVALID_RELATIONSHIP_API:
        return localisedHelper.invalidRelationshipAPI;
      case ErrorType.PRIM_CREDIT_CARD_ID_NOT_MATCH_GROOM:
        return localisedHelper.primaryCreditCardHoldIdNotMatchGroom;
      case ErrorType.SUPP_CREDIT_HOLDER_ID_NOT_MATCH_FATHER_MOTHER:
        return localisedHelper.supplementaryCreditCardHolderIdNotMatchMotherFather;
      case ErrorType.PRIM_DEBIT_CREDIT_CARD_ID_NOT_MATCH_MOTHER_FATHER:
        return localisedHelper.primaryDebitCreditCardHolderNotMatchMotherFather;
      case ErrorType.NO_DATA_FOUND_IN_FINANCIAL_INSTITUTION:
        return localisedHelper.noDataFoundInFI;
      case ErrorType.NO_SUPP_USER_DETAILS_FOUND:
        return localisedHelper.noSuppUserDetailsFound;
      case ErrorType.SELECT_ACCOUNT:
        return localisedHelper.selectAccount;
      case ErrorType.SELECT_AMOUNT:
        return localisedHelper.selectAMount;
      case ErrorType.SELECT_REGION:
        return localisedHelper.selectRegion;
      case ErrorType.CANNOT_APPLY_CC_INSUFFICIENT_FUNDS:
        return localisedHelper.cannotApplyCCInsufficientFunds;
      case ErrorType.AMOUNT_GREATER_THAN_ZERO:
        return localisedHelper.amountGreaterThan0;
      case ErrorType.CANNOT_PROCEED_NO_AHWAL_DATA_FOUND:
        return localisedHelper.accountOpeningDescription;
      case ErrorType.ID_ALREADY_EXISTS:
        return localisedHelper.idAlreadyExists;
      case ErrorType.AHWAL_SERVICE_NOT_AVAILABLE:
        return localisedHelper.ahwalServiceNotAvailable;
      case ErrorType.LOCATION_RESTRICTED:
        return localisedHelper.locationRestricted;
      case ErrorType.ERROR_PHYSICAL_DC_XCS:
        return localisedHelper.errorPhysicalDCXCS;
      case ErrorType.ERROR_FOR_PIN_TRANSLATION_XCS:
        return localisedHelper.errorPinTranslationXCS;
      case ErrorType.ERROR_FOR_PIN_CHANGE_NI:
        return localisedHelper.errrorForPinChangeNI;
      case ErrorType.ERROR_CC_UNBLOCK_NI:
        return localisedHelper.errorCCUnBlockNI;
      case ErrorType.LOGIN_REGISTER_DISABLED:
        return localisedHelper.loginRegisterDisabled;
      case ErrorType.ID_VERIFICATION_FAILED:
        return localisedHelper.idVerificationFailed;
      case ErrorType.PAYMENT_NOT_DONE:
        return localisedHelper.paymentNotDone;
      case ErrorType.NO_TICKETS_FOUND:
        return localisedHelper.noTicketsFound;
      case ErrorType.NO_BILLER_FOUND:
      case ErrorType.NO_BILLER_FOUND:
        return localisedHelper.noTicketsFound;
      case ErrorType.NO_PREPAID_CATEGORY_FOUND:
        return localisedHelper.noPrepaidCategoryFound;
      case ErrorType.INSUFFICIENT_FUNDS_BILL_CANNOT_BE_PAYED:
        return localisedHelper.insufficientFundsBillCannotBePaid;
      case ErrorType.QR_INVALID:
        return localisedHelper.qrInvalid;
      case ErrorType.QR_EXPIRED:
        return localisedHelper.qrExpired;
      case ErrorType.ENTER_BILL_DETAILS:
        return localisedHelper.enterBillDetails;
      case ErrorType.INVALID_NICK_NAME:
        return localisedHelper.nickNameCanOnlyContainAlphanumerics;
      case ErrorType.QR_NOT_SCANNED:
        return localisedHelper.qrNotScanned;
      case ErrorType.BILLER_IS_ALREADY_EXIST_WITHIN_THE_SAME_BILLING_NO:
        return localisedHelper.billerAlreadyExistsMessage;
      case ErrorType.BILL_PAYMENT_SORRY_MESSAGE:
        return localisedHelper.billPaymentSorryMessage;
      case ErrorType.REJECTED_DUE_TO_EXPIRY_DATE:
        return localisedHelper.rejectedDueToExpiryDate;
      case ErrorType.THERE_ARE_NO_DUE_BILLS_TO_BE_PAID_AT_THE_MOMENT:
        return localisedHelper.thereAreNoDueBillsToBePaidAtTheMoment;
      case ErrorType.DATE_COMPARISON:
        return localisedHelper.dateComparison;
      case ErrorType.SERVICE_NOT_AVAILABLE:
        return localisedHelper.serviceIsNotavaliable;
      case ErrorType.IS_PAID_FAILED:
        return "";
      case ErrorType.DAILY_LIMIT_EXCEDED:
        return localisedHelper.dailyNarrationLimitexceed;

      default:
        return "";
    }
  }
}
