#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
#ifndef ANTELOPSDK_SWIFT_H
#define ANTELOPSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AntelopSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class UIApplication;
@class NSNumber;
@class NSData;

/// <ul>
///   <li>
///     This class is the main entry point of the FrameWork.
///   </li>
///   <li>
///     You have to link your AppDelegate with methods of this class because you may need some triggers, but we need also theses triggers.
///   </li>
///   <li>
///     We expose functions that they have the same signature of AppDelegate in order to be clear on how-to use them
///   </li>
///   <li>
///     Be sure you never try to create your own instance and use <code>AntelopAppDelegate.shared</code> instead
///   </li>
/// </ul>
SWIFT_CLASS("_TtC10AntelopSDK18AntelopAppDelegate")
@interface AntelopAppDelegate : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// <ul>
///   <li>
///     Public singleton instance - Be sure you always use this instance by using the following pattern
///   </li>
///   <li>
///     <code>AntelopAppDelegate.shared</code>
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AntelopAppDelegate * _Nonnull shared;)
+ (AntelopAppDelegate * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// This method must be called on <code>didFinishLaunchingWithOptions</code> function from AppDelegate
/// This method is called when app is launched for the first time in app lifecycle
/// \param application the UIApplication param from the initial method
///
/// \param launchOptions The <code>[UIApplication.LaunchOptionsKey: Any]?</code> as they defined from initial method
///
- (BOOL)application:(UIApplication * _Nonnull)application didFinishLaunchingWithOptions:(NSDictionary<UIApplicationLaunchOptionsKey, id> * _Nullable)launchOptions;
- (void)willResignActiveNotification:(UIApplication * _Nonnull)application;
/// This method must be called on <code>applicationDidBecomeActive</code> function form AppDelegate
/// This method is called when application is now in foreground mode
/// \param application the <code>UIApplication</code> param from the initial method
///
- (void)applicationDidBecomeActive:(UIApplication * _Nonnull)application;
/// This method must be called on <code>applicationWillTerminate</code> function form AppDelegate
/// This method is called when application is about to terminate
/// \param application the <code>UIApplication</code> param from the initial method
///
- (void)applicationWillTerminate:(UIApplication * _Nonnull)application;
/// This method must be called on <code>applicationDidEnterBackground</code> function form AppDelegate
/// This method is called when application is about to enter in background
/// \param application the <code>UIApplication</code> param from the initial method
///
- (void)applicationDidEnterBackground:(UIApplication * _Nonnull)application;
/// This method must be called on <code>didRegisterForRemoteNotificationsWithDeviceToken</code> function from AppDelegate
/// This method is called by AppDelegate when you successfuly register to APNS
/// \param application the <code>UIApplication</code> param from the initial method
///
/// \param deviceToken the “deviceToken” (<code>Data</code>) param from the initial method
///
- (void)application:(UIApplication * _Nonnull)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData * _Nonnull)deviceToken;
/// This method must be called on <code>didReceiveRemoteNotification</code> function from AppDelegate
/// This method is called by AppDelegate when a remote notification is received by device
/// \param application the <code>UIApplication</code> param from the initial method
///
/// \param userInfo the <code>[AnyHashable: Any]</code> param from the initial method
///
/// \param completionHandler the <code>(UIBackgroundFetchResult) -> Void</code> param from the initial method
///
- (void)application:(UIApplication * _Nonnull)application didReceiveRemoteNotification:(NSDictionary * _Nonnull)userInfo fetchCompletionHandler:(void (^ _Nonnull)(UIBackgroundFetchResult))completionHandler SWIFT_DEPRECATED_MSG("Use didReceiveRemoteNotification(_ userInfo: [AnyHashable: Any], fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void) instead.");
/// This method must be called from the <code>didReceiveRemoteNotification</code> function of the App Delegate
/// when a remote notification is received by the device.
/// This method returns a Bool indicating whether notification has been handled by the Antelop SDK or not.
/// If the method returns <em>true</em>, the SDK handled the notification, it will take the responsability of invoking <code>completionHandler</code>,
/// and app must not invoke it itself.
/// However, if the method returns <em>false</em>, the app integrating the SDK must proceed the notification and is responsible for calling the <code>completionHandler</code>.
/// \param userInfo the <code>[AnyHashable: Any]</code> param from the initial method
///
/// \param completionHandler the <code>(UIBackgroundFetchResult) -> Void</code> param from the initial method
///
///
/// returns:
/// A <em>Bool</em> indicating whether notification has been handled by the Antelop SDK or not.
- (BOOL)didReceiveRemoteNotification:(NSDictionary * _Nonnull)userInfo fetchCompletionHandler:(void (^ _Nonnull)(UIBackgroundFetchResult))completionHandler SWIFT_WARN_UNUSED_RESULT;
/// This method must be called on <code>performFetchWithCompletionHandler</code> function from AppDelegate
/// This method is called by AppDelegate on background refresh
/// \param application the <code>UIApplication</code> param from the initial method
///
/// \param completionHandler the <code>(UIBackgroundFetchResult) -> Void)</code> param the inital method
///
- (void)application:(UIApplication * _Nonnull)application performFetchWithCompletionHandler:(void (^ _Nonnull)(UIBackgroundFetchResult))completionHandler;
@end


/// This error enum list all the possible AntelopSDK errors.
typedef SWIFT_ENUM(NSInteger, AntelopError, open) {
/// Generic error reported when an internal technical error occurs.
  AntelopErrorInternal = 0,
/// The background refresh is not available
  AntelopErrorBackgroundRefreshNotAvailable = 1,
/// The user don t accept push notification service
  AntelopErrorPushNotificationNotAvailable = 2,
/// The SDK does not have the APNs token
  AntelopErrorMissingApnsToken = 3,
/// The <code>Antelop.plist</code> file could not be found in the main Bundle.
  AntelopErrorCouldNotFindAntelopPlistFile = 4,
/// ApplicationId Int (<code>fr.antelop.application_id</code>) is missing in <code>Antelop.plist</code>.
  AntelopErrorMissingApplicationIdInAntelopPlistFile = 5,
/// The operation has failed because network is not available.
  AntelopErrorNetworkNotAvailable = 6,
/// The operation has failed because of a network issue.
  AntelopErrorNetworkIssue = 7,
/// Generic error code reported when Antelop wallet provisioning fails because none of the <code>Product</code> items offered is allowed for the application.
  AntelopErrorNoProductAllowed = 8,
/// Generic error code reported when the activation of the wallet is required
  AntelopErrorActivationRequired = 9,
/// Generic error reported if wallet status is not “connected - ready to use”
  AntelopErrorWalletNotActivated = 10,
/// Generic error code reported when the wallet is deleted.
  AntelopErrorWalletDeleted = 11,
/// Generic error code reported when the wallet is locked thus nothing can be done before an unlock.
  AntelopErrorWalletLocked = 12,
/// Generic error code reported when a management operation fails because the customer has provided wrong credentials when authenticating.
  AntelopErrorInvalidCredentials = 13,
/// Local Authentication: the user cancelled
  AntelopErrorLocalAuthenticationCancelled = 14,
/// Local Authentication: the user failed to provide valid credentials.
  AntelopErrorLocalAuthenticationUserNotRecognized = 15,
/// Local Authentication: the user has selected the fallback authentication mechanism.
  AntelopErrorLocalAuthenticationUserFallback = 16,
/// Local Authentication: the device does not support biometric authentication.
  AntelopErrorLocalAuthenticationBiometryNotAvailable = 17,
/// Local Authentication: the user has not enrolled in biometric authentiation.
  AntelopErrorLocalAuthenticationBiometryNotEnrolled = 18,
/// Local Authentication: the user has been locked out of biometric authentication, due to failing authentication too many times.
  AntelopErrorLocalAuthenticationBiometryLockout = 19,
/// Local Authentication: the user has been locked out of PIN authentication, due to failing authentication too many times.
  AntelopErrorLocalAuthenticationPinLockout = 20,
/// Requested authentication pattern is unknown (not recongnized).
  AntelopErrorAuthenticationPatternUnknown = 21,
/// Requested authentication pattern has been cancelled.
  AntelopErrorAuthenticationPatternCancelled = 22,
/// Requested authentication pattern failed
  AntelopErrorAuthenticationPatternFailed = 23,
/// Requested authentication method is unknown (not recognized)
  AntelopErrorAuthenticationMethodUnknown = 24,
/// Requested authentication method has been cancelled.
  AntelopErrorAuthenticationMethodCancelled = 25,
/// Requested authentication method fallback mechanism.
  AntelopErrorAuthenticationMethodFallback = 26,
/// Requested authentication method has failed.
  AntelopErrorAuthenticationMethodFailed = 27,
/// Local authentication pattern failed
  AntelopErrorAuthenticationFailed = 28,
/// Strong customer authentication process error code reported when an authentication is refused because it has been cancelled from backend
  AntelopErrorScaCancelledFromBackend = 29,
/// Strong customer authentication process error code reported when an authentication is refused because the its has already been performed
  AntelopErrorScaDuplicated = 30,
/// Strong customer authentication process error code reported when an authentication is refused because it took too much time to be run
  AntelopErrorScaTimeout = 31,
/// Local authentication pattern internal error
  AntelopErrorAuthenticationInternalError = 32,
/// Local authentication not possible due to bad status or bad method usage :
/// ex : CLOUD_PIN is the only one method for a step in a pattern
  AntelopErrorCustomerAuthenticationImpossible = 33,
/// Local authentication is currently running - cannot sign another data
  AntelopErrorAuthenticationOnGoingOperation = 34,
/// Management error code reported when a one-time activation code submitted by customer is expired
  AntelopErrorExpiredActivationCode = 35,
/// Management error code reported when a one-time activation code submitted by customer is invalid
  AntelopErrorInvalidActivationCode = 36,
/// Management error code reported when a one-time activation code submitted by customer is locked
  AntelopErrorLockedActivationCode = 37,
/// Management error code reported when a one-time activation code submitted has already been used
  AntelopErrorAlreadyUsedActivationCode = 38,
/// Digital card already pushed
  AntelopErrorDigitalCardAlreadyPushed = 39,
/// The operation has been cancelled by the user
  AntelopErrorUserCancelled = 40,
/// The operation has failed because the targeted Card is locked
  AntelopErrorCardLocked = 41,
/// The operation has failed because the targeted Card is deleted
  AntelopErrorCardDeleted = 42,
/// Management error code reported when an online operation is refused from backend server.
  AntelopErrorOperationRefused = 43,
/// The Issuer Id is not defined in the plist file or in the SDK.
  AntelopErrorIssuerIdNotDefined = 44,
/// The operation has failed because the integrity of the application cannot be verified.
  AntelopErrorAppIntegrityCheckFailed = 45,
};
static NSString * _Nonnull const AntelopErrorDomain = @"AntelopSDK.AntelopError";

@class NSString;

SWIFT_CLASS("_TtC10AntelopSDK18AntelopErrorHelper")
@interface AntelopErrorHelper : NSObject
/// Returns a string representation of an AntelopError.
/// Only for an ObjC project, otherwise prefere the AntelopError#getCode() function.
/// \param error AntelopError
///
///
/// returns:
/// a string representation of an AntelopError.
+ (NSString * _Nonnull)getCodeWithError:(enum AntelopError)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ApplePayTokenLocation, open) {
  ApplePayTokenLocationCurrentDevice = 0,
  ApplePayTokenLocationRemotePairedDevice = 1,
};

/// Enum for callbacks <code>WalletManagerProtocol</code>
/// <code>onAsyncRequestError</code>
/// <code>onAsyncRequestSuccess</code>
typedef SWIFT_ENUM(NSInteger, AsyncRequestType, open) {
  AsyncRequestTypeLogout = 0,
  AsyncRequestTypeLock = 1,
  AsyncRequestTypeDelete = 2,
  AsyncRequestTypeCheckCredentials = 3,
  AsyncRequestTypeChangeCredentials = 4,
  AsyncRequestTypeActivateAuthenticationMethod = 5,
  AsyncRequestTypeDeactivateAuthenticationMethod = 6,
  AsyncRequestTypeSynchronizeAuthenticationMethod = 7,
};

/// Object
typedef SWIFT_ENUM(NSInteger, CancellationReason, open) {
  CancellationReasonCancelledBySender = 0,
  CancellationReasonOtherResponded = 1,
};


SWIFT_CLASS("_TtC10AntelopSDK18CancellationSignal")
@interface CancellationSignal : NSObject
- (void)cancel;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// This enum lists all the possible status of an Card. The status of a Card indicates if it can be used to perform transactions.
/// The following CardStatus items are defined:
/// Active when the Card is active.
/// Locked when the Card is locked.
/// ActivationRequired when the Card is not yet active because it must be explicitly activated by customer first.
/// Activating when the Card is activating.
/// See Also:
/// EmvApplication
typedef SWIFT_ENUM(NSInteger, CardStatus, open) {
/// The Card is activating.
  CardStatusActivating = 0,
/// The Card is not usable, because its activation went wrong
  CardStatusActivationRefused = 1,
/// The Card is not yet active because it must be explicitly activated by customer first.
  CardStatusActivationRequired = 2,
/// The Card is active.
  CardStatusActive = 3,
/// The Card is locked.
  CardStatusLocked = 4,
/// The Card is not usable, because the terms and conditions validation is required
  CardStatusTermsAndConditionsValidationRequired = 5,
};


/// :nodoc:
SWIFT_CLASS("_TtC10AntelopSDK11Credentials")
@interface Credentials : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


enum SignatureType : NSInteger;

/// Class to handle an offline JWS with
/// <ul>
///   <li>
///     a default mode : Framework will prompt internal views and handle Credentials
///   </li>
///   <li>
///     a custom mode : Framework helps you with events to create an authenticate process
///   </li>
/// </ul>
SWIFT_CLASS("_TtC10AntelopSDK30CustomerAuthenticatedSignature")
@interface CustomerAuthenticatedSignature : NSObject
/// Create an instance to generate a JWT Token
/// \param patternName the name of the pattern, should be existing in back-office, and device can execute this pattern
///
/// \param signatureInputData The content to be signed, as String
///
/// \param message The input message which be presented through prompt views (in default mode)
///
- (nonnull instancetype)initWithPatternName:(NSString * _Nonnull)patternName signatureInputData:(NSString * _Nonnull)signatureInputData signatureType:(enum SignatureType)signatureType message:(NSString * _Nullable)message OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use init(String:Data:SignatureType:String?) instead");
/// Create an instance to generate a JWT Token
/// \param patternName the name of the pattern, should be existing in back-office, and device can execute this pattern
///
/// \param signatureInputData The content to be signed, as Data
///
/// \param message The input message which be presented through prompt views (in default mode)
///
- (nonnull instancetype)patternName:(NSString * _Nonnull)patternName signatureInputData:(NSData * _Nonnull)signatureInputData signatureType:(enum SignatureType)signatureType message:(NSString * _Nullable)message OBJC_DESIGNATED_INITIALIZER SWIFT_METHOD_FAMILY(init);
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface CustomerAuthenticatedSignature (SWIFT_EXTENSION(AntelopSDK))
/// Return the data to be signed
- (NSString * _Nullable)getInputData SWIFT_WARN_UNUSED_RESULT;
/// This method return an encoded JWT Token.
/// This method should be used only when you get an <code>onProcessSuccess</code>event (avaliable in <code>DefaultCustomerAuthenticatedProcessProtocol</code> and <code>CustomCustomerAuthenticatedProcessProtocol</code>
///
/// returns:
/// a String representation of the encoded JWT - could be nil
- (NSString * _Nullable)getResult SWIFT_WARN_UNUSED_RESULT;
@end


@interface CustomerAuthenticatedSignature (SWIFT_EXTENSION(AntelopSDK))
/// Return the name of the authentication pattern
- (NSString * _Nonnull)getAuthenticationPatternName SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isOnline SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getMessage SWIFT_WARN_UNUSED_RESULT;
- (void)setOnlineAuthentication:(BOOL)onlineAuthentication;
@end

@class NSMutableData;

/// Class to handle credentials as Issuer Passcode - Passcode verification handled by Issuer
SWIFT_CLASS("_TtC10AntelopSDK36CustomerAuthenticationIssuerPasscode")
@interface CustomerAuthenticationIssuerPasscode : Credentials
/// \param passcode The passcode entered by the customer.
///
/// \param cryptogram The cryptogram to be presented to Issuer information system for validation. Its size cannot exceed 8192 bytes
///
/// \param cryptogramData Optional data to be presented along with the cryptogram to Issuer information. Its size cannot exceed 1024 bytes
///
- (nonnull instancetype)initWithPasscode:(NSMutableData * _Nonnull)passcode cryptogram:(NSMutableData * _Nullable)cryptogram cryptogramData:(NSMutableData * _Nullable)cryptogramData OBJC_DESIGNATED_INITIALIZER;
/// \param passcode The passcode entered by the customer.
///
/// \param cryptogram The cryptogram to be presented to Issuer information system for validation. Its size cannot exceed 8192 bytes
///
/// \param cryptogramData Optional data to be presented along with the cryptogram to Issuer information. Its size cannot exceed 1024 bytes
///
- (nonnull instancetype)passcode:(NSMutableData * _Nonnull)passcode cryptogram:(NSMutableData * _Nonnull)cryptogram cryptogramData:(NSMutableData * _Nullable)cryptogramData OBJC_DESIGNATED_INITIALIZER SWIFT_METHOD_FAMILY(init);
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




typedef SWIFT_ENUM(NSInteger, CustomerAuthenticationMethodStatus, open) {
/// Not supported by the device. Thus it cannot be used to authenticate customer and nothing can be done to get it supported.
  CustomerAuthenticationMethodStatusNotSupported = 0,
/// Not yet configured on the device. It must first be configured on device OS settings and then activated before it can be used to authenticate customer.
  CustomerAuthenticationMethodStatusNotConfigured = 1,
/// Configured but not activated. It must first be activated before it can be used to authenticate customer.
  CustomerAuthenticationMethodStatusConfigured = 2,
/// Activated, it can be used to authenticate the customer.
  CustomerAuthenticationMethodStatusActivated = 3,
};

/// This enums list the possible types of a customer authentication method.
typedef SWIFT_ENUM(NSInteger, CustomerAuthenticationMethodType, open) {
/// No authentication.
  CustomerAuthenticationMethodTypeNone = 0,
/// Customer consent authentication method
  CustomerAuthenticationMethodTypeConsent = 1,
/// Pin authentication method
  CustomerAuthenticationMethodTypePin = 2,
/// Biometric authentication method
  CustomerAuthenticationMethodTypeDeviceBiometric = 3,
};

typedef SWIFT_ENUM(NSInteger, CustomerAuthenticationMethodUsage, open) {
/// Wallet Management
  CustomerAuthenticationMethodUsageWalletManagement = 0,
/// Strong Customer Authentication
  CustomerAuthenticationMethodUsageSca = 1,
/// Digital Card
  CustomerAuthenticationMethodUsageDigitalCard = 2,
};


/// Class to handle credentials as Issuer Passcode - Passcode verification handled by Antelop services
SWIFT_CLASS("_TtC10AntelopSDK30CustomerAuthenticationPasscode")
@interface CustomerAuthenticationPasscode : Credentials
- (nonnull instancetype)initWithPasscode:(NSMutableData * _Nonnull)passcode OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// :nodoc:
/// This is the default object to configure layout and values in different prompt views.
SWIFT_CLASS("_TtC10AntelopSDK28CustomerAuthenticationPrompt")
@interface CustomerAuthenticationPrompt : NSObject
/// :nodoc:
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class represents a builder that collects the properties of a <code>CustomerAuthenticationPrompt</code>.
/// Each <code>CustomerAuthenticationPrompt</code> has its own way to prompt customer depending on its
/// <code>CustomerAuthenticationMethodType</code>, for example a
/// <code>CustomerAuthenticationMethod</code> with a type set to <code>CustomerAuthenticationMethodType.deviceBiometric</code>
/// displays a system provided dialog whereas a <code>CustomerAuthenticationMethod</code> with a type set to <code>CustomerAuthenticationMethodType.pin</code>
/// displays a keyboard with digits.
/// Thus, authentication prompts change from one <code>CustomerAuthenticationMethodType</code> to another, and only builders from a specific sub class
/// of <code>CustomerAuthenticationPromptBuilder</code> can be used to build a <code>CustomerAuthenticationPrompt</code> for authenticating customer with a
/// <code>CustomerAuthenticationMethod</code> of a given <code>CustomerAuthenticationMethodType</code>.
/// Here is the mapping between the <code>CustomerAuthenticationMethodType</code> items and the <code>CustomerAuthenticationPromptBuilder</code> associated sub classes .
/// Method with type set to <code>CustomerAuthenticationMethodType.pin</code> must prompt customer using <code>CustomerAuthenticationPrompt</code>
/// objects build from a <code>PinCustomerAuthenticationPromptBuilder</code>.
/// Method with type set to <code>CustomerAuthenticationMethodType.deviceBiometric</code> must prompt customer using <code>CustomerAuthenticationPrompt</code>
/// objects build from a <code>DeviceBiometricCustomerAuthenticationPromptBuilder</code>.
/// Method with type set to <code>CustomerAuthenticationMethodType.consent</code> must prompt customer using <code>CustomerAuthenticationPrompt</code>
/// objects build from a <code>CustomerConsentPromptBuilder</code>.
SWIFT_CLASS("_TtC10AntelopSDK35CustomerAuthenticationPromptBuilder")
@interface CustomerAuthenticationPromptBuilder : NSObject
- (CustomerAuthenticationPrompt * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Class to provide “CONSENT” credentials throught SCA when “.consent” method type is required
SWIFT_CLASS("_TtC10AntelopSDK26CustomerConsentCredentials")
@interface CustomerConsentCredentials : Credentials
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Prompt view configuration for “.consent” type
SWIFT_CLASS("_TtC10AntelopSDK21CustomerConsentPrompt")
@interface CustomerConsentPrompt : CustomerAuthenticationPrompt
@end

@class UIViewController;

@interface CustomerConsentPrompt (SWIFT_EXTENSION(AntelopSDK))
/// returns the View Controller from which the prompt should be presented
///
/// returns:
/// the View Controller from which the prompt should be presented
- (UIViewController * _Nullable)getPresentingViewController SWIFT_WARN_UNUSED_RESULT;
/// returns prompt title
///
/// returns:
/// prompt title
- (NSString * _Nullable)getTitle SWIFT_WARN_UNUSED_RESULT;
/// Returns the text in body of “alert” view
///
/// returns:
/// the text in body of “alert” view
- (NSString * _Nullable)getBody SWIFT_WARN_UNUSED_RESULT;
/// Returns the text for “cancel” button
///
/// returns:
/// the text for “cancel” button
- (NSString * _Nullable)getCancel SWIFT_WARN_UNUSED_RESULT;
/// Returns the text for “confirm” button
///
/// returns:
/// the text for “confirm” button
- (NSString * _Nullable)getConfirm SWIFT_WARN_UNUSED_RESULT;
@end


@interface CustomerConsentPrompt (SWIFT_EXTENSION(AntelopSDK))
/// Title of prompt.
/// In some case, this could be the message of the prompt
@property (nonatomic, readonly, copy) NSString * _Nullable title;
/// The text in body of “alert” view
@property (nonatomic, readonly, copy) NSString * _Nullable body;
/// The text for “cancel” button
@property (nonatomic, readonly, copy) NSString * _Nullable cancel;
/// The  text for “confirm” button
@property (nonatomic, readonly, copy) NSString * _Nullable confirm;
@end


/// This class represents a <code>CustomerAuthenticationPromptBuilder</code> that collects the display properties of the prompt associated to
/// a <code>CustomerAuthenticationMethod</code> with a type set to <code>CustomerAuthenticationMethodType.consent</code>.
SWIFT_CLASS("_TtC10AntelopSDK28CustomerConsentPromptBuilder")
@interface CustomerConsentPromptBuilder : CustomerAuthenticationPromptBuilder
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Sets the View Controller from which the Consent Authentication Prompt will be presented
/// \param presentingViewController the View Controller from which the Consent Authentication Prompt will be presented
///
///
/// returns:
/// the <code>CustomerConsentPromptBuilder</code>
- (CustomerConsentPromptBuilder * _Nonnull)setPresentingViewController:(UIViewController * _Nonnull)presentingViewController;
/// Sets the title of the pin authentication prompt.
/// \param title The title to set in the pin authentication prompt
///
///
/// returns:
/// the <code>PinCustomerAuthenticationPromptBuilder</code>
- (CustomerConsentPromptBuilder * _Nonnull)setTitleWithTitle:(NSString * _Nullable)title;
/// Sets the subtitle of the pin authentication prompt.
/// \param subtitle The subtitle to set in the pin authentication prompt
///
///
/// returns:
/// the <code>PinCustomerAuthenticationPromptBuilder</code>
- (CustomerConsentPromptBuilder * _Nonnull)setBodyWithBody:(NSString * _Nullable)body;
/// Sets the subtitle of the pin authentication prompt.
/// \param cancel The title of the Cancel button to set in the pin authentication prompt
///
///
/// returns:
/// the <code>PinCustomerAuthenticationPromptBuilder</code>
- (CustomerConsentPromptBuilder * _Nonnull)setCancelWithCancel:(NSString * _Nullable)cancel;
/// Sets the subtitle of the pin authentication prompt.
/// \param confirm The title of the Confirm button to set in the pin authentication prompt
///
///
/// returns:
/// the <code>PinCustomerAuthenticationPromptBuilder</code>
- (CustomerConsentPromptBuilder * _Nonnull)setConfirmWithConfirm:(NSString * _Nullable)confirm;
- (CustomerConsentPrompt * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
@end

/// This enum lists the possible reasons for a <code>WalletManager.connect()</code> to require credentials.
typedef SWIFT_ENUM(NSInteger, CustomerCredentialsRequiredReason, open) {
/// Customer has to authenticate in order to access to wallet services.
/// The credentials must be validated using <code>WalletManager.connect(currentPasscode:)</code>
  CustomerCredentialsRequiredReasonValidationNeeded = 0,
/// The credentials must be set using <code>WalletManager.connect(newPasscode:)</code>
  CustomerCredentialsRequiredReasonNotSet = 1,
/// The credentials must be changed using <code>WalletManager.connect(currentPasscode:newPasscode:)</code>
  CustomerCredentialsRequiredReasonToBeChanged = 2,
};

@class LAContext;

/// Class to provide “DEVICE_BIOMETRIC” credentials throught SCA when “.deviceBiometric” method type is required
SWIFT_CLASS("_TtC10AntelopSDK48CustomerDeviceBiometricAuthenticationCredentials")
@interface CustomerDeviceBiometricAuthenticationCredentials : Credentials
- (nonnull instancetype)initWithContext:(LAContext * _Nonnull)context OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Prompt view configuration for “.deviceBiometric” type
SWIFT_CLASS("_TtC10AntelopSDK43DeviceBiometricCustomerAuthenticationPrompt")
@interface DeviceBiometricCustomerAuthenticationPrompt : CustomerAuthenticationPrompt
@end


@interface DeviceBiometricCustomerAuthenticationPrompt (SWIFT_EXTENSION(AntelopSDK))
/// returns prompt title
///
/// returns:
/// prompt title
- (NSString * _Nullable)getTitle SWIFT_WARN_UNUSED_RESULT;
@end


@interface DeviceBiometricCustomerAuthenticationPrompt (SWIFT_EXTENSION(AntelopSDK))
/// Title of prompt.
/// In some case, this could be the message of the prompt
@property (nonatomic, readonly, copy) NSString * _Nullable title;
@end


/// This class represents a <code>CustomerAuthenticationPrompt</code> that collects the display properties of the prompt associated to
/// a <code>CustomerAuthenticationMethod</code> with a type set to <code>CustomerAuthenticationMethodType.deviceBiometric</code>.
SWIFT_CLASS("_TtC10AntelopSDK50DeviceBiometricCustomerAuthenticationPromptBuilder")
@interface DeviceBiometricCustomerAuthenticationPromptBuilder : CustomerAuthenticationPromptBuilder
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Sets the title of the pin authentication prompt.
/// \param title The title to set in the pin authentication prompt
///
///
/// returns:
/// the <code>DeviceBiometricCustomerAuthenticationPromptBuilder</code>
- (DeviceBiometricCustomerAuthenticationPromptBuilder * _Nonnull)setTitleWithTitle:(NSString * _Nullable)title;
- (DeviceBiometricCustomerAuthenticationPrompt * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
@end

/// This enum represents the status of a DigitalCard Service
typedef SWIFT_ENUM(NSInteger, DigitalCardServiceStatus, open) {
/// Digital Card service is active
  DigitalCardServiceStatusActive = 0,
/// Digital Card service is not enabled
  DigitalCardServiceStatusDisabled = 1,
/// Digital Card service is active but not configured
  DigitalCardServiceStatusNotConfiguredByUser = 2,
/// Digital Card service is not supported by the device
  DigitalCardServiceStatusNotSupportedByDevice = 3,
};


typedef SWIFT_ENUM(NSInteger, DisplayType, open) {
  DisplayTypeCardDetails = 0,
  DisplayTypePinCode = 1,
};

/// This enum lists the possible reasons for a device not to be eligible to run Antelop products.
typedef SWIFT_ENUM(NSInteger, EligibilityDenialReason, open) {
/// The Operating System of the device is not supported by Antelop wallet service.
  EligibilityDenialReasonOsNotSupported = 0,
/// iOS version of the device is not supported by the Antelop wallet service.
/// Today the minimum supported version is iOS 10.3
  EligibilityDenialReasonOsVersionNotSupported = 1,
/// The device has no telephony support.
/// Antelop wallet service cannot run without telephony support as it is involved in device fingerprinting.
/// Devices such as tablets do not have telephony support.
  EligibilityDenialReasonNoTelephony = 2,
/// The device does not support Near Field Communication (NFC) technology.
  EligibilityDenialReasonNfcNotSupported = 3,
/// The current device is not allowed by the Issuer to run Antelop products.
  EligibilityDenialReasonDeviceNotAllowed = 4,
/// The current device model with the current device version is no more allowed by the Issuer to run Antelop products.
  EligibilityDenialReasonDeviceSupportExpired = 5,
/// The device is rooted and rooted devices are not allowed by the Issuer to run Antelop products.
  EligibilityDenialReasonRootNotAllowed = 6,
/// The Antelop product is not supported by the sdk.
  EligibilityDenialReasonProductNotSupportedBySdk = 7,
};

typedef SWIFT_ENUM(NSInteger, EmvApplicationFormat, open) {
  EmvApplicationFormatDigitalCard = 0,
};

typedef SWIFT_ENUM(NSInteger, EmvApplicationStatus, open) {
  EmvApplicationStatusActive = 0,
  EmvApplicationStatusLocked = 1,
  EmvApplicationStatusDeleted = 2,
  EmvApplicationStatusActivationRequired = 3,
  EmvApplicationStatusActivating = 4,
  EmvApplicationStatusActivationRefused = 5,
};


SWIFT_CLASS("_TtC10AntelopSDK13LocaleManager")
@interface LocaleManager : NSObject
/// This method can be called from AppDelegate’s singleton instance
/// This method sets the sdk language parameter wich will affect the language displayed
/// in the screens returned by the SDK
/// \param locale the <code>String</code> language identifier code
///
- (void)applyLocaleTo:(NSString * _Nonnull)locale;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// This enum lists the possible reasons for a wallet to be locked.
/// It covers both the reasons for a customer to lock his/her own wallet and the reasons for an issuer to lock a given wallet.
typedef SWIFT_ENUM(NSInteger, LockReason, open) {
/// The customer suspects that a fraudulent use of his/her wallet has been made.
/// This value can be used as an input argument when calling the method <code>WalletManager.lock(_:)</code>
  LockReasonFraudulentUseSuspected = 0,
/// The customer does not want to use Antelop wallet service anymore.
/// This value can be used as an input argument when calling the method <code>WalletManager.lock(_:)</code>
  LockReasonStopService = 1,
/// The issuer has locked the wallet because the maximum number of failed authentication attempts with the strongest CustomerAuthenticationMethod of the wallet has been reached.
/// This value must not be used when calling the method WalletManager#lock(WalletLockReason) otherwise an WalletValidationError is thrown
  LockReasonStrongestCvmAttemptCountExceeded = 2,
/// The issuer has locked the wallet for an undefined reason.
/// This value must not be used when calling the method  <code>WalletManager.lock(_:)</code> otherwise an <code>AntelopError</code> is thrown
  LockReasonOtherReason = 3,
};

typedef SWIFT_ENUM(NSInteger, ManageTokenRequestAction, open) {
  ManageTokenRequestActionResume = 0,
  ManageTokenRequestActionSuspend = 1,
  ManageTokenRequestActionDelete = 2,
};

typedef SWIFT_ENUM(NSInteger, ManageVcnRequestAction, open) {
  ManageVcnRequestActionResume = 0,
  ManageVcnRequestActionSuspend = 1,
  ManageVcnRequestActionDelete = 2,
};








/// This struct is used to customize layout for PinPasscode view
/// You can custom all parameters you need, and omit some.
/// Refer to documentation to see default values
SWIFT_CLASS("_TtC10AntelopSDK31PinCustomerAuthenticationPrompt")
@interface PinCustomerAuthenticationPrompt : CustomerAuthenticationPrompt
@end

@class UIImage;
@class UIColor;

@interface PinCustomerAuthenticationPrompt (SWIFT_EXTENSION(AntelopSDK))
/// returns the View Controller from which the prompt should be presented
///
/// returns:
/// the View Controller from which the prompt should be presented
- (UIViewController * _Nullable)getPresentingViewController SWIFT_WARN_UNUSED_RESULT;
/// returns prompt title
///
/// returns:
/// prompt title
- (NSString * _Nullable)getTitle SWIFT_WARN_UNUSED_RESULT;
/// returns prompt subtitle
///
/// returns:
/// prompt subtitle
- (NSString * _Nullable)getSubtitle SWIFT_WARN_UNUSED_RESULT;
/// returns an <code>UIImage</code> instance for “close” button - The image will be colorized with “primary” color - size : 36x36
///
/// returns:
/// the image for close button
- (UIImage * _Nullable)getCloseImage SWIFT_WARN_UNUSED_RESULT;
/// An <code>UIImage</code> instance for “delete last number” button - The image will be colorized with “primary” color - size : 44x44
/// Delete button is placed on the bottom right keypad - visible only when there is at least one number tapped
///
/// returns:
/// the image for the delete button
- (UIImage * _Nullable)getDeleteImage SWIFT_WARN_UNUSED_RESULT;
/// The format text for prompt error (default : “Invalid Pin, remaining attempt(s) : %lu”)
///
/// returns:
/// the format text for prompt error
- (NSString * _Nullable)getErrorTextFormat SWIFT_WARN_UNUSED_RESULT;
/// Defines the <code>UIColor</code>of the view background (default : “#404040”)
///
/// returns:
/// the view background color
- (UIColor * _Nullable)getBackgroundColor SWIFT_WARN_UNUSED_RESULT;
/// Defines the <code>UIColor</code>of the “primary” color (texts, buttons, bullets, keyboard)  (default : “#FFFFFF”)
///
/// returns:
/// the “primary” color
- (UIColor * _Nullable)getPrimaryColor SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// the “secondary” color
- (UIColor * _Nullable)getSecondaryColor SWIFT_WARN_UNUSED_RESULT;
@end


@interface PinCustomerAuthenticationPrompt (SWIFT_EXTENSION(AntelopSDK))
/// Title of prompt.
/// In some case, this could be the message of the prompt
@property (nonatomic, readonly, copy) NSString * _Nullable title;
/// Second title, 2 lines max, below the title (default : “Enter your pin”)
@property (nonatomic, readonly, copy) NSString * _Nullable subtitle;
/// An <code>UIImage</code> instance of image for “close” button - The image will be colorized with “primary” color - size : 36x36
@property (nonatomic, readonly, strong) UIImage * _Nullable closeImage;
/// An <code>UIImage</code> instance for “delete last number” button - The image will be colorized with “primary” color - size : 44x44
/// Delete button is placed on the bottom right keypad - visible only when there is at least one number tapped
@property (nonatomic, readonly, strong) UIImage * _Nullable deleteImage;
/// The format text for prompt error (default : “Invalid Pin, remaining attempt(s) : %lu”)
@property (nonatomic, readonly, copy) NSString * _Nullable errorTextFormat;
/// Defines the <code>UIColor</code>of the view background (default : “#404040”)
@property (nonatomic, readonly, strong) UIColor * _Nullable backgroundColor;
/// Defines the <code>UIColor</code>of the “primary” color (texts, buttons, bullets, keyboard)  (default : “#FFFFFF”)
@property (nonatomic, readonly, strong) UIColor * _Nullable primaryColor;
/// Define the <code>UIColor</code>of the “secondary” color (keyboard buttons background)  (default : “#FFFFFF”)
@property (nonatomic, readonly, strong) UIColor * _Nullable secondaryColor;
@end


/// This class represents a <code>CustomerAuthenticationPrompt</code> that collects the display properties of the prompt associated to
/// a <code>CustomerAuthenticationMethod</code> with a type set to <code>CustomerAuthenticationMethodType.pin</code>.
SWIFT_CLASS("_TtC10AntelopSDK38PinCustomerAuthenticationPromptBuilder")
@interface PinCustomerAuthenticationPromptBuilder : CustomerAuthenticationPromptBuilder
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Sets the View Controller from which the Pin Authentication Prompt will be presented
/// \param presentingViewController the View Controller from which the Pin Authentication Prompt will be presented
///
///
/// returns:
/// the <code>PinCustomerAuthenticationPromptBuilder</code>
- (PinCustomerAuthenticationPromptBuilder * _Nonnull)setPresentingViewController:(UIViewController * _Nonnull)presentingViewController;
/// Sets the title of the pin authentication prompt.
/// \param title The title to set in the pin authentication prompt
///
///
/// returns:
/// the <code>PinCustomerAuthenticationPromptBuilder</code>
- (PinCustomerAuthenticationPromptBuilder * _Nonnull)setTitle:(NSString * _Nullable)title;
/// Sets the subtitle of the pin authentication prompt.
/// \param subtitle The subtitle to set in the pin authentication prompt
///
///
/// returns:
/// the <code>PinCustomerAuthenticationPromptBuilder</code>
- (PinCustomerAuthenticationPromptBuilder * _Nonnull)setSubtitle:(NSString * _Nullable)subtitle;
/// Sets if pin checking by the prompt must be disabled or not
/// Disabling it can be useful for authentications that are checked anyway on backend side
/// \param pinCheckDisabled Whether the prompt must check Pin or not
///
///
/// returns:
/// the <code>PinCustomerAuthenticationPromptBuilder</code>
- (PinCustomerAuthenticationPromptBuilder * _Nonnull)setPinCheckDisabled:(BOOL)pinCheckDisabled;
/// Sets an <code>UIImage</code> instance for the “close” button - The image will be colorized with “primary” color - size : 36x36
/// \param closeImage the close image to set in the pin authentication prompt
///
///
/// returns:
/// the <code>PinCustomerAuthenticationPromptBuilder</code>
- (PinCustomerAuthenticationPromptBuilder * _Nonnull)setCloseImage:(UIImage * _Nullable)closeImage;
/// Sets an <code>UIImage</code> instance for the “delete last number” button - The image will be colorized with “primary” color - size : 44x44
/// \param deleteImage the image for the “delete last number” button
///
///
/// returns:
/// the <code>PinCustomerAuthenticationPromptBuilder</code>
- (PinCustomerAuthenticationPromptBuilder * _Nonnull)setDeleteImage:(UIImage * _Nullable)deleteImage;
/// Sets the format text for prompt error (default : “Invalid Pin, remaining attempt(s) : %d”)
/// \param errorTextFormat the format text for prompt error
///
///
/// returns:
/// the <code>PinCustomerAuthenticationPromptBuilder</code>
- (PinCustomerAuthenticationPromptBuilder * _Nonnull)setErrorTextFormat:(NSString * _Nullable)errorTextFormat;
/// Sets the value defining whether the close button is visible or not (default : true)
/// \param showCancel the value defining whether the close button is visible or not
///
///
/// returns:
/// the <code>PinCustomerAuthenticationPromptBuilder</code>
- (PinCustomerAuthenticationPromptBuilder * _Nonnull)setShowCancel:(BOOL)showCancel;
/// Sets the PIN length (default : 5)
/// \param pinSize the PIN length
///
///
/// returns:
/// the <code>PinCustomerAuthenticationPromptBuilder</code>
- (PinCustomerAuthenticationPromptBuilder * _Nonnull)setPinSize:(NSInteger)pinSize;
/// Sets the <code>UIColor</code>of the view background (default : “#404040”)
/// \param backgroundColor the <code>UIColor</code>of the view background
///
///
/// returns:
/// the <code>PinCustomerAuthenticationPromptBuilder</code>
- (PinCustomerAuthenticationPromptBuilder * _Nonnull)setBackgroundColor:(UIColor * _Nullable)backgroundColor;
/// Sets the <code>UIColor</code>of the “primary” color (texts, buttons, bullets, keyboard)  (default : “#FFFFFF”)
/// \param primaryColor the <code>UIColor</code>of the “primary” color (texts, buttons, bullets, keyboard)
///
///
/// returns:
/// the <code>PinCustomerAuthenticationPromptBuilder</code>
- (PinCustomerAuthenticationPromptBuilder * _Nonnull)setPrimaryColor:(UIColor * _Nullable)primaryColor;
/// Sets the <code>UIColor</code>of the “secondary” color (keyboard buttons background)  (default : “#FFFFFF”)
/// \param secondaryColor the <code>UIColor</code>of the “secondary” color (keyboard buttons background)
///
///
/// returns:
/// the <code>PinCustomerAuthenticationPromptBuilder</code>
- (PinCustomerAuthenticationPromptBuilder * _Nonnull)setSecondaryColor:(UIColor * _Nullable)secondaryColor;
/// Sets the value defining whether the keyboard numbers are randomized or with standard placement (default : true)
/// Standard placement is : 3 lines with 3 buttons per line - start on top left with “1” , left to right arrangement +  a last line with centered button “0”.
/// \param randomizeKeyboard the value defining whether the keyboard numbers are randomized or with standard placement
///
///
/// returns:
/// the <code>PinCustomerAuthenticationPromptBuilder</code>
- (PinCustomerAuthenticationPromptBuilder * _Nonnull)setRandomizeKeyboard:(BOOL)randomizeKeyboard;
- (PinCustomerAuthenticationPrompt * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
@end

/// A Product represents a service that can be offered by Antelop SDK to the mobile application it is embedded into.
typedef SWIFT_ENUM(NSInteger, Product, open) {
/// Refers to the Strong Customer Authentication service.
/// This service enables the mobile application to perform Strong Customer Authentication.
  ProductSca = 0,
/// Refers to the one digital card product.
  ProductDigitalCard = 1,
};


/// Class to handle an authentication request from back-end
SWIFT_CLASS("_TtC10AntelopSDK25PushAuthenticationRequest")
@interface PushAuthenticationRequest : NSObject
/// Cancel the process by running online command
- (void)cancel;
/// Cancel the process by running online command
- (void)cancel:(void (^ _Nonnull)(void))completion;
/// Return unique identifier of SCA Request
- (NSString * _Nonnull)getId SWIFT_WARN_UNUSED_RESULT;
/// Return the issuer data to be signed in the SCA Request as Base64
- (NSString * _Nonnull)getIssuerData SWIFT_WARN_UNUSED_RESULT;
/// Return the expiry date of the SCA Request
- (uint64_t)getExpiryTimestamp SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface PushAuthenticationRequest (SWIFT_EXTENSION(AntelopSDK))
- (NSString * _Nonnull)getAuthenticationPatternName SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isOnline SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getMessage SWIFT_WARN_UNUSED_RESULT;
@end


/// The data of a SCA Request notification
SWIFT_CLASS("_TtC10AntelopSDK29PushAuthenticationRequestInfo")
@interface PushAuthenticationRequestInfo : NSObject
/// The unique identifier of the authentication request
@property (nonatomic, readonly, copy) NSString * _Nonnull requestId;
/// The desired authentication pattern name from the request
@property (nonatomic, readonly, copy) NSString * _Nonnull authenticationPattern;
/// The expiration date as timestamp format
@property (nonatomic, readonly) double expiryDate;
/// The data to be signed in the authentication request, as Base64
@property (nonatomic, readonly, copy) NSString * _Nonnull data;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol PushAuthenticationRequestListenerProtocol;

/// Class to register an implementation of <code>PushAuthenticationRequestListenerProtocol</code>
SWIFT_CLASS("_TtC10AntelopSDK33PushAuthenticationRequestListener")
@interface PushAuthenticationRequestListener : NSObject
/// Singleton pattern. you should use this shared object and never try to init another one
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PushAuthenticationRequestListener * _Nonnull shared;)
+ (PushAuthenticationRequestListener * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Method to register an implementation of <code>PushAuthenticationRequestListenerProtocol</code>
/// \param observer instance of <code>PushAuthenticationRequestListenerProtocol</code>
///
///
/// returns:
/// an UUID that represents the registration of your protocol implementation
- (NSString * _Nonnull)registerWithObserver:(id <PushAuthenticationRequestListenerProtocol> _Nonnull)observer;
/// Method to remove a PushAuthenticationRequestListenerProtocol previously registered
/// \param identifier the UUID given by a previous call to <code>PushAuthenticationRequestListener.register</code>  method
///
///
/// returns:
/// a Bool value of result process
- (BOOL)removeWithIdentifier:(NSString * _Nonnull)identifier;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Protocol to obtain a callback when an authenticate request is received
SWIFT_PROTOCOL("_TtP10AntelopSDK41PushAuthenticationRequestListenerProtocol_")
@protocol PushAuthenticationRequestListenerProtocol
- (void)onRequestReceivedWithRequest:(PushAuthenticationRequest * _Nonnull)request;
- (void)onRequestCancelledWithRequestId:(NSString * _Nonnull)requestId reason:(enum CancellationReason)reason;
@end

typedef SWIFT_ENUM(NSInteger, SignatureType, open) {
  SignatureTypeLocalJws = 0,
};

typedef SWIFT_ENUM(NSInteger, TokenRequestorType, open) {
  TokenRequestorTypeWallet = 0,
  TokenRequestorTypeEcommerce = 1,
};

typedef SWIFT_ENUM(NSInteger, TokenServiceProvider, open) {
  TokenServiceProviderMdes = 0,
  TokenServiceProviderVts = 1,
};

typedef SWIFT_ENUM(NSInteger, TokenStatus, open) {
  TokenStatusInactive = 0,
  TokenStatusActive = 1,
  TokenStatusSuspended = 2,
};

typedef SWIFT_ENUM(NSInteger, TokenType, open) {
  TokenTypeSecureElement = 0,
  TokenTypeHce = 1,
  TokenTypeCardOnFile = 2,
  TokenTypeQrCode = 3,
  TokenTypeOther = 4,
};








typedef SWIFT_ENUM(NSInteger, VirtualCardNumberStatus, open) {
  VirtualCardNumberStatusActive = 0,
  VirtualCardNumberStatusSuspended = 1,
  VirtualCardNumberStatusExpired = 2,
};


/// This struct gives access to the information pertaining to the cards, settings and counters.
/// This class also provides card management functions.
/// To obtain an instance of this class, one must connect to the <code>WalletManager</code> through <code>WalletManager.connect()</code>
/// This ensures that the activation of the wallet is made and that the wallet is up to date.
/// The wallet is obtained upon connection success in the <code>WalletManagerDelegate.walletManager(_:,didSucceedConnectWithWallet:)</code> callback.
/// The wallet may be updated anytime.
/// It is hence good practice to avoid keeping a hard copy of this class and always working with the reference passed in
/// the <code>WalletManagerDelegate.walletManager(_:,didSucceedConnectWithWallet:)</code> callback.
/// seealso:
/// <code>WalletManagerProtocol.walletManager(_:,didSucceedConnectWithWallet:)</code>
SWIFT_CLASS("_TtC10AntelopSDK6Wallet")
@interface Wallet : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface Wallet (SWIFT_EXTENSION(AntelopSDK))
/// The objective-C version of enrollDigitalCard(enrollmentData:, completion:)
/// \param enrollmentData The string gathering the parameters of the digital card to be enrolled
///
/// \param success The success callback
///
/// \param error The error callback
///
- (BOOL)enrollDigitalCardWithEnrollmentData:(NSString * _Nonnull)enrollmentData error:(NSError * _Nullable * _Nullable)error success:(void (^ _Nonnull)(void))success error:(void (^ _Nonnull)(NSError * _Nonnull))error;
@end


@interface Wallet (SWIFT_EXTENSION(AntelopSDK))
///
/// returns:
/// issuer wallet id
- (NSString * _Nullable)getIssuerWalletId SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// issuer client id
- (NSString * _Nullable)getIssuerClientId SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// issuer data
- (NSString * _Nullable)getIssuerData SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// wallet certificate
- (NSData * _Nullable)getCertificate SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// secure display certificate
- (NSData * _Nullable)getSecureDisplayCertificate SWIFT_WARN_UNUSED_RESULT;
@end


/// This class manages the access to Antelop wallet services except provisioning which is handled by <code>WalletProvisioning</code> class.
/// When connecting to the <code>WalletManager</code>, Antelop SDK ensures that everything is properly activated.
/// If so, a <code>Wallet</code> object is returned in the success delegate method which allows to
/// have access to all the parameters of the wallet (cards, settings…).
/// The connection should be made through <code>WalletManager.connect()</code>.
/// A successful connection is mandatory before calling the other <code>WalletManager</code> entry points.
SWIFT_CLASS("_TtC10AntelopSDK13WalletManager")
@interface WalletManager : NSObject
/// Attempts to connect to Antelop wallet services.
/// The <code>connect</code> result is returned through the <code>WalletManagerProtocol</code>:
/// <ul>
///   <li>
///     <code>WalletManagerProtocol.onConnectionError(_:)</code> is called in case of connect failure.
///   </li>
///   <li>
///     <code>WalletManagerProtocol.onCredentialsRequired(_:)</code> is called in case <code>CustomerAuthenticationPasscode</code> are missing or need to be updated.
///   </li>
///   <li>
///     <code>WalletManagerProtocol.onProvisioningRequired()</code> is called in case Wallet is not present on the device, and need to be initialized before
///   </li>
///   <li>
///     <code>WalletManagerProtocol.onConnectionSuccess(_:)</code> is called in case of connect success.
///   </li>
/// </ul>
/// Connection to Antelop wallet service must be done first through <code>WalletManager.connect()</code> method.
/// Connecting through WalletManager.connect(currentPasscode:)<code>must only be done if the previous connection attempt has triggered the delegate function</code>WalletManagerProtocol.onCredentialsRequired(_:)<code>with the reason</code>notSet`
- (void)connect;
/// Attempts to connect to Antelop wallet services.
/// The <code>connect</code> result is returned through the <code>WalletManagerProtocol</code>:
/// <ul>
///   <li>
///     <code>WalletManagerProtocol.onConnectionError(_:)</code> is called in case of connect failure.
///   </li>
///   <li>
///     <code>WalletManagerProtocol.onCredentialsRequired(_:)</code> is called in case <code>CustomerAuthenticationPasscode</code> are missing or need to be updated.
///   </li>
///   <li>
///     <code>WalletManagerProtocol.onProvisioningRequired()</code> is called in case Wallet is not present on the device, and need to be initialized before
///   </li>
///   <li>
///     <code>WalletManagerProtocol.onConnectionSuccess(_:)</code> is called in case of connect success.
///   </li>
/// </ul>
/// Connection to Antelop wallet service must be done first through <code>WalletManager.connect()</code> method.
/// Connecting through WalletManager.connect(currentPasscode:)<code>must only be done if the previous connection attempt has triggered the delegate function</code>WalletManagerProtocol.onCredentialsRequired(_:)<code>with the reason</code>notSet`
- (BOOL)connectWithCurrentCredentials:(Credentials * _Nullable)currentCredentials newCredentials:(Credentials * _Nullable)newCredentials error:(NSError * _Nullable * _Nullable)error;
/// Attemps to check customer current <code>CustomerCredentials</code> with input
/// This method can be called only once successfully connected to Antelop wallet services.
/// This method returns immediately and triggers asynchronously a credentials change.
/// Upon success, <code>WalletManagerProtocol.onAsyncRequestSuccess(_:)</code> is called
/// Upon failure, <code>WalletManagerProtocol.onAsyncRequestError(_:)</code> is called with the encoutered error as <code>AntelopError</code>
/// \param currentCredentials Customer current <code>Credentials</code> to verify.
///
///
/// throws:
/// <code>WalletValidationError</code> if <code>changeCredentials</code> function is called while <code>WalletManager</code> is not connected
- (BOOL)checkCredentialsWithCurrentCredentials:(Credentials * _Nonnull)currentCredentials error:(NSError * _Nullable * _Nullable)error;
/// Attempts to change customer current <code>CustomerCredentials</code> with new ones.
/// This method can be called only once successfully connected to Antelop wallet services.
/// This method returns immediately and triggers asynchronously a credentials change.
/// Upon success, <code>WalletManagerProtocol.onAsyncRequestSuccess(_:)</code> is called.
/// Upon failure, <code>WalletManagerProtocol.onAsyncRequestError(_:)</code> is called with the encoutered error as <code>AntelopError</code>
/// \param currentCredentials Customer current <code>Credentials</code> to replace.
///
/// \param newCredentials     Customer new <code>Credentials</code> which will replace the old ones.
///
///
/// throws:
/// <code>WalletValidationError</code> if <code>changeCredentials</code> function is called while <code>WalletManager</code> is not connected
- (BOOL)changeCredentialsWithCurrentCredentials:(Credentials * _Nonnull)currentCredentials newCredentials:(Credentials * _Nonnull)newCredentials error:(NSError * _Nullable * _Nullable)error;
/// Attempts to logout from the Antelop <code>Wallet</code>.
/// A logout disconnects from Antelop Wallet services and any subsequent connections will require customer authentication.
/// Once logged out, transactions are forbidden until a new connection succeeds.
/// This method can be called only once successfully connected to Antelop wallet Services.
/// This method returns immediately and triggers asynchronously a logout.
/// Upon success, <code>WalletManagerProtocol.onAsyncRequestSuccess(_:)</code> is called.
/// Upon failure, <code>WalletManagerProtocol.onAsyncRequestError(_:)</code> is called with the encoutered error as <code>AntelopError</code>
///
/// throws:
/// <code>WalletValidationError</code> when logout function is called while <code>WalletManager</code> is not connected.
- (BOOL)logoutAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Attempts to lock the ‘Wallet’.
/// The reason why the wallet is locked must be specified.
/// The provided reason (‘LockReason’) can only be equal to ‘fraudulentUseSuspected’ or ‘stopService’.
/// Other locking reasons can only be invoked on issuer side.
/// This method can be called only once successfully connected to Antelop wallet Services.
/// This method returns immediately and triggers asynchronously a lock.
/// Upon success, <code>WalletManagerProtocol.onAsyncRequestSuccess(_:)</code> is called.
/// Upon failure, <code>WalletManagerProtocol.onAsyncRequestError(_:)</code> is called with the encoutered error as <code>AntelopError</code>
///
/// throws:
/// <code>WalletValidationError</code> when logout function is called while <code>WalletManager</code> is not connected.
- (BOOL)lockWithReason:(enum LockReason)reason error:(NSError * _Nullable * _Nullable)error;
/// Attempts to delete the Antelop <code>Wallet</code>.
/// This method returns immediately and triggers asynchronously a delete.
/// Upon success, <code>WalletManagerProtocol.onAsyncRequestSuccess(_:)</code> is called.
- (void)delete;
/// Disconnects from the Antelop wallet services.
/// The delegate <code>InnerWalletManagerDelegate</code> provided in the <code>WalletManager.init</code> will not be called anymore.
/// You should always disconnect properly from the Antelop wallet services if a previous connection took place.
- (void)disconnect;
/// Attemps to activate an authentication method given as parameter
/// <ul>
///   <li>
///     The type of authentication method must be given
///   </li>
///   <li>
///     If wallet is PinPasscode protected, a credentials must be passed in addition
///   </li>
///   <li>
///     This method can be called only once successfully connected to Antelop wallet Services.
///   </li>
///   <li>
///   </li>
///   <li>
///     This method returns immediatlely and triggers asynchronously result
///   </li>
///   <li>
///     Upon success, <code>WalletManagerProtocol.onAsyncRequestSuccess(_:)</code> is called
///   </li>
///   <li>
///     Upon failure, <code>WalletManagerProtocol.onAsyncRequestError(_:)</code> is called with the encoutered error as <code>AntelopError</code>
///   </li>
///   <li>
///     <ul>
///       <li>
///         Throws <code>WalletValidationError</code> in case you try to do something not permitted by SDK, like activate an already active method, or not present
///       </li>
///     </ul>
///   </li>
/// </ul>
- (BOOL)activateAuthenticationMethodWithType:(enum CustomerAuthenticationMethodType)type credentials:(Credentials * _Nullable)credentials error:(NSError * _Nullable * _Nullable)error;
/// Attemps to deactivate an authentication method given as parameter
/// <ul>
///   <li>
///     The type of authentication method must be given
///   </li>
///   <li>
///     If wallet is PinPasscode protected, a credentials must be passed in addition
///   </li>
///   <li>
///     This method can be called only once successfully connected to Antelop wallet Services.
///   </li>
///   <li>
///   </li>
///   <li>
///     This method returns immediatlely and triggers asynchronously result
///   </li>
///   <li>
///     Upon success, <code>WalletManagerProtocol.onAsyncRequestSuccess(_:)</code> is called
///   </li>
///   <li>
///     Upon failure, <code>WalletManagerProtocol.onAsyncRequestError(_:)</code> is called with the encoutered error as <code>AntelopError</code>
///   </li>
///   <li>
///     <ul>
///       <li>
///         Throws <code>WalletValidationError</code> in case you try to do something not permitted by SDK, like deactivate a non-active method, or not present
///       </li>
///     </ul>
///   </li>
/// </ul>
- (BOOL)deactivateAuthenticationMethodWithType:(enum CustomerAuthenticationMethodType)type credentials:(Credentials * _Nullable)credentials error:(NSError * _Nullable * _Nullable)error;
- (BOOL)synchronizeAuthenticationMethodWithType:(enum CustomerAuthenticationMethodType)type credentials:(Credentials * _Nullable)credentials error:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Enum for callbacks <code>WalletManagerProtocol</code>
/// <code>onAsyncRequestError</code>
/// <code>onAsyncRequestSuccess</code>
typedef SWIFT_ENUM(NSInteger, WalletManagerAsyncRequestEnum, open) {
  WalletManagerAsyncRequestEnumLogout = 0,
  WalletManagerAsyncRequestEnumChangeCredentials = 1,
  WalletManagerAsyncRequestEnumCheckCredentials = 2,
  WalletManagerAsyncRequestEnumActivateAuthMethod = 3,
  WalletManagerAsyncRequestEnumDeactivateAuthMethod = 4,
  WalletManagerAsyncRequestEnumLock = 5,
  WalletManagerAsyncRequestEnumDelete = 6,
  WalletManagerAsyncRequestEnumSynchronizeAuthMethod = 7,
};


/// This class handles observers (<code>WalletNotificationsObserver</code>) subscribing and unsubscribing to the Wallet Notifications.
SWIFT_CLASS("_TtC10AntelopSDK19WalletNotifications")
@interface WalletNotifications : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class allows the payment app to perform the provisioning of the wallet.
SWIFT_CLASS("_TtC10AntelopSDK18WalletProvisioning")
@interface WalletProvisioning : NSObject
/// Checks that the Wallet Provisioning requirement is met.
/// Those requirements consist on having a remote notifications token and the background refresh available.
/// The <code>initialize</code> result is returned through the <code>WalletProvisioningProtocol</code>:
/// <ul>
///   <li>
///     <code>WalletProvisioningProtocol.onInitializationSuccess()</code> is called if background refresh is available and after apnsToken has been forwarded to the sdk
///   </li>
///   <li>
///     <code>WalletProvisioningProtocol.onInitializationError(error: AntelopError)</code> is called with <code>AntelopError</code> if background activity is not authorized
///   </li>
/// </ul>
- (void)initialize;
/// Checks if the current running environment (device, os,…) is eligible to run Antelop wallet services or not.
/// The <code>checkEligibility</code> result is returned through the <code>WalletProvisioningProtocol</code>:
/// <ul>
///   <li>
///     <code>WalletProvisioningProtocol.onDeviceEligible(fingerprintAllowed: Bool, eligibleProducts: [Product])</code> is called if the device is eligible.
///   </li>
///   <li>
///     <code>WalletProvisioningProtocol.onDeviceNotEligible(reason: EligibilityDenialReason?, denialReference: String?)</code> is called if the device is not eligible.
///   </li>
///   <li>
///     <code>WalletProvisioningProtocol.onCheckEligibilityError(error: AntelopError)</code> is called if an error occurred during the check.
///   </li>
/// </ul>
/// \param forbidJailBrokenDevices Defines if rooted devices can be eligible to the Antelop wallet services or not.
/// If its value is set to true, being rooted is a sufficient condition for a device not to be eligible
/// to any of antelop wallet service, otherwise it is not a sufficient condition.
///
- (void)checkEligibilityWithForbidJailBrokenDevices:(BOOL)forbidJailBrokenDevices;
/// Launches the Antelop provisioning process through automatic wallet creation mode.
/// This mode first triggers a wallet creation on server side based on the provided wallet creation parameters and once a wallet is created,
/// it is provisioned on the device.
/// This method must be called once <code>WalletProvisioning</code> object initialization is properly done.
/// <code>WalletProvisioning</code> initialization success is notified through <code>WalletProvisioningProtocol.onInitializationSuccess()</code>.
/// The completion of the provisioning is notified through <code>WalletProvisioningProtocol</code>:
/// seealso:
/// <code>WalletProvisioning.initialize()</code>
/// <ul>
///   <li>
///     <code>WalletProvisioningProtocol.onProvisioningPending()</code> is called after the initialization and before the authentication
///   </li>
///   <li>
///     <code>WalletProvisioningProtocol.onProvisioningSuccess()</code> is called in case of success.
///   </li>
///   <li>
///     <code>WalletProvisioningProtocol.onProvisioningError(error: AntelopError)</code> is called in case of failure.
///   </li>
/// </ul>
/// \param clientId The identifier of the customer associated to the wallet to be created.
/// <code>clientId</code> must contain between 0 and 32 alphanumeric characters.
/// In case a <code>nil</code> value is provided, the default client identifier is used.
///
/// \param walletId The identifier of the wallet to be created.
/// <code>walletId</code> must contain between 0 and 32 alphanumeric characters.
/// In case a <code>nil</code> value is provided, the default wallet identifier is used.
///
/// \param settingsProfileId The identifier of the settings profile used to configure the wallet to be created.
/// <code>settingsProfileId</code> must contain between 0 and 32 alphanumeric characters.
///
/// \param phoneNumber An optional phone number associated to the wallet to be created.
/// <code>phoneNumber</code> must start with a “+” and must contain between 6 and 15 digits (<a href="https://en.wikipedia.org/wiki/E.164">E.164 format</a>).
///
///
/// throws:
/// <code>WalletValidationError</code> if one of the provided parameters has an invalid format.
- (BOOL)launchWithClientId:(NSString * _Nullable)clientId walletId:(NSString * _Nullable)walletId settingsProfileId:(NSString * _Nullable)settingsProfileId phoneNumber:(NSString * _Nullable)phoneNumber error:(NSError * _Nullable * _Nullable)error;
/// Launches wallet provisioning process through activation code mode, with a hex string activation code.
/// The provided activation code must be associated to a wallet already created on the backend platform
/// This method must be called once <code>WalletProvisioning</code> object initialization is properly done.
/// <code>WalletProvisioning</code> initialization success is notified through <code>WalletProvisioningProtocol.onInitializationSuccess()</code>.
/// The completion of the provisioning is notified through <code>WalletProvisioningProtocol</code>:
/// seealso:
/// <code>WalletProvisioning.initialize()</code>
/// <ul>
///   <li>
///     <code>WalletProvisioningProtocol.onProvisioningPending()</code> is called after the initialization and before the authentication
///   </li>
///   <li>
///     <code>WalletProvisioningProtocol.onProvisioningSuccess()</code> is called in case of success.
///   </li>
///   <li>
///     <code>WalletProvisioningProtocol.onProvisioningError(error: AntelopError)</code> is called in case of failure.
///   </li>
/// </ul>
/// \param activationCode Hex representation of the 16-byte long array activation code of a wallet created on the backend platform.
///
/// \param phoneNumber An optional phone number associated to the wallet to be created.
/// <code>phoneNumber</code> must start with a “+” and must contain between 6 and 15 digits (<a href="https://en.wikipedia.org/wiki/E.164">E.164 format</a>).
///
///
/// throws:
/// <code>WalletValidationError</code> if one of the provided parameters have an invalid format.
- (BOOL)launchWithActivationCode:(NSString * _Nonnull)activationCode phoneNumber:(NSString * _Nullable)phoneNumber error:(NSError * _Nullable * _Nullable)error;
/// Launches wallet provisioning process through activation code mode, with a hex string activation identifier and code.
/// The provided activation code must be associated to a wallet already created on the backend platform
/// This method must be called once <code>WalletProvisioning</code> object initialization is properly done.
/// <code>WalletProvisioning</code> initialization success is notified through <code>WalletProvisioningProtocol.onInitializationSuccess()</code>.
/// The completion of the provisioning is notified through <code>WalletProvisioningProtocol</code>:
/// seealso:
/// <code>WalletProvisioning.initialize()</code>
/// <ul>
///   <li>
///     <code>WalletProvisioningProtocol.onProvisioningPending()</code> is called after the initialization and before the authentication
///   </li>
///   <li>
///     <code>WalletProvisioningProtocol.onProvisioningSuccess()</code> is called in case of success.
///   </li>
///   <li>
///     <code>WalletProvisioningProtocol.onProvisioningError(error: AntelopError)</code> is called in case of failure.
///   </li>
/// </ul>
/// \param issuerActivationId The byte array representing the activation identifier of a wallet created on the backend platform. issuerActivationId must contain between 0 and 1024 byte.
///
/// \param activationCode The byte array representing the activation code of a wallet created on the backend platform. issuerActivationId must contain between 0 and 1024 byte.
///
/// \param phoneNumber An optional phone number associated to the wallet to be created.
/// <code>phoneNumber</code> must start with a “+” and must contain between 6 and 15 digits (<a href="https://en.wikipedia.org/wiki/E.164">E.164 format</a>).
///
///
/// throws:
/// <code>WalletValidationError</code> if one of the provided parameters have an invalid format.
- (BOOL)launchWithIssuerActivationId:(NSString * _Nonnull)issuerActivationId activationCode:(NSString * _Nonnull)activationCode phoneNumber:(NSString * _Nullable)phoneNumber error:(NSError * _Nullable * _Nullable)error SWIFT_DEPRECATED_MSG("Use launch(issuerActivationId:, issuerActivationCode:, phoneNumber:) instead");
/// Launches wallet provisioning process through activation code mode, with a hex string activation identifier and code.
/// The provided activation code must be associated to a wallet already created on the backend platform
/// This method must be called once <code>WalletProvisioning</code> object initialization is properly done.
/// <code>WalletProvisioning</code> initialization success is notified through <code>WalletProvisioningProtocol.onInitializationSuccess()</code>.
/// The completion of the provisioning is notified through <code>WalletProvisioningProtocol</code>:
/// seealso:
/// <code>WalletProvisioning.initialize()</code>
/// <ul>
///   <li>
///     <code>WalletProvisioningProtocol.onProvisioningPending()</code> is called after the initialization and before the authentication
///   </li>
///   <li>
///     <code>WalletProvisioningProtocol.onProvisioningSuccess()</code> is called in case of success.
///   </li>
///   <li>
///     <code>WalletProvisioningProtocol.onProvisioningError(error: AntelopError)</code> is called in case of failure.
///   </li>
/// </ul>
/// \param issuerActivationId The byte array representing the activation identifier of a wallet created on the backend platform. issuerActivationId must contain between 0 and 1024 byte.
///
/// \param activationCode The byte array representing the activation code of a wallet created on the backend platform. issuerActivationId must contain between 0 and 1024 byte.
///
/// \param phoneNumber An optional phone number associated to the wallet to be created.
/// <code>phoneNumber</code> must start with a “+” and must contain between 6 and 15 digits (<a href="https://en.wikipedia.org/wiki/E.164">E.164 format</a>).
///
///
/// throws:
/// <code>WalletValidationError</code> if one of the provided parameters have an invalid format.
- (BOOL)launchWithIssuerActivationId:(NSString * _Nonnull)issuerActivationId issuerActivationCode:(NSString * _Nonnull)issuerActivationCode phoneNumber:(NSString * _Nullable)phoneNumber error:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__ARM_ARCH_7S__) && __ARM_ARCH_7S__
// Generated by Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
#ifndef ANTELOPSDK_SWIFT_H
#define ANTELOPSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AntelopSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class UIApplication;
@class NSNumber;
@class NSData;

/// <ul>
///   <li>
///     This class is the main entry point of the FrameWork.
///   </li>
///   <li>
///     You have to link your AppDelegate with methods of this class because you may need some triggers, but we need also theses triggers.
///   </li>
///   <li>
///     We expose functions that they have the same signature of AppDelegate in order to be clear on how-to use them
///   </li>
///   <li>
///     Be sure you never try to create your own instance and use <code>AntelopAppDelegate.shared</code> instead
///   </li>
/// </ul>
SWIFT_CLASS("_TtC10AntelopSDK18AntelopAppDelegate")
@interface AntelopAppDelegate : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// <ul>
///   <li>
///     Public singleton instance - Be sure you always use this instance by using the following pattern
///   </li>
///   <li>
///     <code>AntelopAppDelegate.shared</code>
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AntelopAppDelegate * _Nonnull shared;)
+ (AntelopAppDelegate * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// This method must be called on <code>didFinishLaunchingWithOptions</code> function from AppDelegate
/// This method is called when app is launched for the first time in app lifecycle
/// \param application the UIApplication param from the initial method
///
/// \param launchOptions The <code>[UIApplication.LaunchOptionsKey: Any]?</code> as they defined from initial method
///
- (BOOL)application:(UIApplication * _Nonnull)application didFinishLaunchingWithOptions:(NSDictionary<UIApplicationLaunchOptionsKey, id> * _Nullable)launchOptions;
- (void)willResignActiveNotification:(UIApplication * _Nonnull)application;
/// This method must be called on <code>applicationDidBecomeActive</code> function form AppDelegate
/// This method is called when application is now in foreground mode
/// \param application the <code>UIApplication</code> param from the initial method
///
- (void)applicationDidBecomeActive:(UIApplication * _Nonnull)application;
/// This method must be called on <code>applicationWillTerminate</code> function form AppDelegate
/// This method is called when application is about to terminate
/// \param application the <code>UIApplication</code> param from the initial method
///
- (void)applicationWillTerminate:(UIApplication * _Nonnull)application;
/// This method must be called on <code>applicationDidEnterBackground</code> function form AppDelegate
/// This method is called when application is about to enter in background
/// \param application the <code>UIApplication</code> param from the initial method
///
- (void)applicationDidEnterBackground:(UIApplication * _Nonnull)application;
/// This method must be called on <code>didRegisterForRemoteNotificationsWithDeviceToken</code> function from AppDelegate
/// This method is called by AppDelegate when you successfuly register to APNS
/// \param application the <code>UIApplication</code> param from the initial method
///
/// \param deviceToken the “deviceToken” (<code>Data</code>) param from the initial method
///
- (void)application:(UIApplication * _Nonnull)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData * _Nonnull)deviceToken;
/// This method must be called on <code>didReceiveRemoteNotification</code> function from AppDelegate
/// This method is called by AppDelegate when a remote notification is received by device
/// \param application the <code>UIApplication</code> param from the initial method
///
/// \param userInfo the <code>[AnyHashable: Any]</code> param from the initial method
///
/// \param completionHandler the <code>(UIBackgroundFetchResult) -> Void</code> param from the initial method
///
- (void)application:(UIApplication * _Nonnull)application didReceiveRemoteNotification:(NSDictionary * _Nonnull)userInfo fetchCompletionHandler:(void (^ _Nonnull)(UIBackgroundFetchResult))completionHandler SWIFT_DEPRECATED_MSG("Use didReceiveRemoteNotification(_ userInfo: [AnyHashable: Any], fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void) instead.");
/// This method must be called from the <code>didReceiveRemoteNotification</code> function of the App Delegate
/// when a remote notification is received by the device.
/// This method returns a Bool indicating whether notification has been handled by the Antelop SDK or not.
/// If the method returns <em>true</em>, the SDK handled the notification, it will take the responsability of invoking <code>completionHandler</code>,
/// and app must not invoke it itself.
/// However, if the method returns <em>false</em>, the app integrating the SDK must proceed the notification and is responsible for calling the <code>completionHandler</code>.
/// \param userInfo the <code>[AnyHashable: Any]</code> param from the initial method
///
/// \param completionHandler the <code>(UIBackgroundFetchResult) -> Void</code> param from the initial method
///
///
/// returns:
/// A <em>Bool</em> indicating whether notification has been handled by the Antelop SDK or not.
- (BOOL)didReceiveRemoteNotification:(NSDictionary * _Nonnull)userInfo fetchCompletionHandler:(void (^ _Nonnull)(UIBackgroundFetchResult))completionHandler SWIFT_WARN_UNUSED_RESULT;
/// This method must be called on <code>performFetchWithCompletionHandler</code> function from AppDelegate
/// This method is called by AppDelegate on background refresh
/// \param application the <code>UIApplication</code> param from the initial method
///
/// \param completionHandler the <code>(UIBackgroundFetchResult) -> Void)</code> param the inital method
///
- (void)application:(UIApplication * _Nonnull)application performFetchWithCompletionHandler:(void (^ _Nonnull)(UIBackgroundFetchResult))completionHandler;
@end


/// This error enum list all the possible AntelopSDK errors.
typedef SWIFT_ENUM(NSInteger, AntelopError, open) {
/// Generic error reported when an internal technical error occurs.
  AntelopErrorInternal = 0,
/// The background refresh is not available
  AntelopErrorBackgroundRefreshNotAvailable = 1,
/// The user don t accept push notification service
  AntelopErrorPushNotificationNotAvailable = 2,
/// The SDK does not have the APNs token
  AntelopErrorMissingApnsToken = 3,
/// The <code>Antelop.plist</code> file could not be found in the main Bundle.
  AntelopErrorCouldNotFindAntelopPlistFile = 4,
/// ApplicationId Int (<code>fr.antelop.application_id</code>) is missing in <code>Antelop.plist</code>.
  AntelopErrorMissingApplicationIdInAntelopPlistFile = 5,
/// The operation has failed because network is not available.
  AntelopErrorNetworkNotAvailable = 6,
/// The operation has failed because of a network issue.
  AntelopErrorNetworkIssue = 7,
/// Generic error code reported when Antelop wallet provisioning fails because none of the <code>Product</code> items offered is allowed for the application.
  AntelopErrorNoProductAllowed = 8,
/// Generic error code reported when the activation of the wallet is required
  AntelopErrorActivationRequired = 9,
/// Generic error reported if wallet status is not “connected - ready to use”
  AntelopErrorWalletNotActivated = 10,
/// Generic error code reported when the wallet is deleted.
  AntelopErrorWalletDeleted = 11,
/// Generic error code reported when the wallet is locked thus nothing can be done before an unlock.
  AntelopErrorWalletLocked = 12,
/// Generic error code reported when a management operation fails because the customer has provided wrong credentials when authenticating.
  AntelopErrorInvalidCredentials = 13,
/// Local Authentication: the user cancelled
  AntelopErrorLocalAuthenticationCancelled = 14,
/// Local Authentication: the user failed to provide valid credentials.
  AntelopErrorLocalAuthenticationUserNotRecognized = 15,
/// Local Authentication: the user has selected the fallback authentication mechanism.
  AntelopErrorLocalAuthenticationUserFallback = 16,
/// Local Authentication: the device does not support biometric authentication.
  AntelopErrorLocalAuthenticationBiometryNotAvailable = 17,
/// Local Authentication: the user has not enrolled in biometric authentiation.
  AntelopErrorLocalAuthenticationBiometryNotEnrolled = 18,
/// Local Authentication: the user has been locked out of biometric authentication, due to failing authentication too many times.
  AntelopErrorLocalAuthenticationBiometryLockout = 19,
/// Local Authentication: the user has been locked out of PIN authentication, due to failing authentication too many times.
  AntelopErrorLocalAuthenticationPinLockout = 20,
/// Requested authentication pattern is unknown (not recongnized).
  AntelopErrorAuthenticationPatternUnknown = 21,
/// Requested authentication pattern has been cancelled.
  AntelopErrorAuthenticationPatternCancelled = 22,
/// Requested authentication pattern failed
  AntelopErrorAuthenticationPatternFailed = 23,
/// Requested authentication method is unknown (not recognized)
  AntelopErrorAuthenticationMethodUnknown = 24,
/// Requested authentication method has been cancelled.
  AntelopErrorAuthenticationMethodCancelled = 25,
/// Requested authentication method fallback mechanism.
  AntelopErrorAuthenticationMethodFallback = 26,
/// Requested authentication method has failed.
  AntelopErrorAuthenticationMethodFailed = 27,
/// Local authentication pattern failed
  AntelopErrorAuthenticationFailed = 28,
/// Strong customer authentication process error code reported when an authentication is refused because it has been cancelled from backend
  AntelopErrorScaCancelledFromBackend = 29,
/// Strong customer authentication process error code reported when an authentication is refused because the its has already been performed
  AntelopErrorScaDuplicated = 30,
/// Strong customer authentication process error code reported when an authentication is refused because it took too much time to be run
  AntelopErrorScaTimeout = 31,
/// Local authentication pattern internal error
  AntelopErrorAuthenticationInternalError = 32,
/// Local authentication not possible due to bad status or bad method usage :
/// ex : CLOUD_PIN is the only one method for a step in a pattern
  AntelopErrorCustomerAuthenticationImpossible = 33,
/// Local authentication is currently running - cannot sign another data
  AntelopErrorAuthenticationOnGoingOperation = 34,
/// Management error code reported when a one-time activation code submitted by customer is expired
  AntelopErrorExpiredActivationCode = 35,
/// Management error code reported when a one-time activation code submitted by customer is invalid
  AntelopErrorInvalidActivationCode = 36,
/// Management error code reported when a one-time activation code submitted by customer is locked
  AntelopErrorLockedActivationCode = 37,
/// Management error code reported when a one-time activation code submitted has already been used
  AntelopErrorAlreadyUsedActivationCode = 38,
/// Digital card already pushed
  AntelopErrorDigitalCardAlreadyPushed = 39,
/// The operation has been cancelled by the user
  AntelopErrorUserCancelled = 40,
/// The operation has failed because the targeted Card is locked
  AntelopErrorCardLocked = 41,
/// The operation has failed because the targeted Card is deleted
  AntelopErrorCardDeleted = 42,
/// Management error code reported when an online operation is refused from backend server.
  AntelopErrorOperationRefused = 43,
/// The Issuer Id is not defined in the plist file or in the SDK.
  AntelopErrorIssuerIdNotDefined = 44,
/// The operation has failed because the integrity of the application cannot be verified.
  AntelopErrorAppIntegrityCheckFailed = 45,
};
static NSString * _Nonnull const AntelopErrorDomain = @"AntelopSDK.AntelopError";

@class NSString;

SWIFT_CLASS("_TtC10AntelopSDK18AntelopErrorHelper")
@interface AntelopErrorHelper : NSObject
/// Returns a string representation of an AntelopError.
/// Only for an ObjC project, otherwise prefere the AntelopError#getCode() function.
/// \param error AntelopError
///
///
/// returns:
/// a string representation of an AntelopError.
+ (NSString * _Nonnull)getCodeWithError:(enum AntelopError)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ApplePayTokenLocation, open) {
  ApplePayTokenLocationCurrentDevice = 0,
  ApplePayTokenLocationRemotePairedDevice = 1,
};

/// Enum for callbacks <code>WalletManagerProtocol</code>
/// <code>onAsyncRequestError</code>
/// <code>onAsyncRequestSuccess</code>
typedef SWIFT_ENUM(NSInteger, AsyncRequestType, open) {
  AsyncRequestTypeLogout = 0,
  AsyncRequestTypeLock = 1,
  AsyncRequestTypeDelete = 2,
  AsyncRequestTypeCheckCredentials = 3,
  AsyncRequestTypeChangeCredentials = 4,
  AsyncRequestTypeActivateAuthenticationMethod = 5,
  AsyncRequestTypeDeactivateAuthenticationMethod = 6,
  AsyncRequestTypeSynchronizeAuthenticationMethod = 7,
};

/// Object
typedef SWIFT_ENUM(NSInteger, CancellationReason, open) {
  CancellationReasonCancelledBySender = 0,
  CancellationReasonOtherResponded = 1,
};


SWIFT_CLASS("_TtC10AntelopSDK18CancellationSignal")
@interface CancellationSignal : NSObject
- (void)cancel;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// This enum lists all the possible status of an Card. The status of a Card indicates if it can be used to perform transactions.
/// The following CardStatus items are defined:
/// Active when the Card is active.
/// Locked when the Card is locked.
/// ActivationRequired when the Card is not yet active because it must be explicitly activated by customer first.
/// Activating when the Card is activating.
/// See Also:
/// EmvApplication
typedef SWIFT_ENUM(NSInteger, CardStatus, open) {
/// The Card is activating.
  CardStatusActivating = 0,
/// The Card is not usable, because its activation went wrong
  CardStatusActivationRefused = 1,
/// The Card is not yet active because it must be explicitly activated by customer first.
  CardStatusActivationRequired = 2,
/// The Card is active.
  CardStatusActive = 3,
/// The Card is locked.
  CardStatusLocked = 4,
/// The Card is not usable, because the terms and conditions validation is required
  CardStatusTermsAndConditionsValidationRequired = 5,
};


/// :nodoc:
SWIFT_CLASS("_TtC10AntelopSDK11Credentials")
@interface Credentials : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


enum SignatureType : NSInteger;

/// Class to handle an offline JWS with
/// <ul>
///   <li>
///     a default mode : Framework will prompt internal views and handle Credentials
///   </li>
///   <li>
///     a custom mode : Framework helps you with events to create an authenticate process
///   </li>
/// </ul>
SWIFT_CLASS("_TtC10AntelopSDK30CustomerAuthenticatedSignature")
@interface CustomerAuthenticatedSignature : NSObject
/// Create an instance to generate a JWT Token
/// \param patternName the name of the pattern, should be existing in back-office, and device can execute this pattern
///
/// \param signatureInputData The content to be signed, as String
///
/// \param message The input message which be presented through prompt views (in default mode)
///
- (nonnull instancetype)initWithPatternName:(NSString * _Nonnull)patternName signatureInputData:(NSString * _Nonnull)signatureInputData signatureType:(enum SignatureType)signatureType message:(NSString * _Nullable)message OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use init(String:Data:SignatureType:String?) instead");
/// Create an instance to generate a JWT Token
/// \param patternName the name of the pattern, should be existing in back-office, and device can execute this pattern
///
/// \param signatureInputData The content to be signed, as Data
///
/// \param message The input message which be presented through prompt views (in default mode)
///
- (nonnull instancetype)patternName:(NSString * _Nonnull)patternName signatureInputData:(NSData * _Nonnull)signatureInputData signatureType:(enum SignatureType)signatureType message:(NSString * _Nullable)message OBJC_DESIGNATED_INITIALIZER SWIFT_METHOD_FAMILY(init);
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface CustomerAuthenticatedSignature (SWIFT_EXTENSION(AntelopSDK))
/// Return the data to be signed
- (NSString * _Nullable)getInputData SWIFT_WARN_UNUSED_RESULT;
/// This method return an encoded JWT Token.
/// This method should be used only when you get an <code>onProcessSuccess</code>event (avaliable in <code>DefaultCustomerAuthenticatedProcessProtocol</code> and <code>CustomCustomerAuthenticatedProcessProtocol</code>
///
/// returns:
/// a String representation of the encoded JWT - could be nil
- (NSString * _Nullable)getResult SWIFT_WARN_UNUSED_RESULT;
@end


@interface CustomerAuthenticatedSignature (SWIFT_EXTENSION(AntelopSDK))
/// Return the name of the authentication pattern
- (NSString * _Nonnull)getAuthenticationPatternName SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isOnline SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getMessage SWIFT_WARN_UNUSED_RESULT;
- (void)setOnlineAuthentication:(BOOL)onlineAuthentication;
@end

@class NSMutableData;

/// Class to handle credentials as Issuer Passcode - Passcode verification handled by Issuer
SWIFT_CLASS("_TtC10AntelopSDK36CustomerAuthenticationIssuerPasscode")
@interface CustomerAuthenticationIssuerPasscode : Credentials
/// \param passcode The passcode entered by the customer.
///
/// \param cryptogram The cryptogram to be presented to Issuer information system for validation. Its size cannot exceed 8192 bytes
///
/// \param cryptogramData Optional data to be presented along with the cryptogram to Issuer information. Its size cannot exceed 1024 bytes
///
- (nonnull instancetype)initWithPasscode:(NSMutableData * _Nonnull)passcode cryptogram:(NSMutableData * _Nullable)cryptogram cryptogramData:(NSMutableData * _Nullable)cryptogramData OBJC_DESIGNATED_INITIALIZER;
/// \param passcode The passcode entered by the customer.
///
/// \param cryptogram The cryptogram to be presented to Issuer information system for validation. Its size cannot exceed 8192 bytes
///
/// \param cryptogramData Optional data to be presented along with the cryptogram to Issuer information. Its size cannot exceed 1024 bytes
///
- (nonnull instancetype)passcode:(NSMutableData * _Nonnull)passcode cryptogram:(NSMutableData * _Nonnull)cryptogram cryptogramData:(NSMutableData * _Nullable)cryptogramData OBJC_DESIGNATED_INITIALIZER SWIFT_METHOD_FAMILY(init);
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




typedef SWIFT_ENUM(NSInteger, CustomerAuthenticationMethodStatus, open) {
/// Not supported by the device. Thus it cannot be used to authenticate customer and nothing can be done to get it supported.
  CustomerAuthenticationMethodStatusNotSupported = 0,
/// Not yet configured on the device. It must first be configured on device OS settings and then activated before it can be used to authenticate customer.
  CustomerAuthenticationMethodStatusNotConfigured = 1,
/// Configured but not activated. It must first be activated before it can be used to authenticate customer.
  CustomerAuthenticationMethodStatusConfigured = 2,
/// Activated, it can be used to authenticate the customer.
  CustomerAuthenticationMethodStatusActivated = 3,
};

/// This enums list the possible types of a customer authentication method.
typedef SWIFT_ENUM(NSInteger, CustomerAuthenticationMethodType, open) {
/// No authentication.
  CustomerAuthenticationMethodTypeNone = 0,
/// Customer consent authentication method
  CustomerAuthenticationMethodTypeConsent = 1,
/// Pin authentication method
  CustomerAuthenticationMethodTypePin = 2,
/// Biometric authentication method
  CustomerAuthenticationMethodTypeDeviceBiometric = 3,
};

typedef SWIFT_ENUM(NSInteger, CustomerAuthenticationMethodUsage, open) {
/// Wallet Management
  CustomerAuthenticationMethodUsageWalletManagement = 0,
/// Strong Customer Authentication
  CustomerAuthenticationMethodUsageSca = 1,
/// Digital Card
  CustomerAuthenticationMethodUsageDigitalCard = 2,
};


/// Class to handle credentials as Issuer Passcode - Passcode verification handled by Antelop services
SWIFT_CLASS("_TtC10AntelopSDK30CustomerAuthenticationPasscode")
@interface CustomerAuthenticationPasscode : Credentials
- (nonnull instancetype)initWithPasscode:(NSMutableData * _Nonnull)passcode OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// :nodoc:
/// This is the default object to configure layout and values in different prompt views.
SWIFT_CLASS("_TtC10AntelopSDK28CustomerAuthenticationPrompt")
@interface CustomerAuthenticationPrompt : NSObject
/// :nodoc:
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class represents a builder that collects the properties of a <code>CustomerAuthenticationPrompt</code>.
/// Each <code>CustomerAuthenticationPrompt</code> has its own way to prompt customer depending on its
/// <code>CustomerAuthenticationMethodType</code>, for example a
/// <code>CustomerAuthenticationMethod</code> with a type set to <code>CustomerAuthenticationMethodType.deviceBiometric</code>
/// displays a system provided dialog whereas a <code>CustomerAuthenticationMethod</code> with a type set to <code>CustomerAuthenticationMethodType.pin</code>
/// displays a keyboard with digits.
/// Thus, authentication prompts change from one <code>CustomerAuthenticationMethodType</code> to another, and only builders from a specific sub class
/// of <code>CustomerAuthenticationPromptBuilder</code> can be used to build a <code>CustomerAuthenticationPrompt</code> for authenticating customer with a
/// <code>CustomerAuthenticationMethod</code> of a given <code>CustomerAuthenticationMethodType</code>.
/// Here is the mapping between the <code>CustomerAuthenticationMethodType</code> items and the <code>CustomerAuthenticationPromptBuilder</code> associated sub classes .
/// Method with type set to <code>CustomerAuthenticationMethodType.pin</code> must prompt customer using <code>CustomerAuthenticationPrompt</code>
/// objects build from a <code>PinCustomerAuthenticationPromptBuilder</code>.
/// Method with type set to <code>CustomerAuthenticationMethodType.deviceBiometric</code> must prompt customer using <code>CustomerAuthenticationPrompt</code>
/// objects build from a <code>DeviceBiometricCustomerAuthenticationPromptBuilder</code>.
/// Method with type set to <code>CustomerAuthenticationMethodType.consent</code> must prompt customer using <code>CustomerAuthenticationPrompt</code>
/// objects build from a <code>CustomerConsentPromptBuilder</code>.
SWIFT_CLASS("_TtC10AntelopSDK35CustomerAuthenticationPromptBuilder")
@interface CustomerAuthenticationPromptBuilder : NSObject
- (CustomerAuthenticationPrompt * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Class to provide “CONSENT” credentials throught SCA when “.consent” method type is required
SWIFT_CLASS("_TtC10AntelopSDK26CustomerConsentCredentials")
@interface CustomerConsentCredentials : Credentials
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Prompt view configuration for “.consent” type
SWIFT_CLASS("_TtC10AntelopSDK21CustomerConsentPrompt")
@interface CustomerConsentPrompt : CustomerAuthenticationPrompt
@end

@class UIViewController;

@interface CustomerConsentPrompt (SWIFT_EXTENSION(AntelopSDK))
/// returns the View Controller from which the prompt should be presented
///
/// returns:
/// the View Controller from which the prompt should be presented
- (UIViewController * _Nullable)getPresentingViewController SWIFT_WARN_UNUSED_RESULT;
/// returns prompt title
///
/// returns:
/// prompt title
- (NSString * _Nullable)getTitle SWIFT_WARN_UNUSED_RESULT;
/// Returns the text in body of “alert” view
///
/// returns:
/// the text in body of “alert” view
- (NSString * _Nullable)getBody SWIFT_WARN_UNUSED_RESULT;
/// Returns the text for “cancel” button
///
/// returns:
/// the text for “cancel” button
- (NSString * _Nullable)getCancel SWIFT_WARN_UNUSED_RESULT;
/// Returns the text for “confirm” button
///
/// returns:
/// the text for “confirm” button
- (NSString * _Nullable)getConfirm SWIFT_WARN_UNUSED_RESULT;
@end


@interface CustomerConsentPrompt (SWIFT_EXTENSION(AntelopSDK))
/// Title of prompt.
/// In some case, this could be the message of the prompt
@property (nonatomic, readonly, copy) NSString * _Nullable title;
/// The text in body of “alert” view
@property (nonatomic, readonly, copy) NSString * _Nullable body;
/// The text for “cancel” button
@property (nonatomic, readonly, copy) NSString * _Nullable cancel;
/// The  text for “confirm” button
@property (nonatomic, readonly, copy) NSString * _Nullable confirm;
@end


/// This class represents a <code>CustomerAuthenticationPromptBuilder</code> that collects the display properties of the prompt associated to
/// a <code>CustomerAuthenticationMethod</code> with a type set to <code>CustomerAuthenticationMethodType.consent</code>.
SWIFT_CLASS("_TtC10AntelopSDK28CustomerConsentPromptBuilder")
@interface CustomerConsentPromptBuilder : CustomerAuthenticationPromptBuilder
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Sets the View Controller from which the Consent Authentication Prompt will be presented
/// \param presentingViewController the View Controller from which the Consent Authentication Prompt will be presented
///
///
/// returns:
/// the <code>CustomerConsentPromptBuilder</code>
- (CustomerConsentPromptBuilder * _Nonnull)setPresentingViewController:(UIViewController * _Nonnull)presentingViewController;
/// Sets the title of the pin authentication prompt.
/// \param title The title to set in the pin authentication prompt
///
///
/// returns:
/// the <code>PinCustomerAuthenticationPromptBuilder</code>
- (CustomerConsentPromptBuilder * _Nonnull)setTitleWithTitle:(NSString * _Nullable)title;
/// Sets the subtitle of the pin authentication prompt.
/// \param subtitle The subtitle to set in the pin authentication prompt
///
///
/// returns:
/// the <code>PinCustomerAuthenticationPromptBuilder</code>
- (CustomerConsentPromptBuilder * _Nonnull)setBodyWithBody:(NSString * _Nullable)body;
/// Sets the subtitle of the pin authentication prompt.
/// \param cancel The title of the Cancel button to set in the pin authentication prompt
///
///
/// returns:
/// the <code>PinCustomerAuthenticationPromptBuilder</code>
- (CustomerConsentPromptBuilder * _Nonnull)setCancelWithCancel:(NSString * _Nullable)cancel;
/// Sets the subtitle of the pin authentication prompt.
/// \param confirm The title of the Confirm button to set in the pin authentication prompt
///
///
/// returns:
/// the <code>PinCustomerAuthenticationPromptBuilder</code>
- (CustomerConsentPromptBuilder * _Nonnull)setConfirmWithConfirm:(NSString * _Nullable)confirm;
- (CustomerConsentPrompt * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
@end

/// This enum lists the possible reasons for a <code>WalletManager.connect()</code> to require credentials.
typedef SWIFT_ENUM(NSInteger, CustomerCredentialsRequiredReason, open) {
/// Customer has to authenticate in order to access to wallet services.
/// The credentials must be validated using <code>WalletManager.connect(currentPasscode:)</code>
  CustomerCredentialsRequiredReasonValidationNeeded = 0,
/// The credentials must be set using <code>WalletManager.connect(newPasscode:)</code>
  CustomerCredentialsRequiredReasonNotSet = 1,
/// The credentials must be changed using <code>WalletManager.connect(currentPasscode:newPasscode:)</code>
  CustomerCredentialsRequiredReasonToBeChanged = 2,
};

@class LAContext;

/// Class to provide “DEVICE_BIOMETRIC” credentials throught SCA when “.deviceBiometric” method type is required
SWIFT_CLASS("_TtC10AntelopSDK48CustomerDeviceBiometricAuthenticationCredentials")
@interface CustomerDeviceBiometricAuthenticationCredentials : Credentials
- (nonnull instancetype)initWithContext:(LAContext * _Nonnull)context OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Prompt view configuration for “.deviceBiometric” type
SWIFT_CLASS("_TtC10AntelopSDK43DeviceBiometricCustomerAuthenticationPrompt")
@interface DeviceBiometricCustomerAuthenticationPrompt : CustomerAuthenticationPrompt
@end


@interface DeviceBiometricCustomerAuthenticationPrompt (SWIFT_EXTENSION(AntelopSDK))
/// returns prompt title
///
/// returns:
/// prompt title
- (NSString * _Nullable)getTitle SWIFT_WARN_UNUSED_RESULT;
@end


@interface DeviceBiometricCustomerAuthenticationPrompt (SWIFT_EXTENSION(AntelopSDK))
/// Title of prompt.
/// In some case, this could be the message of the prompt
@property (nonatomic, readonly, copy) NSString * _Nullable title;
@end


/// This class represents a <code>CustomerAuthenticationPrompt</code> that collects the display properties of the prompt associated to
/// a <code>CustomerAuthenticationMethod</code> with a type set to <code>CustomerAuthenticationMethodType.deviceBiometric</code>.
SWIFT_CLASS("_TtC10AntelopSDK50DeviceBiometricCustomerAuthenticationPromptBuilder")
@interface DeviceBiometricCustomerAuthenticationPromptBuilder : CustomerAuthenticationPromptBuilder
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Sets the title of the pin authentication prompt.
/// \param title The title to set in the pin authentication prompt
///
///
/// returns:
/// the <code>DeviceBiometricCustomerAuthenticationPromptBuilder</code>
- (DeviceBiometricCustomerAuthenticationPromptBuilder * _Nonnull)setTitleWithTitle:(NSString * _Nullable)title;
- (DeviceBiometricCustomerAuthenticationPrompt * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
@end

/// This enum represents the status of a DigitalCard Service
typedef SWIFT_ENUM(NSInteger, DigitalCardServiceStatus, open) {
/// Digital Card service is active
  DigitalCardServiceStatusActive = 0,
/// Digital Card service is not enabled
  DigitalCardServiceStatusDisabled = 1,
/// Digital Card service is active but not configured
  DigitalCardServiceStatusNotConfiguredByUser = 2,
/// Digital Card service is not supported by the device
  DigitalCardServiceStatusNotSupportedByDevice = 3,
};


typedef SWIFT_ENUM(NSInteger, DisplayType, open) {
  DisplayTypeCardDetails = 0,
  DisplayTypePinCode = 1,
};

/// This enum lists the possible reasons for a device not to be eligible to run Antelop products.
typedef SWIFT_ENUM(NSInteger, EligibilityDenialReason, open) {
/// The Operating System of the device is not supported by Antelop wallet service.
  EligibilityDenialReasonOsNotSupported = 0,
/// iOS version of the device is not supported by the Antelop wallet service.
/// Today the minimum supported version is iOS 10.3
  EligibilityDenialReasonOsVersionNotSupported = 1,
/// The device has no telephony support.
/// Antelop wallet service cannot run without telephony support as it is involved in device fingerprinting.
/// Devices such as tablets do not have telephony support.
  EligibilityDenialReasonNoTelephony = 2,
/// The device does not support Near Field Communication (NFC) technology.
  EligibilityDenialReasonNfcNotSupported = 3,
/// The current device is not allowed by the Issuer to run Antelop products.
  EligibilityDenialReasonDeviceNotAllowed = 4,
/// The current device model with the current device version is no more allowed by the Issuer to run Antelop products.
  EligibilityDenialReasonDeviceSupportExpired = 5,
/// The device is rooted and rooted devices are not allowed by the Issuer to run Antelop products.
  EligibilityDenialReasonRootNotAllowed = 6,
/// The Antelop product is not supported by the sdk.
  EligibilityDenialReasonProductNotSupportedBySdk = 7,
};

typedef SWIFT_ENUM(NSInteger, EmvApplicationFormat, open) {
  EmvApplicationFormatDigitalCard = 0,
};

typedef SWIFT_ENUM(NSInteger, EmvApplicationStatus, open) {
  EmvApplicationStatusActive = 0,
  EmvApplicationStatusLocked = 1,
  EmvApplicationStatusDeleted = 2,
  EmvApplicationStatusActivationRequired = 3,
  EmvApplicationStatusActivating = 4,
  EmvApplicationStatusActivationRefused = 5,
};


SWIFT_CLASS("_TtC10AntelopSDK13LocaleManager")
@interface LocaleManager : NSObject
/// This method can be called from AppDelegate’s singleton instance
/// This method sets the sdk language parameter wich will affect the language displayed
/// in the screens returned by the SDK
/// \param locale the <code>String</code> language identifier code
///
- (void)applyLocaleTo:(NSString * _Nonnull)locale;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// This enum lists the possible reasons for a wallet to be locked.
/// It covers both the reasons for a customer to lock his/her own wallet and the reasons for an issuer to lock a given wallet.
typedef SWIFT_ENUM(NSInteger, LockReason, open) {
/// The customer suspects that a fraudulent use of his/her wallet has been made.
/// This value can be used as an input argument when calling the method <code>WalletManager.lock(_:)</code>
  LockReasonFraudulentUseSuspected = 0,
/// The customer does not want to use Antelop wallet service anymore.
/// This value can be used as an input argument when calling the method <code>WalletManager.lock(_:)</code>
  LockReasonStopService = 1,
/// The issuer has locked the wallet because the maximum number of failed authentication attempts with the strongest CustomerAuthenticationMethod of the wallet has been reached.
/// This value must not be used when calling the method WalletManager#lock(WalletLockReason) otherwise an WalletValidationError is thrown
  LockReasonStrongestCvmAttemptCountExceeded = 2,
/// The issuer has locked the wallet for an undefined reason.
/// This value must not be used when calling the method  <code>WalletManager.lock(_:)</code> otherwise an <code>AntelopError</code> is thrown
  LockReasonOtherReason = 3,
};

typedef SWIFT_ENUM(NSInteger, ManageTokenRequestAction, open) {
  ManageTokenRequestActionResume = 0,
  ManageTokenRequestActionSuspend = 1,
  ManageTokenRequestActionDelete = 2,
};

typedef SWIFT_ENUM(NSInteger, ManageVcnRequestAction, open) {
  ManageVcnRequestActionResume = 0,
  ManageVcnRequestActionSuspend = 1,
  ManageVcnRequestActionDelete = 2,
};








/// This struct is used to customize layout for PinPasscode view
/// You can custom all parameters you need, and omit some.
/// Refer to documentation to see default values
SWIFT_CLASS("_TtC10AntelopSDK31PinCustomerAuthenticationPrompt")
@interface PinCustomerAuthenticationPrompt : CustomerAuthenticationPrompt
@end

@class UIImage;
@class UIColor;

@interface PinCustomerAuthenticationPrompt (SWIFT_EXTENSION(AntelopSDK))
/// returns the View Controller from which the prompt should be presented
///
/// returns:
/// the View Controller from which the prompt should be presented
- (UIViewController * _Nullable)getPresentingViewController SWIFT_WARN_UNUSED_RESULT;
/// returns prompt title
///
/// returns:
/// prompt title
- (NSString * _Nullable)getTitle SWIFT_WARN_UNUSED_RESULT;
/// returns prompt subtitle
///
/// returns:
/// prompt subtitle
- (NSString * _Nullable)getSubtitle SWIFT_WARN_UNUSED_RESULT;
/// returns an <code>UIImage</code> instance for “close” button - The image will be colorized with “primary” color - size : 36x36
///
/// returns:
/// the image for close button
- (UIImage * _Nullable)getCloseImage SWIFT_WARN_UNUSED_RESULT;
/// An <code>UIImage</code> instance for “delete last number” button - The image will be colorized with “primary” color - size : 44x44
/// Delete button is placed on the bottom right keypad - visible only when there is at least one number tapped
///
/// returns:
/// the image for the delete button
- (UIImage * _Nullable)getDeleteImage SWIFT_WARN_UNUSED_RESULT;
/// The format text for prompt error (default : “Invalid Pin, remaining attempt(s) : %lu”)
///
/// returns:
/// the format text for prompt error
- (NSString * _Nullable)getErrorTextFormat SWIFT_WARN_UNUSED_RESULT;
/// Defines the <code>UIColor</code>of the view background (default : “#404040”)
///
/// returns:
/// the view background color
- (UIColor * _Nullable)getBackgroundColor SWIFT_WARN_UNUSED_RESULT;
/// Defines the <code>UIColor</code>of the “primary” color (texts, buttons, bullets, keyboard)  (default : “#FFFFFF”)
///
/// returns:
/// the “primary” color
- (UIColor * _Nullable)getPrimaryColor SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// the “secondary” color
- (UIColor * _Nullable)getSecondaryColor SWIFT_WARN_UNUSED_RESULT;
@end


@interface PinCustomerAuthenticationPrompt (SWIFT_EXTENSION(AntelopSDK))
/// Title of prompt.
/// In some case, this could be the message of the prompt
@property (nonatomic, readonly, copy) NSString * _Nullable title;
/// Second title, 2 lines max, below the title (default : “Enter your pin”)
@property (nonatomic, readonly, copy) NSString * _Nullable subtitle;
/// An <code>UIImage</code> instance of image for “close” button - The image will be colorized with “primary” color - size : 36x36
@property (nonatomic, readonly, strong) UIImage * _Nullable closeImage;
/// An <code>UIImage</code> instance for “delete last number” button - The image will be colorized with “primary” color - size : 44x44
/// Delete button is placed on the bottom right keypad - visible only when there is at least one number tapped
@property (nonatomic, readonly, strong) UIImage * _Nullable deleteImage;
/// The format text for prompt error (default : “Invalid Pin, remaining attempt(s) : %lu”)
@property (nonatomic, readonly, copy) NSString * _Nullable errorTextFormat;
/// Defines the <code>UIColor</code>of the view background (default : “#404040”)
@property (nonatomic, readonly, strong) UIColor * _Nullable backgroundColor;
/// Defines the <code>UIColor</code>of the “primary” color (texts, buttons, bullets, keyboard)  (default : “#FFFFFF”)
@property (nonatomic, readonly, strong) UIColor * _Nullable primaryColor;
/// Define the <code>UIColor</code>of the “secondary” color (keyboard buttons background)  (default : “#FFFFFF”)
@property (nonatomic, readonly, strong) UIColor * _Nullable secondaryColor;
@end


/// This class represents a <code>CustomerAuthenticationPrompt</code> that collects the display properties of the prompt associated to
/// a <code>CustomerAuthenticationMethod</code> with a type set to <code>CustomerAuthenticationMethodType.pin</code>.
SWIFT_CLASS("_TtC10AntelopSDK38PinCustomerAuthenticationPromptBuilder")
@interface PinCustomerAuthenticationPromptBuilder : CustomerAuthenticationPromptBuilder
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Sets the View Controller from which the Pin Authentication Prompt will be presented
/// \param presentingViewController the View Controller from which the Pin Authentication Prompt will be presented
///
///
/// returns:
/// the <code>PinCustomerAuthenticationPromptBuilder</code>
- (PinCustomerAuthenticationPromptBuilder * _Nonnull)setPresentingViewController:(UIViewController * _Nonnull)presentingViewController;
/// Sets the title of the pin authentication prompt.
/// \param title The title to set in the pin authentication prompt
///
///
/// returns:
/// the <code>PinCustomerAuthenticationPromptBuilder</code>
- (PinCustomerAuthenticationPromptBuilder * _Nonnull)setTitle:(NSString * _Nullable)title;
/// Sets the subtitle of the pin authentication prompt.
/// \param subtitle The subtitle to set in the pin authentication prompt
///
///
/// returns:
/// the <code>PinCustomerAuthenticationPromptBuilder</code>
- (PinCustomerAuthenticationPromptBuilder * _Nonnull)setSubtitle:(NSString * _Nullable)subtitle;
/// Sets if pin checking by the prompt must be disabled or not
/// Disabling it can be useful for authentications that are checked anyway on backend side
/// \param pinCheckDisabled Whether the prompt must check Pin or not
///
///
/// returns:
/// the <code>PinCustomerAuthenticationPromptBuilder</code>
- (PinCustomerAuthenticationPromptBuilder * _Nonnull)setPinCheckDisabled:(BOOL)pinCheckDisabled;
/// Sets an <code>UIImage</code> instance for the “close” button - The image will be colorized with “primary” color - size : 36x36
/// \param closeImage the close image to set in the pin authentication prompt
///
///
/// returns:
/// the <code>PinCustomerAuthenticationPromptBuilder</code>
- (PinCustomerAuthenticationPromptBuilder * _Nonnull)setCloseImage:(UIImage * _Nullable)closeImage;
/// Sets an <code>UIImage</code> instance for the “delete last number” button - The image will be colorized with “primary” color - size : 44x44
/// \param deleteImage the image for the “delete last number” button
///
///
/// returns:
/// the <code>PinCustomerAuthenticationPromptBuilder</code>
- (PinCustomerAuthenticationPromptBuilder * _Nonnull)setDeleteImage:(UIImage * _Nullable)deleteImage;
/// Sets the format text for prompt error (default : “Invalid Pin, remaining attempt(s) : %d”)
/// \param errorTextFormat the format text for prompt error
///
///
/// returns:
/// the <code>PinCustomerAuthenticationPromptBuilder</code>
- (PinCustomerAuthenticationPromptBuilder * _Nonnull)setErrorTextFormat:(NSString * _Nullable)errorTextFormat;
/// Sets the value defining whether the close button is visible or not (default : true)
/// \param showCancel the value defining whether the close button is visible or not
///
///
/// returns:
/// the <code>PinCustomerAuthenticationPromptBuilder</code>
- (PinCustomerAuthenticationPromptBuilder * _Nonnull)setShowCancel:(BOOL)showCancel;
/// Sets the PIN length (default : 5)
/// \param pinSize the PIN length
///
///
/// returns:
/// the <code>PinCustomerAuthenticationPromptBuilder</code>
- (PinCustomerAuthenticationPromptBuilder * _Nonnull)setPinSize:(NSInteger)pinSize;
/// Sets the <code>UIColor</code>of the view background (default : “#404040”)
/// \param backgroundColor the <code>UIColor</code>of the view background
///
///
/// returns:
/// the <code>PinCustomerAuthenticationPromptBuilder</code>
- (PinCustomerAuthenticationPromptBuilder * _Nonnull)setBackgroundColor:(UIColor * _Nullable)backgroundColor;
/// Sets the <code>UIColor</code>of the “primary” color (texts, buttons, bullets, keyboard)  (default : “#FFFFFF”)
/// \param primaryColor the <code>UIColor</code>of the “primary” color (texts, buttons, bullets, keyboard)
///
///
/// returns:
/// the <code>PinCustomerAuthenticationPromptBuilder</code>
- (PinCustomerAuthenticationPromptBuilder * _Nonnull)setPrimaryColor:(UIColor * _Nullable)primaryColor;
/// Sets the <code>UIColor</code>of the “secondary” color (keyboard buttons background)  (default : “#FFFFFF”)
/// \param secondaryColor the <code>UIColor</code>of the “secondary” color (keyboard buttons background)
///
///
/// returns:
/// the <code>PinCustomerAuthenticationPromptBuilder</code>
- (PinCustomerAuthenticationPromptBuilder * _Nonnull)setSecondaryColor:(UIColor * _Nullable)secondaryColor;
/// Sets the value defining whether the keyboard numbers are randomized or with standard placement (default : true)
/// Standard placement is : 3 lines with 3 buttons per line - start on top left with “1” , left to right arrangement +  a last line with centered button “0”.
/// \param randomizeKeyboard the value defining whether the keyboard numbers are randomized or with standard placement
///
///
/// returns:
/// the <code>PinCustomerAuthenticationPromptBuilder</code>
- (PinCustomerAuthenticationPromptBuilder * _Nonnull)setRandomizeKeyboard:(BOOL)randomizeKeyboard;
- (PinCustomerAuthenticationPrompt * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
@end

/// A Product represents a service that can be offered by Antelop SDK to the mobile application it is embedded into.
typedef SWIFT_ENUM(NSInteger, Product, open) {
/// Refers to the Strong Customer Authentication service.
/// This service enables the mobile application to perform Strong Customer Authentication.
  ProductSca = 0,
/// Refers to the one digital card product.
  ProductDigitalCard = 1,
};


/// Class to handle an authentication request from back-end
SWIFT_CLASS("_TtC10AntelopSDK25PushAuthenticationRequest")
@interface PushAuthenticationRequest : NSObject
/// Cancel the process by running online command
- (void)cancel;
/// Cancel the process by running online command
- (void)cancel:(void (^ _Nonnull)(void))completion;
/// Return unique identifier of SCA Request
- (NSString * _Nonnull)getId SWIFT_WARN_UNUSED_RESULT;
/// Return the issuer data to be signed in the SCA Request as Base64
- (NSString * _Nonnull)getIssuerData SWIFT_WARN_UNUSED_RESULT;
/// Return the expiry date of the SCA Request
- (uint64_t)getExpiryTimestamp SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface PushAuthenticationRequest (SWIFT_EXTENSION(AntelopSDK))
- (NSString * _Nonnull)getAuthenticationPatternName SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isOnline SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getMessage SWIFT_WARN_UNUSED_RESULT;
@end


/// The data of a SCA Request notification
SWIFT_CLASS("_TtC10AntelopSDK29PushAuthenticationRequestInfo")
@interface PushAuthenticationRequestInfo : NSObject
/// The unique identifier of the authentication request
@property (nonatomic, readonly, copy) NSString * _Nonnull requestId;
/// The desired authentication pattern name from the request
@property (nonatomic, readonly, copy) NSString * _Nonnull authenticationPattern;
/// The expiration date as timestamp format
@property (nonatomic, readonly) double expiryDate;
/// The data to be signed in the authentication request, as Base64
@property (nonatomic, readonly, copy) NSString * _Nonnull data;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol PushAuthenticationRequestListenerProtocol;

/// Class to register an implementation of <code>PushAuthenticationRequestListenerProtocol</code>
SWIFT_CLASS("_TtC10AntelopSDK33PushAuthenticationRequestListener")
@interface PushAuthenticationRequestListener : NSObject
/// Singleton pattern. you should use this shared object and never try to init another one
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PushAuthenticationRequestListener * _Nonnull shared;)
+ (PushAuthenticationRequestListener * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Method to register an implementation of <code>PushAuthenticationRequestListenerProtocol</code>
/// \param observer instance of <code>PushAuthenticationRequestListenerProtocol</code>
///
///
/// returns:
/// an UUID that represents the registration of your protocol implementation
- (NSString * _Nonnull)registerWithObserver:(id <PushAuthenticationRequestListenerProtocol> _Nonnull)observer;
/// Method to remove a PushAuthenticationRequestListenerProtocol previously registered
/// \param identifier the UUID given by a previous call to <code>PushAuthenticationRequestListener.register</code>  method
///
///
/// returns:
/// a Bool value of result process
- (BOOL)removeWithIdentifier:(NSString * _Nonnull)identifier;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Protocol to obtain a callback when an authenticate request is received
SWIFT_PROTOCOL("_TtP10AntelopSDK41PushAuthenticationRequestListenerProtocol_")
@protocol PushAuthenticationRequestListenerProtocol
- (void)onRequestReceivedWithRequest:(PushAuthenticationRequest * _Nonnull)request;
- (void)onRequestCancelledWithRequestId:(NSString * _Nonnull)requestId reason:(enum CancellationReason)reason;
@end

typedef SWIFT_ENUM(NSInteger, SignatureType, open) {
  SignatureTypeLocalJws = 0,
};

typedef SWIFT_ENUM(NSInteger, TokenRequestorType, open) {
  TokenRequestorTypeWallet = 0,
  TokenRequestorTypeEcommerce = 1,
};

typedef SWIFT_ENUM(NSInteger, TokenServiceProvider, open) {
  TokenServiceProviderMdes = 0,
  TokenServiceProviderVts = 1,
};

typedef SWIFT_ENUM(NSInteger, TokenStatus, open) {
  TokenStatusInactive = 0,
  TokenStatusActive = 1,
  TokenStatusSuspended = 2,
};

typedef SWIFT_ENUM(NSInteger, TokenType, open) {
  TokenTypeSecureElement = 0,
  TokenTypeHce = 1,
  TokenTypeCardOnFile = 2,
  TokenTypeQrCode = 3,
  TokenTypeOther = 4,
};








typedef SWIFT_ENUM(NSInteger, VirtualCardNumberStatus, open) {
  VirtualCardNumberStatusActive = 0,
  VirtualCardNumberStatusSuspended = 1,
  VirtualCardNumberStatusExpired = 2,
};


/// This struct gives access to the information pertaining to the cards, settings and counters.
/// This class also provides card management functions.
/// To obtain an instance of this class, one must connect to the <code>WalletManager</code> through <code>WalletManager.connect()</code>
/// This ensures that the activation of the wallet is made and that the wallet is up to date.
/// The wallet is obtained upon connection success in the <code>WalletManagerDelegate.walletManager(_:,didSucceedConnectWithWallet:)</code> callback.
/// The wallet may be updated anytime.
/// It is hence good practice to avoid keeping a hard copy of this class and always working with the reference passed in
/// the <code>WalletManagerDelegate.walletManager(_:,didSucceedConnectWithWallet:)</code> callback.
/// seealso:
/// <code>WalletManagerProtocol.walletManager(_:,didSucceedConnectWithWallet:)</code>
SWIFT_CLASS("_TtC10AntelopSDK6Wallet")
@interface Wallet : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface Wallet (SWIFT_EXTENSION(AntelopSDK))
/// The objective-C version of enrollDigitalCard(enrollmentData:, completion:)
/// \param enrollmentData The string gathering the parameters of the digital card to be enrolled
///
/// \param success The success callback
///
/// \param error The error callback
///
- (BOOL)enrollDigitalCardWithEnrollmentData:(NSString * _Nonnull)enrollmentData error:(NSError * _Nullable * _Nullable)error success:(void (^ _Nonnull)(void))success error:(void (^ _Nonnull)(NSError * _Nonnull))error;
@end


@interface Wallet (SWIFT_EXTENSION(AntelopSDK))
///
/// returns:
/// issuer wallet id
- (NSString * _Nullable)getIssuerWalletId SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// issuer client id
- (NSString * _Nullable)getIssuerClientId SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// issuer data
- (NSString * _Nullable)getIssuerData SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// wallet certificate
- (NSData * _Nullable)getCertificate SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// secure display certificate
- (NSData * _Nullable)getSecureDisplayCertificate SWIFT_WARN_UNUSED_RESULT;
@end


/// This class manages the access to Antelop wallet services except provisioning which is handled by <code>WalletProvisioning</code> class.
/// When connecting to the <code>WalletManager</code>, Antelop SDK ensures that everything is properly activated.
/// If so, a <code>Wallet</code> object is returned in the success delegate method which allows to
/// have access to all the parameters of the wallet (cards, settings…).
/// The connection should be made through <code>WalletManager.connect()</code>.
/// A successful connection is mandatory before calling the other <code>WalletManager</code> entry points.
SWIFT_CLASS("_TtC10AntelopSDK13WalletManager")
@interface WalletManager : NSObject
/// Attempts to connect to Antelop wallet services.
/// The <code>connect</code> result is returned through the <code>WalletManagerProtocol</code>:
/// <ul>
///   <li>
///     <code>WalletManagerProtocol.onConnectionError(_:)</code> is called in case of connect failure.
///   </li>
///   <li>
///     <code>WalletManagerProtocol.onCredentialsRequired(_:)</code> is called in case <code>CustomerAuthenticationPasscode</code> are missing or need to be updated.
///   </li>
///   <li>
///     <code>WalletManagerProtocol.onProvisioningRequired()</code> is called in case Wallet is not present on the device, and need to be initialized before
///   </li>
///   <li>
///     <code>WalletManagerProtocol.onConnectionSuccess(_:)</code> is called in case of connect success.
///   </li>
/// </ul>
/// Connection to Antelop wallet service must be done first through <code>WalletManager.connect()</code> method.
/// Connecting through WalletManager.connect(currentPasscode:)<code>must only be done if the previous connection attempt has triggered the delegate function</code>WalletManagerProtocol.onCredentialsRequired(_:)<code>with the reason</code>notSet`
- (void)connect;
/// Attempts to connect to Antelop wallet services.
/// The <code>connect</code> result is returned through the <code>WalletManagerProtocol</code>:
/// <ul>
///   <li>
///     <code>WalletManagerProtocol.onConnectionError(_:)</code> is called in case of connect failure.
///   </li>
///   <li>
///     <code>WalletManagerProtocol.onCredentialsRequired(_:)</code> is called in case <code>CustomerAuthenticationPasscode</code> are missing or need to be updated.
///   </li>
///   <li>
///     <code>WalletManagerProtocol.onProvisioningRequired()</code> is called in case Wallet is not present on the device, and need to be initialized before
///   </li>
///   <li>
///     <code>WalletManagerProtocol.onConnectionSuccess(_:)</code> is called in case of connect success.
///   </li>
/// </ul>
/// Connection to Antelop wallet service must be done first through <code>WalletManager.connect()</code> method.
/// Connecting through WalletManager.connect(currentPasscode:)<code>must only be done if the previous connection attempt has triggered the delegate function</code>WalletManagerProtocol.onCredentialsRequired(_:)<code>with the reason</code>notSet`
- (BOOL)connectWithCurrentCredentials:(Credentials * _Nullable)currentCredentials newCredentials:(Credentials * _Nullable)newCredentials error:(NSError * _Nullable * _Nullable)error;
/// Attemps to check customer current <code>CustomerCredentials</code> with input
/// This method can be called only once successfully connected to Antelop wallet services.
/// This method returns immediately and triggers asynchronously a credentials change.
/// Upon success, <code>WalletManagerProtocol.onAsyncRequestSuccess(_:)</code> is called
/// Upon failure, <code>WalletManagerProtocol.onAsyncRequestError(_:)</code> is called with the encoutered error as <code>AntelopError</code>
/// \param currentCredentials Customer current <code>Credentials</code> to verify.
///
///
/// throws:
/// <code>WalletValidationError</code> if <code>changeCredentials</code> function is called while <code>WalletManager</code> is not connected
- (BOOL)checkCredentialsWithCurrentCredentials:(Credentials * _Nonnull)currentCredentials error:(NSError * _Nullable * _Nullable)error;
/// Attempts to change customer current <code>CustomerCredentials</code> with new ones.
/// This method can be called only once successfully connected to Antelop wallet services.
/// This method returns immediately and triggers asynchronously a credentials change.
/// Upon success, <code>WalletManagerProtocol.onAsyncRequestSuccess(_:)</code> is called.
/// Upon failure, <code>WalletManagerProtocol.onAsyncRequestError(_:)</code> is called with the encoutered error as <code>AntelopError</code>
/// \param currentCredentials Customer current <code>Credentials</code> to replace.
///
/// \param newCredentials     Customer new <code>Credentials</code> which will replace the old ones.
///
///
/// throws:
/// <code>WalletValidationError</code> if <code>changeCredentials</code> function is called while <code>WalletManager</code> is not connected
- (BOOL)changeCredentialsWithCurrentCredentials:(Credentials * _Nonnull)currentCredentials newCredentials:(Credentials * _Nonnull)newCredentials error:(NSError * _Nullable * _Nullable)error;
/// Attempts to logout from the Antelop <code>Wallet</code>.
/// A logout disconnects from Antelop Wallet services and any subsequent connections will require customer authentication.
/// Once logged out, transactions are forbidden until a new connection succeeds.
/// This method can be called only once successfully connected to Antelop wallet Services.
/// This method returns immediately and triggers asynchronously a logout.
/// Upon success, <code>WalletManagerProtocol.onAsyncRequestSuccess(_:)</code> is called.
/// Upon failure, <code>WalletManagerProtocol.onAsyncRequestError(_:)</code> is called with the encoutered error as <code>AntelopError</code>
///
/// throws:
/// <code>WalletValidationError</code> when logout function is called while <code>WalletManager</code> is not connected.
- (BOOL)logoutAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Attempts to lock the ‘Wallet’.
/// The reason why the wallet is locked must be specified.
/// The provided reason (‘LockReason’) can only be equal to ‘fraudulentUseSuspected’ or ‘stopService’.
/// Other locking reasons can only be invoked on issuer side.
/// This method can be called only once successfully connected to Antelop wallet Services.
/// This method returns immediately and triggers asynchronously a lock.
/// Upon success, <code>WalletManagerProtocol.onAsyncRequestSuccess(_:)</code> is called.
/// Upon failure, <code>WalletManagerProtocol.onAsyncRequestError(_:)</code> is called with the encoutered error as <code>AntelopError</code>
///
/// throws:
/// <code>WalletValidationError</code> when logout function is called while <code>WalletManager</code> is not connected.
- (BOOL)lockWithReason:(enum LockReason)reason error:(NSError * _Nullable * _Nullable)error;
/// Attempts to delete the Antelop <code>Wallet</code>.
/// This method returns immediately and triggers asynchronously a delete.
/// Upon success, <code>WalletManagerProtocol.onAsyncRequestSuccess(_:)</code> is called.
- (void)delete;
/// Disconnects from the Antelop wallet services.
/// The delegate <code>InnerWalletManagerDelegate</code> provided in the <code>WalletManager.init</code> will not be called anymore.
/// You should always disconnect properly from the Antelop wallet services if a previous connection took place.
- (void)disconnect;
/// Attemps to activate an authentication method given as parameter
/// <ul>
///   <li>
///     The type of authentication method must be given
///   </li>
///   <li>
///     If wallet is PinPasscode protected, a credentials must be passed in addition
///   </li>
///   <li>
///     This method can be called only once successfully connected to Antelop wallet Services.
///   </li>
///   <li>
///   </li>
///   <li>
///     This method returns immediatlely and triggers asynchronously result
///   </li>
///   <li>
///     Upon success, <code>WalletManagerProtocol.onAsyncRequestSuccess(_:)</code> is called
///   </li>
///   <li>
///     Upon failure, <code>WalletManagerProtocol.onAsyncRequestError(_:)</code> is called with the encoutered error as <code>AntelopError</code>
///   </li>
///   <li>
///     <ul>
///       <li>
///         Throws <code>WalletValidationError</code> in case you try to do something not permitted by SDK, like activate an already active method, or not present
///       </li>
///     </ul>
///   </li>
/// </ul>
- (BOOL)activateAuthenticationMethodWithType:(enum CustomerAuthenticationMethodType)type credentials:(Credentials * _Nullable)credentials error:(NSError * _Nullable * _Nullable)error;
/// Attemps to deactivate an authentication method given as parameter
/// <ul>
///   <li>
///     The type of authentication method must be given
///   </li>
///   <li>
///     If wallet is PinPasscode protected, a credentials must be passed in addition
///   </li>
///   <li>
///     This method can be called only once successfully connected to Antelop wallet Services.
///   </li>
///   <li>
///   </li>
///   <li>
///     This method returns immediatlely and triggers asynchronously result
///   </li>
///   <li>
///     Upon success, <code>WalletManagerProtocol.onAsyncRequestSuccess(_:)</code> is called
///   </li>
///   <li>
///     Upon failure, <code>WalletManagerProtocol.onAsyncRequestError(_:)</code> is called with the encoutered error as <code>AntelopError</code>
///   </li>
///   <li>
///     <ul>
///       <li>
///         Throws <code>WalletValidationError</code> in case you try to do something not permitted by SDK, like deactivate a non-active method, or not present
///       </li>
///     </ul>
///   </li>
/// </ul>
- (BOOL)deactivateAuthenticationMethodWithType:(enum CustomerAuthenticationMethodType)type credentials:(Credentials * _Nullable)credentials error:(NSError * _Nullable * _Nullable)error;
- (BOOL)synchronizeAuthenticationMethodWithType:(enum CustomerAuthenticationMethodType)type credentials:(Credentials * _Nullable)credentials error:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Enum for callbacks <code>WalletManagerProtocol</code>
/// <code>onAsyncRequestError</code>
/// <code>onAsyncRequestSuccess</code>
typedef SWIFT_ENUM(NSInteger, WalletManagerAsyncRequestEnum, open) {
  WalletManagerAsyncRequestEnumLogout = 0,
  WalletManagerAsyncRequestEnumChangeCredentials = 1,
  WalletManagerAsyncRequestEnumCheckCredentials = 2,
  WalletManagerAsyncRequestEnumActivateAuthMethod = 3,
  WalletManagerAsyncRequestEnumDeactivateAuthMethod = 4,
  WalletManagerAsyncRequestEnumLock = 5,
  WalletManagerAsyncRequestEnumDelete = 6,
  WalletManagerAsyncRequestEnumSynchronizeAuthMethod = 7,
};


/// This class handles observers (<code>WalletNotificationsObserver</code>) subscribing and unsubscribing to the Wallet Notifications.
SWIFT_CLASS("_TtC10AntelopSDK19WalletNotifications")
@interface WalletNotifications : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class allows the payment app to perform the provisioning of the wallet.
SWIFT_CLASS("_TtC10AntelopSDK18WalletProvisioning")
@interface WalletProvisioning : NSObject
/// Checks that the Wallet Provisioning requirement is met.
/// Those requirements consist on having a remote notifications token and the background refresh available.
/// The <code>initialize</code> result is returned through the <code>WalletProvisioningProtocol</code>:
/// <ul>
///   <li>
///     <code>WalletProvisioningProtocol.onInitializationSuccess()</code> is called if background refresh is available and after apnsToken has been forwarded to the sdk
///   </li>
///   <li>
///     <code>WalletProvisioningProtocol.onInitializationError(error: AntelopError)</code> is called with <code>AntelopError</code> if background activity is not authorized
///   </li>
/// </ul>
- (void)initialize;
/// Checks if the current running environment (device, os,…) is eligible to run Antelop wallet services or not.
/// The <code>checkEligibility</code> result is returned through the <code>WalletProvisioningProtocol</code>:
/// <ul>
///   <li>
///     <code>WalletProvisioningProtocol.onDeviceEligible(fingerprintAllowed: Bool, eligibleProducts: [Product])</code> is called if the device is eligible.
///   </li>
///   <li>
///     <code>WalletProvisioningProtocol.onDeviceNotEligible(reason: EligibilityDenialReason?, denialReference: String?)</code> is called if the device is not eligible.
///   </li>
///   <li>
///     <code>WalletProvisioningProtocol.onCheckEligibilityError(error: AntelopError)</code> is called if an error occurred during the check.
///   </li>
/// </ul>
/// \param forbidJailBrokenDevices Defines if rooted devices can be eligible to the Antelop wallet services or not.
/// If its value is set to true, being rooted is a sufficient condition for a device not to be eligible
/// to any of antelop wallet service, otherwise it is not a sufficient condition.
///
- (void)checkEligibilityWithForbidJailBrokenDevices:(BOOL)forbidJailBrokenDevices;
/// Launches the Antelop provisioning process through automatic wallet creation mode.
/// This mode first triggers a wallet creation on server side based on the provided wallet creation parameters and once a wallet is created,
/// it is provisioned on the device.
/// This method must be called once <code>WalletProvisioning</code> object initialization is properly done.
/// <code>WalletProvisioning</code> initialization success is notified through <code>WalletProvisioningProtocol.onInitializationSuccess()</code>.
/// The completion of the provisioning is notified through <code>WalletProvisioningProtocol</code>:
/// seealso:
/// <code>WalletProvisioning.initialize()</code>
/// <ul>
///   <li>
///     <code>WalletProvisioningProtocol.onProvisioningPending()</code> is called after the initialization and before the authentication
///   </li>
///   <li>
///     <code>WalletProvisioningProtocol.onProvisioningSuccess()</code> is called in case of success.
///   </li>
///   <li>
///     <code>WalletProvisioningProtocol.onProvisioningError(error: AntelopError)</code> is called in case of failure.
///   </li>
/// </ul>
/// \param clientId The identifier of the customer associated to the wallet to be created.
/// <code>clientId</code> must contain between 0 and 32 alphanumeric characters.
/// In case a <code>nil</code> value is provided, the default client identifier is used.
///
/// \param walletId The identifier of the wallet to be created.
/// <code>walletId</code> must contain between 0 and 32 alphanumeric characters.
/// In case a <code>nil</code> value is provided, the default wallet identifier is used.
///
/// \param settingsProfileId The identifier of the settings profile used to configure the wallet to be created.
/// <code>settingsProfileId</code> must contain between 0 and 32 alphanumeric characters.
///
/// \param phoneNumber An optional phone number associated to the wallet to be created.
/// <code>phoneNumber</code> must start with a “+” and must contain between 6 and 15 digits (<a href="https://en.wikipedia.org/wiki/E.164">E.164 format</a>).
///
///
/// throws:
/// <code>WalletValidationError</code> if one of the provided parameters has an invalid format.
- (BOOL)launchWithClientId:(NSString * _Nullable)clientId walletId:(NSString * _Nullable)walletId settingsProfileId:(NSString * _Nullable)settingsProfileId phoneNumber:(NSString * _Nullable)phoneNumber error:(NSError * _Nullable * _Nullable)error;
/// Launches wallet provisioning process through activation code mode, with a hex string activation code.
/// The provided activation code must be associated to a wallet already created on the backend platform
/// This method must be called once <code>WalletProvisioning</code> object initialization is properly done.
/// <code>WalletProvisioning</code> initialization success is notified through <code>WalletProvisioningProtocol.onInitializationSuccess()</code>.
/// The completion of the provisioning is notified through <code>WalletProvisioningProtocol</code>:
/// seealso:
/// <code>WalletProvisioning.initialize()</code>
/// <ul>
///   <li>
///     <code>WalletProvisioningProtocol.onProvisioningPending()</code> is called after the initialization and before the authentication
///   </li>
///   <li>
///     <code>WalletProvisioningProtocol.onProvisioningSuccess()</code> is called in case of success.
///   </li>
///   <li>
///     <code>WalletProvisioningProtocol.onProvisioningError(error: AntelopError)</code> is called in case of failure.
///   </li>
/// </ul>
/// \param activationCode Hex representation of the 16-byte long array activation code of a wallet created on the backend platform.
///
/// \param phoneNumber An optional phone number associated to the wallet to be created.
/// <code>phoneNumber</code> must start with a “+” and must contain between 6 and 15 digits (<a href="https://en.wikipedia.org/wiki/E.164">E.164 format</a>).
///
///
/// throws:
/// <code>WalletValidationError</code> if one of the provided parameters have an invalid format.
- (BOOL)launchWithActivationCode:(NSString * _Nonnull)activationCode phoneNumber:(NSString * _Nullable)phoneNumber error:(NSError * _Nullable * _Nullable)error;
/// Launches wallet provisioning process through activation code mode, with a hex string activation identifier and code.
/// The provided activation code must be associated to a wallet already created on the backend platform
/// This method must be called once <code>WalletProvisioning</code> object initialization is properly done.
/// <code>WalletProvisioning</code> initialization success is notified through <code>WalletProvisioningProtocol.onInitializationSuccess()</code>.
/// The completion of the provisioning is notified through <code>WalletProvisioningProtocol</code>:
/// seealso:
/// <code>WalletProvisioning.initialize()</code>
/// <ul>
///   <li>
///     <code>WalletProvisioningProtocol.onProvisioningPending()</code> is called after the initialization and before the authentication
///   </li>
///   <li>
///     <code>WalletProvisioningProtocol.onProvisioningSuccess()</code> is called in case of success.
///   </li>
///   <li>
///     <code>WalletProvisioningProtocol.onProvisioningError(error: AntelopError)</code> is called in case of failure.
///   </li>
/// </ul>
/// \param issuerActivationId The byte array representing the activation identifier of a wallet created on the backend platform. issuerActivationId must contain between 0 and 1024 byte.
///
/// \param activationCode The byte array representing the activation code of a wallet created on the backend platform. issuerActivationId must contain between 0 and 1024 byte.
///
/// \param phoneNumber An optional phone number associated to the wallet to be created.
/// <code>phoneNumber</code> must start with a “+” and must contain between 6 and 15 digits (<a href="https://en.wikipedia.org/wiki/E.164">E.164 format</a>).
///
///
/// throws:
/// <code>WalletValidationError</code> if one of the provided parameters have an invalid format.
- (BOOL)launchWithIssuerActivationId:(NSString * _Nonnull)issuerActivationId activationCode:(NSString * _Nonnull)activationCode phoneNumber:(NSString * _Nullable)phoneNumber error:(NSError * _Nullable * _Nullable)error SWIFT_DEPRECATED_MSG("Use launch(issuerActivationId:, issuerActivationCode:, phoneNumber:) instead");
/// Launches wallet provisioning process through activation code mode, with a hex string activation identifier and code.
/// The provided activation code must be associated to a wallet already created on the backend platform
/// This method must be called once <code>WalletProvisioning</code> object initialization is properly done.
/// <code>WalletProvisioning</code> initialization success is notified through <code>WalletProvisioningProtocol.onInitializationSuccess()</code>.
/// The completion of the provisioning is notified through <code>WalletProvisioningProtocol</code>:
/// seealso:
/// <code>WalletProvisioning.initialize()</code>
/// <ul>
///   <li>
///     <code>WalletProvisioningProtocol.onProvisioningPending()</code> is called after the initialization and before the authentication
///   </li>
///   <li>
///     <code>WalletProvisioningProtocol.onProvisioningSuccess()</code> is called in case of success.
///   </li>
///   <li>
///     <code>WalletProvisioningProtocol.onProvisioningError(error: AntelopError)</code> is called in case of failure.
///   </li>
/// </ul>
/// \param issuerActivationId The byte array representing the activation identifier of a wallet created on the backend platform. issuerActivationId must contain between 0 and 1024 byte.
///
/// \param activationCode The byte array representing the activation code of a wallet created on the backend platform. issuerActivationId must contain between 0 and 1024 byte.
///
/// \param phoneNumber An optional phone number associated to the wallet to be created.
/// <code>phoneNumber</code> must start with a “+” and must contain between 6 and 15 digits (<a href="https://en.wikipedia.org/wiki/E.164">E.164 format</a>).
///
///
/// throws:
/// <code>WalletValidationError</code> if one of the provided parameters have an invalid format.
- (BOOL)launchWithIssuerActivationId:(NSString * _Nonnull)issuerActivationId issuerActivationCode:(NSString * _Nonnull)issuerActivationCode phoneNumber:(NSString * _Nullable)phoneNumber error:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
#ifndef ANTELOPSDK_SWIFT_H
#define ANTELOPSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AntelopSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class UIApplication;
@class NSNumber;
@class NSData;

/// <ul>
///   <li>
///     This class is the main entry point of the FrameWork.
///   </li>
///   <li>
///     You have to link your AppDelegate with methods of this class because you may need some triggers, but we need also theses triggers.
///   </li>
///   <li>
///     We expose functions that they have the same signature of AppDelegate in order to be clear on how-to use them
///   </li>
///   <li>
///     Be sure you never try to create your own instance and use <code>AntelopAppDelegate.shared</code> instead
///   </li>
/// </ul>
SWIFT_CLASS("_TtC10AntelopSDK18AntelopAppDelegate")
@interface AntelopAppDelegate : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// <ul>
///   <li>
///     Public singleton instance - Be sure you always use this instance by using the following pattern
///   </li>
///   <li>
///     <code>AntelopAppDelegate.shared</code>
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AntelopAppDelegate * _Nonnull shared;)
+ (AntelopAppDelegate * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// This method must be called on <code>didFinishLaunchingWithOptions</code> function from AppDelegate
/// This method is called when app is launched for the first time in app lifecycle
/// \param application the UIApplication param from the initial method
///
/// \param launchOptions The <code>[UIApplication.LaunchOptionsKey: Any]?</code> as they defined from initial method
///
- (BOOL)application:(UIApplication * _Nonnull)application didFinishLaunchingWithOptions:(NSDictionary<UIApplicationLaunchOptionsKey, id> * _Nullable)launchOptions;
- (void)willResignActiveNotification:(UIApplication * _Nonnull)application;
/// This method must be called on <code>applicationDidBecomeActive</code> function form AppDelegate
/// This method is called when application is now in foreground mode
/// \param application the <code>UIApplication</code> param from the initial method
///
- (void)applicationDidBecomeActive:(UIApplication * _Nonnull)application;
/// This method must be called on <code>applicationWillTerminate</code> function form AppDelegate
/// This method is called when application is about to terminate
/// \param application the <code>UIApplication</code> param from the initial method
///
- (void)applicationWillTerminate:(UIApplication * _Nonnull)application;
/// This method must be called on <code>applicationDidEnterBackground</code> function form AppDelegate
/// This method is called when application is about to enter in background
/// \param application the <code>UIApplication</code> param from the initial method
///
- (void)applicationDidEnterBackground:(UIApplication * _Nonnull)application;
/// This method must be called on <code>didRegisterForRemoteNotificationsWithDeviceToken</code> function from AppDelegate
/// This method is called by AppDelegate when you successfuly register to APNS
/// \param application the <code>UIApplication</code> param from the initial method
///
/// \param deviceToken the “deviceToken” (<code>Data</code>) param from the initial method
///
- (void)application:(UIApplication * _Nonnull)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData * _Nonnull)deviceToken;
/// This method must be called on <code>didReceiveRemoteNotification</code> function from AppDelegate
/// This method is called by AppDelegate when a remote notification is received by device
/// \param application the <code>UIApplication</code> param from the initial method
///
/// \param userInfo the <code>[AnyHashable: Any]</code> param from the initial method
///
/// \param completionHandler the <code>(UIBackgroundFetchResult) -> Void</code> param from the initial method
///
- (void)application:(UIApplication * _Nonnull)application didReceiveRemoteNotification:(NSDictionary * _Nonnull)userInfo fetchCompletionHandler:(void (^ _Nonnull)(UIBackgroundFetchResult))completionHandler SWIFT_DEPRECATED_MSG("Use didReceiveRemoteNotification(_ userInfo: [AnyHashable: Any], fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void) instead.");
/// This method must be called from the <code>didReceiveRemoteNotification</code> function of the App Delegate
/// when a remote notification is received by the device.
/// This method returns a Bool indicating whether notification has been handled by the Antelop SDK or not.
/// If the method returns <em>true</em>, the SDK handled the notification, it will take the responsability of invoking <code>completionHandler</code>,
/// and app must not invoke it itself.
/// However, if the method returns <em>false</em>, the app integrating the SDK must proceed the notification and is responsible for calling the <code>completionHandler</code>.
/// \param userInfo the <code>[AnyHashable: Any]</code> param from the initial method
///
/// \param completionHandler the <code>(UIBackgroundFetchResult) -> Void</code> param from the initial method
///
///
/// returns:
/// A <em>Bool</em> indicating whether notification has been handled by the Antelop SDK or not.
- (BOOL)didReceiveRemoteNotification:(NSDictionary * _Nonnull)userInfo fetchCompletionHandler:(void (^ _Nonnull)(UIBackgroundFetchResult))completionHandler SWIFT_WARN_UNUSED_RESULT;
/// This method must be called on <code>performFetchWithCompletionHandler</code> function from AppDelegate
/// This method is called by AppDelegate on background refresh
/// \param application the <code>UIApplication</code> param from the initial method
///
/// \param completionHandler the <code>(UIBackgroundFetchResult) -> Void)</code> param the inital method
///
- (void)application:(UIApplication * _Nonnull)application performFetchWithCompletionHandler:(void (^ _Nonnull)(UIBackgroundFetchResult))completionHandler;
@end


/// This error enum list all the possible AntelopSDK errors.
typedef SWIFT_ENUM(NSInteger, AntelopError, open) {
/// Generic error reported when an internal technical error occurs.
  AntelopErrorInternal = 0,
/// The background refresh is not available
  AntelopErrorBackgroundRefreshNotAvailable = 1,
/// The user don t accept push notification service
  AntelopErrorPushNotificationNotAvailable = 2,
/// The SDK does not have the APNs token
  AntelopErrorMissingApnsToken = 3,
/// The <code>Antelop.plist</code> file could not be found in the main Bundle.
  AntelopErrorCouldNotFindAntelopPlistFile = 4,
/// ApplicationId Int (<code>fr.antelop.application_id</code>) is missing in <code>Antelop.plist</code>.
  AntelopErrorMissingApplicationIdInAntelopPlistFile = 5,
/// The operation has failed because network is not available.
  AntelopErrorNetworkNotAvailable = 6,
/// The operation has failed because of a network issue.
  AntelopErrorNetworkIssue = 7,
/// Generic error code reported when Antelop wallet provisioning fails because none of the <code>Product</code> items offered is allowed for the application.
  AntelopErrorNoProductAllowed = 8,
/// Generic error code reported when the activation of the wallet is required
  AntelopErrorActivationRequired = 9,
/// Generic error reported if wallet status is not “connected - ready to use”
  AntelopErrorWalletNotActivated = 10,
/// Generic error code reported when the wallet is deleted.
  AntelopErrorWalletDeleted = 11,
/// Generic error code reported when the wallet is locked thus nothing can be done before an unlock.
  AntelopErrorWalletLocked = 12,
/// Generic error code reported when a management operation fails because the customer has provided wrong credentials when authenticating.
  AntelopErrorInvalidCredentials = 13,
/// Local Authentication: the user cancelled
  AntelopErrorLocalAuthenticationCancelled = 14,
/// Local Authentication: the user failed to provide valid credentials.
  AntelopErrorLocalAuthenticationUserNotRecognized = 15,
/// Local Authentication: the user has selected the fallback authentication mechanism.
  AntelopErrorLocalAuthenticationUserFallback = 16,
/// Local Authentication: the device does not support biometric authentication.
  AntelopErrorLocalAuthenticationBiometryNotAvailable = 17,
/// Local Authentication: the user has not enrolled in biometric authentiation.
  AntelopErrorLocalAuthenticationBiometryNotEnrolled = 18,
/// Local Authentication: the user has been locked out of biometric authentication, due to failing authentication too many times.
  AntelopErrorLocalAuthenticationBiometryLockout = 19,
/// Local Authentication: the user has been locked out of PIN authentication, due to failing authentication too many times.
  AntelopErrorLocalAuthenticationPinLockout = 20,
/// Requested authentication pattern is unknown (not recongnized).
  AntelopErrorAuthenticationPatternUnknown = 21,
/// Requested authentication pattern has been cancelled.
  AntelopErrorAuthenticationPatternCancelled = 22,
/// Requested authentication pattern failed
  AntelopErrorAuthenticationPatternFailed = 23,
/// Requested authentication method is unknown (not recognized)
  AntelopErrorAuthenticationMethodUnknown = 24,
/// Requested authentication method has been cancelled.
  AntelopErrorAuthenticationMethodCancelled = 25,
/// Requested authentication method fallback mechanism.
  AntelopErrorAuthenticationMethodFallback = 26,
/// Requested authentication method has failed.
  AntelopErrorAuthenticationMethodFailed = 27,
/// Local authentication pattern failed
  AntelopErrorAuthenticationFailed = 28,
/// Strong customer authentication process error code reported when an authentication is refused because it has been cancelled from backend
  AntelopErrorScaCancelledFromBackend = 29,
/// Strong customer authentication process error code reported when an authentication is refused because the its has already been performed
  AntelopErrorScaDuplicated = 30,
/// Strong customer authentication process error code reported when an authentication is refused because it took too much time to be run
  AntelopErrorScaTimeout = 31,
/// Local authentication pattern internal error
  AntelopErrorAuthenticationInternalError = 32,
/// Local authentication not possible due to bad status or bad method usage :
/// ex : CLOUD_PIN is the only one method for a step in a pattern
  AntelopErrorCustomerAuthenticationImpossible = 33,
/// Local authentication is currently running - cannot sign another data
  AntelopErrorAuthenticationOnGoingOperation = 34,
/// Management error code reported when a one-time activation code submitted by customer is expired
  AntelopErrorExpiredActivationCode = 35,
/// Management error code reported when a one-time activation code submitted by customer is invalid
  AntelopErrorInvalidActivationCode = 36,
/// Management error code reported when a one-time activation code submitted by customer is locked
  AntelopErrorLockedActivationCode = 37,
/// Management error code reported when a one-time activation code submitted has already been used
  AntelopErrorAlreadyUsedActivationCode = 38,
/// Digital card already pushed
  AntelopErrorDigitalCardAlreadyPushed = 39,
/// The operation has been cancelled by the user
  AntelopErrorUserCancelled = 40,
/// The operation has failed because the targeted Card is locked
  AntelopErrorCardLocked = 41,
/// The operation has failed because the targeted Card is deleted
  AntelopErrorCardDeleted = 42,
/// Management error code reported when an online operation is refused from backend server.
  AntelopErrorOperationRefused = 43,
/// The Issuer Id is not defined in the plist file or in the SDK.
  AntelopErrorIssuerIdNotDefined = 44,
/// The operation has failed because the integrity of the application cannot be verified.
  AntelopErrorAppIntegrityCheckFailed = 45,
};
static NSString * _Nonnull const AntelopErrorDomain = @"AntelopSDK.AntelopError";

@class NSString;

SWIFT_CLASS("_TtC10AntelopSDK18AntelopErrorHelper")
@interface AntelopErrorHelper : NSObject
/// Returns a string representation of an AntelopError.
/// Only for an ObjC project, otherwise prefere the AntelopError#getCode() function.
/// \param error AntelopError
///
///
/// returns:
/// a string representation of an AntelopError.
+ (NSString * _Nonnull)getCodeWithError:(enum AntelopError)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ApplePayTokenLocation, open) {
  ApplePayTokenLocationCurrentDevice = 0,
  ApplePayTokenLocationRemotePairedDevice = 1,
};

/// Enum for callbacks <code>WalletManagerProtocol</code>
/// <code>onAsyncRequestError</code>
/// <code>onAsyncRequestSuccess</code>
typedef SWIFT_ENUM(NSInteger, AsyncRequestType, open) {
  AsyncRequestTypeLogout = 0,
  AsyncRequestTypeLock = 1,
  AsyncRequestTypeDelete = 2,
  AsyncRequestTypeCheckCredentials = 3,
  AsyncRequestTypeChangeCredentials = 4,
  AsyncRequestTypeActivateAuthenticationMethod = 5,
  AsyncRequestTypeDeactivateAuthenticationMethod = 6,
  AsyncRequestTypeSynchronizeAuthenticationMethod = 7,
};

/// Object
typedef SWIFT_ENUM(NSInteger, CancellationReason, open) {
  CancellationReasonCancelledBySender = 0,
  CancellationReasonOtherResponded = 1,
};


SWIFT_CLASS("_TtC10AntelopSDK18CancellationSignal")
@interface CancellationSignal : NSObject
- (void)cancel;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// This enum lists all the possible status of an Card. The status of a Card indicates if it can be used to perform transactions.
/// The following CardStatus items are defined:
/// Active when the Card is active.
/// Locked when the Card is locked.
/// ActivationRequired when the Card is not yet active because it must be explicitly activated by customer first.
/// Activating when the Card is activating.
/// See Also:
/// EmvApplication
typedef SWIFT_ENUM(NSInteger, CardStatus, open) {
/// The Card is activating.
  CardStatusActivating = 0,
/// The Card is not usable, because its activation went wrong
  CardStatusActivationRefused = 1,
/// The Card is not yet active because it must be explicitly activated by customer first.
  CardStatusActivationRequired = 2,
/// The Card is active.
  CardStatusActive = 3,
/// The Card is locked.
  CardStatusLocked = 4,
/// The Card is not usable, because the terms and conditions validation is required
  CardStatusTermsAndConditionsValidationRequired = 5,
};


/// :nodoc:
SWIFT_CLASS("_TtC10AntelopSDK11Credentials")
@interface Credentials : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


enum SignatureType : NSInteger;

/// Class to handle an offline JWS with
/// <ul>
///   <li>
///     a default mode : Framework will prompt internal views and handle Credentials
///   </li>
///   <li>
///     a custom mode : Framework helps you with events to create an authenticate process
///   </li>
/// </ul>
SWIFT_CLASS("_TtC10AntelopSDK30CustomerAuthenticatedSignature")
@interface CustomerAuthenticatedSignature : NSObject
/// Create an instance to generate a JWT Token
/// \param patternName the name of the pattern, should be existing in back-office, and device can execute this pattern
///
/// \param signatureInputData The content to be signed, as String
///
/// \param message The input message which be presented through prompt views (in default mode)
///
- (nonnull instancetype)initWithPatternName:(NSString * _Nonnull)patternName signatureInputData:(NSString * _Nonnull)signatureInputData signatureType:(enum SignatureType)signatureType message:(NSString * _Nullable)message OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use init(String:Data:SignatureType:String?) instead");
/// Create an instance to generate a JWT Token
/// \param patternName the name of the pattern, should be existing in back-office, and device can execute this pattern
///
/// \param signatureInputData The content to be signed, as Data
///
/// \param message The input message which be presented through prompt views (in default mode)
///
- (nonnull instancetype)patternName:(NSString * _Nonnull)patternName signatureInputData:(NSData * _Nonnull)signatureInputData signatureType:(enum SignatureType)signatureType message:(NSString * _Nullable)message OBJC_DESIGNATED_INITIALIZER SWIFT_METHOD_FAMILY(init);
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface CustomerAuthenticatedSignature (SWIFT_EXTENSION(AntelopSDK))
/// Return the data to be signed
- (NSString * _Nullable)getInputData SWIFT_WARN_UNUSED_RESULT;
/// This method return an encoded JWT Token.
/// This method should be used only when you get an <code>onProcessSuccess</code>event (avaliable in <code>DefaultCustomerAuthenticatedProcessProtocol</code> and <code>CustomCustomerAuthenticatedProcessProtocol</code>
///
/// returns:
/// a String representation of the encoded JWT - could be nil
- (NSString * _Nullable)getResult SWIFT_WARN_UNUSED_RESULT;
@end


@interface CustomerAuthenticatedSignature (SWIFT_EXTENSION(AntelopSDK))
/// Return the name of the authentication pattern
- (NSString * _Nonnull)getAuthenticationPatternName SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isOnline SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getMessage SWIFT_WARN_UNUSED_RESULT;
- (void)setOnlineAuthentication:(BOOL)onlineAuthentication;
@end

@class NSMutableData;

/// Class to handle credentials as Issuer Passcode - Passcode verification handled by Issuer
SWIFT_CLASS("_TtC10AntelopSDK36CustomerAuthenticationIssuerPasscode")
@interface CustomerAuthenticationIssuerPasscode : Credentials
/// \param passcode The passcode entered by the customer.
///
/// \param cryptogram The cryptogram to be presented to Issuer information system for validation. Its size cannot exceed 8192 bytes
///
/// \param cryptogramData Optional data to be presented along with the cryptogram to Issuer information. Its size cannot exceed 1024 bytes
///
- (nonnull instancetype)initWithPasscode:(NSMutableData * _Nonnull)passcode cryptogram:(NSMutableData * _Nullable)cryptogram cryptogramData:(NSMutableData * _Nullable)cryptogramData OBJC_DESIGNATED_INITIALIZER;
/// \param passcode The passcode entered by the customer.
///
/// \param cryptogram The cryptogram to be presented to Issuer information system for validation. Its size cannot exceed 8192 bytes
///
/// \param cryptogramData Optional data to be presented along with the cryptogram to Issuer information. Its size cannot exceed 1024 bytes
///
- (nonnull instancetype)passcode:(NSMutableData * _Nonnull)passcode cryptogram:(NSMutableData * _Nonnull)cryptogram cryptogramData:(NSMutableData * _Nullable)cryptogramData OBJC_DESIGNATED_INITIALIZER SWIFT_METHOD_FAMILY(init);
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




typedef SWIFT_ENUM(NSInteger, CustomerAuthenticationMethodStatus, open) {
/// Not supported by the device. Thus it cannot be used to authenticate customer and nothing can be done to get it supported.
  CustomerAuthenticationMethodStatusNotSupported = 0,
/// Not yet configured on the device. It must first be configured on device OS settings and then activated before it can be used to authenticate customer.
  CustomerAuthenticationMethodStatusNotConfigured = 1,
/// Configured but not activated. It must first be activated before it can be used to authenticate customer.
  CustomerAuthenticationMethodStatusConfigured = 2,
/// Activated, it can be used to authenticate the customer.
  CustomerAuthenticationMethodStatusActivated = 3,
};

/// This enums list the possible types of a customer authentication method.
typedef SWIFT_ENUM(NSInteger, CustomerAuthenticationMethodType, open) {
/// No authentication.
  CustomerAuthenticationMethodTypeNone = 0,
/// Customer consent authentication method
  CustomerAuthenticationMethodTypeConsent = 1,
/// Pin authentication method
  CustomerAuthenticationMethodTypePin = 2,
/// Biometric authentication method
  CustomerAuthenticationMethodTypeDeviceBiometric = 3,
};

typedef SWIFT_ENUM(NSInteger, CustomerAuthenticationMethodUsage, open) {
/// Wallet Management
  CustomerAuthenticationMethodUsageWalletManagement = 0,
/// Strong Customer Authentication
  CustomerAuthenticationMethodUsageSca = 1,
/// Digital Card
  CustomerAuthenticationMethodUsageDigitalCard = 2,
};


/// Class to handle credentials as Issuer Passcode - Passcode verification handled by Antelop services
SWIFT_CLASS("_TtC10AntelopSDK30CustomerAuthenticationPasscode")
@interface CustomerAuthenticationPasscode : Credentials
- (nonnull instancetype)initWithPasscode:(NSMutableData * _Nonnull)passcode OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// :nodoc:
/// This is the default object to configure layout and values in different prompt views.
SWIFT_CLASS("_TtC10AntelopSDK28CustomerAuthenticationPrompt")
@interface CustomerAuthenticationPrompt : NSObject
/// :nodoc:
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class represents a builder that collects the properties of a <code>CustomerAuthenticationPrompt</code>.
/// Each <code>CustomerAuthenticationPrompt</code> has its own way to prompt customer depending on its
/// <code>CustomerAuthenticationMethodType</code>, for example a
/// <code>CustomerAuthenticationMethod</code> with a type set to <code>CustomerAuthenticationMethodType.deviceBiometric</code>
/// displays a system provided dialog whereas a <code>CustomerAuthenticationMethod</code> with a type set to <code>CustomerAuthenticationMethodType.pin</code>
/// displays a keyboard with digits.
/// Thus, authentication prompts change from one <code>CustomerAuthenticationMethodType</code> to another, and only builders from a specific sub class
/// of <code>CustomerAuthenticationPromptBuilder</code> can be used to build a <code>CustomerAuthenticationPrompt</code> for authenticating customer with a
/// <code>CustomerAuthenticationMethod</code> of a given <code>CustomerAuthenticationMethodType</code>.
/// Here is the mapping between the <code>CustomerAuthenticationMethodType</code> items and the <code>CustomerAuthenticationPromptBuilder</code> associated sub classes .
/// Method with type set to <code>CustomerAuthenticationMethodType.pin</code> must prompt customer using <code>CustomerAuthenticationPrompt</code>
/// objects build from a <code>PinCustomerAuthenticationPromptBuilder</code>.
/// Method with type set to <code>CustomerAuthenticationMethodType.deviceBiometric</code> must prompt customer using <code>CustomerAuthenticationPrompt</code>
/// objects build from a <code>DeviceBiometricCustomerAuthenticationPromptBuilder</code>.
/// Method with type set to <code>CustomerAuthenticationMethodType.consent</code> must prompt customer using <code>CustomerAuthenticationPrompt</code>
/// objects build from a <code>CustomerConsentPromptBuilder</code>.
SWIFT_CLASS("_TtC10AntelopSDK35CustomerAuthenticationPromptBuilder")
@interface CustomerAuthenticationPromptBuilder : NSObject
- (CustomerAuthenticationPrompt * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Class to provide “CONSENT” credentials throught SCA when “.consent” method type is required
SWIFT_CLASS("_TtC10AntelopSDK26CustomerConsentCredentials")
@interface CustomerConsentCredentials : Credentials
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Prompt view configuration for “.consent” type
SWIFT_CLASS("_TtC10AntelopSDK21CustomerConsentPrompt")
@interface CustomerConsentPrompt : CustomerAuthenticationPrompt
@end

@class UIViewController;

@interface CustomerConsentPrompt (SWIFT_EXTENSION(AntelopSDK))
/// returns the View Controller from which the prompt should be presented
///
/// returns:
/// the View Controller from which the prompt should be presented
- (UIViewController * _Nullable)getPresentingViewController SWIFT_WARN_UNUSED_RESULT;
/// returns prompt title
///
/// returns:
/// prompt title
- (NSString * _Nullable)getTitle SWIFT_WARN_UNUSED_RESULT;
/// Returns the text in body of “alert” view
///
/// returns:
/// the text in body of “alert” view
- (NSString * _Nullable)getBody SWIFT_WARN_UNUSED_RESULT;
/// Returns the text for “cancel” button
///
/// returns:
/// the text for “cancel” button
- (NSString * _Nullable)getCancel SWIFT_WARN_UNUSED_RESULT;
/// Returns the text for “confirm” button
///
/// returns:
/// the text for “confirm” button
- (NSString * _Nullable)getConfirm SWIFT_WARN_UNUSED_RESULT;
@end


@interface CustomerConsentPrompt (SWIFT_EXTENSION(AntelopSDK))
/// Title of prompt.
/// In some case, this could be the message of the prompt
@property (nonatomic, readonly, copy) NSString * _Nullable title;
/// The text in body of “alert” view
@property (nonatomic, readonly, copy) NSString * _Nullable body;
/// The text for “cancel” button
@property (nonatomic, readonly, copy) NSString * _Nullable cancel;
/// The  text for “confirm” button
@property (nonatomic, readonly, copy) NSString * _Nullable confirm;
@end


/// This class represents a <code>CustomerAuthenticationPromptBuilder</code> that collects the display properties of the prompt associated to
/// a <code>CustomerAuthenticationMethod</code> with a type set to <code>CustomerAuthenticationMethodType.consent</code>.
SWIFT_CLASS("_TtC10AntelopSDK28CustomerConsentPromptBuilder")
@interface CustomerConsentPromptBuilder : CustomerAuthenticationPromptBuilder
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Sets the View Controller from which the Consent Authentication Prompt will be presented
/// \param presentingViewController the View Controller from which the Consent Authentication Prompt will be presented
///
///
/// returns:
/// the <code>CustomerConsentPromptBuilder</code>
- (CustomerConsentPromptBuilder * _Nonnull)setPresentingViewController:(UIViewController * _Nonnull)presentingViewController;
/// Sets the title of the pin authentication prompt.
/// \param title The title to set in the pin authentication prompt
///
///
/// returns:
/// the <code>PinCustomerAuthenticationPromptBuilder</code>
- (CustomerConsentPromptBuilder * _Nonnull)setTitleWithTitle:(NSString * _Nullable)title;
/// Sets the subtitle of the pin authentication prompt.
/// \param subtitle The subtitle to set in the pin authentication prompt
///
///
/// returns:
/// the <code>PinCustomerAuthenticationPromptBuilder</code>
- (CustomerConsentPromptBuilder * _Nonnull)setBodyWithBody:(NSString * _Nullable)body;
/// Sets the subtitle of the pin authentication prompt.
/// \param cancel The title of the Cancel button to set in the pin authentication prompt
///
///
/// returns:
/// the <code>PinCustomerAuthenticationPromptBuilder</code>
- (CustomerConsentPromptBuilder * _Nonnull)setCancelWithCancel:(NSString * _Nullable)cancel;
/// Sets the subtitle of the pin authentication prompt.
/// \param confirm The title of the Confirm button to set in the pin authentication prompt
///
///
/// returns:
/// the <code>PinCustomerAuthenticationPromptBuilder</code>
- (CustomerConsentPromptBuilder * _Nonnull)setConfirmWithConfirm:(NSString * _Nullable)confirm;
- (CustomerConsentPrompt * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
@end

/// This enum lists the possible reasons for a <code>WalletManager.connect()</code> to require credentials.
typedef SWIFT_ENUM(NSInteger, CustomerCredentialsRequiredReason, open) {
/// Customer has to authenticate in order to access to wallet services.
/// The credentials must be validated using <code>WalletManager.connect(currentPasscode:)</code>
  CustomerCredentialsRequiredReasonValidationNeeded = 0,
/// The credentials must be set using <code>WalletManager.connect(newPasscode:)</code>
  CustomerCredentialsRequiredReasonNotSet = 1,
/// The credentials must be changed using <code>WalletManager.connect(currentPasscode:newPasscode:)</code>
  CustomerCredentialsRequiredReasonToBeChanged = 2,
};

@class LAContext;

/// Class to provide “DEVICE_BIOMETRIC” credentials throught SCA when “.deviceBiometric” method type is required
SWIFT_CLASS("_TtC10AntelopSDK48CustomerDeviceBiometricAuthenticationCredentials")
@interface CustomerDeviceBiometricAuthenticationCredentials : Credentials
- (nonnull instancetype)initWithContext:(LAContext * _Nonnull)context OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Prompt view configuration for “.deviceBiometric” type
SWIFT_CLASS("_TtC10AntelopSDK43DeviceBiometricCustomerAuthenticationPrompt")
@interface DeviceBiometricCustomerAuthenticationPrompt : CustomerAuthenticationPrompt
@end


@interface DeviceBiometricCustomerAuthenticationPrompt (SWIFT_EXTENSION(AntelopSDK))
/// returns prompt title
///
/// returns:
/// prompt title
- (NSString * _Nullable)getTitle SWIFT_WARN_UNUSED_RESULT;
@end


@interface DeviceBiometricCustomerAuthenticationPrompt (SWIFT_EXTENSION(AntelopSDK))
/// Title of prompt.
/// In some case, this could be the message of the prompt
@property (nonatomic, readonly, copy) NSString * _Nullable title;
@end


/// This class represents a <code>CustomerAuthenticationPrompt</code> that collects the display properties of the prompt associated to
/// a <code>CustomerAuthenticationMethod</code> with a type set to <code>CustomerAuthenticationMethodType.deviceBiometric</code>.
SWIFT_CLASS("_TtC10AntelopSDK50DeviceBiometricCustomerAuthenticationPromptBuilder")
@interface DeviceBiometricCustomerAuthenticationPromptBuilder : CustomerAuthenticationPromptBuilder
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Sets the title of the pin authentication prompt.
/// \param title The title to set in the pin authentication prompt
///
///
/// returns:
/// the <code>DeviceBiometricCustomerAuthenticationPromptBuilder</code>
- (DeviceBiometricCustomerAuthenticationPromptBuilder * _Nonnull)setTitleWithTitle:(NSString * _Nullable)title;
- (DeviceBiometricCustomerAuthenticationPrompt * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
@end

/// This enum represents the status of a DigitalCard Service
typedef SWIFT_ENUM(NSInteger, DigitalCardServiceStatus, open) {
/// Digital Card service is active
  DigitalCardServiceStatusActive = 0,
/// Digital Card service is not enabled
  DigitalCardServiceStatusDisabled = 1,
/// Digital Card service is active but not configured
  DigitalCardServiceStatusNotConfiguredByUser = 2,
/// Digital Card service is not supported by the device
  DigitalCardServiceStatusNotSupportedByDevice = 3,
};


typedef SWIFT_ENUM(NSInteger, DisplayType, open) {
  DisplayTypeCardDetails = 0,
  DisplayTypePinCode = 1,
};

/// This enum lists the possible reasons for a device not to be eligible to run Antelop products.
typedef SWIFT_ENUM(NSInteger, EligibilityDenialReason, open) {
/// The Operating System of the device is not supported by Antelop wallet service.
  EligibilityDenialReasonOsNotSupported = 0,
/// iOS version of the device is not supported by the Antelop wallet service.
/// Today the minimum supported version is iOS 10.3
  EligibilityDenialReasonOsVersionNotSupported = 1,
/// The device has no telephony support.
/// Antelop wallet service cannot run without telephony support as it is involved in device fingerprinting.
/// Devices such as tablets do not have telephony support.
  EligibilityDenialReasonNoTelephony = 2,
/// The device does not support Near Field Communication (NFC) technology.
  EligibilityDenialReasonNfcNotSupported = 3,
/// The current device is not allowed by the Issuer to run Antelop products.
  EligibilityDenialReasonDeviceNotAllowed = 4,
/// The current device model with the current device version is no more allowed by the Issuer to run Antelop products.
  EligibilityDenialReasonDeviceSupportExpired = 5,
/// The device is rooted and rooted devices are not allowed by the Issuer to run Antelop products.
  EligibilityDenialReasonRootNotAllowed = 6,
/// The Antelop product is not supported by the sdk.
  EligibilityDenialReasonProductNotSupportedBySdk = 7,
};

typedef SWIFT_ENUM(NSInteger, EmvApplicationFormat, open) {
  EmvApplicationFormatDigitalCard = 0,
};

typedef SWIFT_ENUM(NSInteger, EmvApplicationStatus, open) {
  EmvApplicationStatusActive = 0,
  EmvApplicationStatusLocked = 1,
  EmvApplicationStatusDeleted = 2,
  EmvApplicationStatusActivationRequired = 3,
  EmvApplicationStatusActivating = 4,
  EmvApplicationStatusActivationRefused = 5,
};


SWIFT_CLASS("_TtC10AntelopSDK13LocaleManager")
@interface LocaleManager : NSObject
/// This method can be called from AppDelegate’s singleton instance
/// This method sets the sdk language parameter wich will affect the language displayed
/// in the screens returned by the SDK
/// \param locale the <code>String</code> language identifier code
///
- (void)applyLocaleTo:(NSString * _Nonnull)locale;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// This enum lists the possible reasons for a wallet to be locked.
/// It covers both the reasons for a customer to lock his/her own wallet and the reasons for an issuer to lock a given wallet.
typedef SWIFT_ENUM(NSInteger, LockReason, open) {
/// The customer suspects that a fraudulent use of his/her wallet has been made.
/// This value can be used as an input argument when calling the method <code>WalletManager.lock(_:)</code>
  LockReasonFraudulentUseSuspected = 0,
/// The customer does not want to use Antelop wallet service anymore.
/// This value can be used as an input argument when calling the method <code>WalletManager.lock(_:)</code>
  LockReasonStopService = 1,
/// The issuer has locked the wallet because the maximum number of failed authentication attempts with the strongest CustomerAuthenticationMethod of the wallet has been reached.
/// This value must not be used when calling the method WalletManager#lock(WalletLockReason) otherwise an WalletValidationError is thrown
  LockReasonStrongestCvmAttemptCountExceeded = 2,
/// The issuer has locked the wallet for an undefined reason.
/// This value must not be used when calling the method  <code>WalletManager.lock(_:)</code> otherwise an <code>AntelopError</code> is thrown
  LockReasonOtherReason = 3,
};

typedef SWIFT_ENUM(NSInteger, ManageTokenRequestAction, open) {
  ManageTokenRequestActionResume = 0,
  ManageTokenRequestActionSuspend = 1,
  ManageTokenRequestActionDelete = 2,
};

typedef SWIFT_ENUM(NSInteger, ManageVcnRequestAction, open) {
  ManageVcnRequestActionResume = 0,
  ManageVcnRequestActionSuspend = 1,
  ManageVcnRequestActionDelete = 2,
};








/// This struct is used to customize layout for PinPasscode view
/// You can custom all parameters you need, and omit some.
/// Refer to documentation to see default values
SWIFT_CLASS("_TtC10AntelopSDK31PinCustomerAuthenticationPrompt")
@interface PinCustomerAuthenticationPrompt : CustomerAuthenticationPrompt
@end

@class UIImage;
@class UIColor;

@interface PinCustomerAuthenticationPrompt (SWIFT_EXTENSION(AntelopSDK))
/// returns the View Controller from which the prompt should be presented
///
/// returns:
/// the View Controller from which the prompt should be presented
- (UIViewController * _Nullable)getPresentingViewController SWIFT_WARN_UNUSED_RESULT;
/// returns prompt title
///
/// returns:
/// prompt title
- (NSString * _Nullable)getTitle SWIFT_WARN_UNUSED_RESULT;
/// returns prompt subtitle
///
/// returns:
/// prompt subtitle
- (NSString * _Nullable)getSubtitle SWIFT_WARN_UNUSED_RESULT;
/// returns an <code>UIImage</code> instance for “close” button - The image will be colorized with “primary” color - size : 36x36
///
/// returns:
/// the image for close button
- (UIImage * _Nullable)getCloseImage SWIFT_WARN_UNUSED_RESULT;
/// An <code>UIImage</code> instance for “delete last number” button - The image will be colorized with “primary” color - size : 44x44
/// Delete button is placed on the bottom right keypad - visible only when there is at least one number tapped
///
/// returns:
/// the image for the delete button
- (UIImage * _Nullable)getDeleteImage SWIFT_WARN_UNUSED_RESULT;
/// The format text for prompt error (default : “Invalid Pin, remaining attempt(s) : %lu”)
///
/// returns:
/// the format text for prompt error
- (NSString * _Nullable)getErrorTextFormat SWIFT_WARN_UNUSED_RESULT;
/// Defines the <code>UIColor</code>of the view background (default : “#404040”)
///
/// returns:
/// the view background color
- (UIColor * _Nullable)getBackgroundColor SWIFT_WARN_UNUSED_RESULT;
/// Defines the <code>UIColor</code>of the “primary” color (texts, buttons, bullets, keyboard)  (default : “#FFFFFF”)
///
/// returns:
/// the “primary” color
- (UIColor * _Nullable)getPrimaryColor SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// the “secondary” color
- (UIColor * _Nullable)getSecondaryColor SWIFT_WARN_UNUSED_RESULT;
@end


@interface PinCustomerAuthenticationPrompt (SWIFT_EXTENSION(AntelopSDK))
/// Title of prompt.
/// In some case, this could be the message of the prompt
@property (nonatomic, readonly, copy) NSString * _Nullable title;
/// Second title, 2 lines max, below the title (default : “Enter your pin”)
@property (nonatomic, readonly, copy) NSString * _Nullable subtitle;
/// An <code>UIImage</code> instance of image for “close” button - The image will be colorized with “primary” color - size : 36x36
@property (nonatomic, readonly, strong) UIImage * _Nullable closeImage;
/// An <code>UIImage</code> instance for “delete last number” button - The image will be colorized with “primary” color - size : 44x44
/// Delete button is placed on the bottom right keypad - visible only when there is at least one number tapped
@property (nonatomic, readonly, strong) UIImage * _Nullable deleteImage;
/// The format text for prompt error (default : “Invalid Pin, remaining attempt(s) : %lu”)
@property (nonatomic, readonly, copy) NSString * _Nullable errorTextFormat;
/// Defines the <code>UIColor</code>of the view background (default : “#404040”)
@property (nonatomic, readonly, strong) UIColor * _Nullable backgroundColor;
/// Defines the <code>UIColor</code>of the “primary” color (texts, buttons, bullets, keyboard)  (default : “#FFFFFF”)
@property (nonatomic, readonly, strong) UIColor * _Nullable primaryColor;
/// Define the <code>UIColor</code>of the “secondary” color (keyboard buttons background)  (default : “#FFFFFF”)
@property (nonatomic, readonly, strong) UIColor * _Nullable secondaryColor;
@end


/// This class represents a <code>CustomerAuthenticationPrompt</code> that collects the display properties of the prompt associated to
/// a <code>CustomerAuthenticationMethod</code> with a type set to <code>CustomerAuthenticationMethodType.pin</code>.
SWIFT_CLASS("_TtC10AntelopSDK38PinCustomerAuthenticationPromptBuilder")
@interface PinCustomerAuthenticationPromptBuilder : CustomerAuthenticationPromptBuilder
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Sets the View Controller from which the Pin Authentication Prompt will be presented
/// \param presentingViewController the View Controller from which the Pin Authentication Prompt will be presented
///
///
/// returns:
/// the <code>PinCustomerAuthenticationPromptBuilder</code>
- (PinCustomerAuthenticationPromptBuilder * _Nonnull)setPresentingViewController:(UIViewController * _Nonnull)presentingViewController;
/// Sets the title of the pin authentication prompt.
/// \param title The title to set in the pin authentication prompt
///
///
/// returns:
/// the <code>PinCustomerAuthenticationPromptBuilder</code>
- (PinCustomerAuthenticationPromptBuilder * _Nonnull)setTitle:(NSString * _Nullable)title;
/// Sets the subtitle of the pin authentication prompt.
/// \param subtitle The subtitle to set in the pin authentication prompt
///
///
/// returns:
/// the <code>PinCustomerAuthenticationPromptBuilder</code>
- (PinCustomerAuthenticationPromptBuilder * _Nonnull)setSubtitle:(NSString * _Nullable)subtitle;
/// Sets if pin checking by the prompt must be disabled or not
/// Disabling it can be useful for authentications that are checked anyway on backend side
/// \param pinCheckDisabled Whether the prompt must check Pin or not
///
///
/// returns:
/// the <code>PinCustomerAuthenticationPromptBuilder</code>
- (PinCustomerAuthenticationPromptBuilder * _Nonnull)setPinCheckDisabled:(BOOL)pinCheckDisabled;
/// Sets an <code>UIImage</code> instance for the “close” button - The image will be colorized with “primary” color - size : 36x36
/// \param closeImage the close image to set in the pin authentication prompt
///
///
/// returns:
/// the <code>PinCustomerAuthenticationPromptBuilder</code>
- (PinCustomerAuthenticationPromptBuilder * _Nonnull)setCloseImage:(UIImage * _Nullable)closeImage;
/// Sets an <code>UIImage</code> instance for the “delete last number” button - The image will be colorized with “primary” color - size : 44x44
/// \param deleteImage the image for the “delete last number” button
///
///
/// returns:
/// the <code>PinCustomerAuthenticationPromptBuilder</code>
- (PinCustomerAuthenticationPromptBuilder * _Nonnull)setDeleteImage:(UIImage * _Nullable)deleteImage;
/// Sets the format text for prompt error (default : “Invalid Pin, remaining attempt(s) : %d”)
/// \param errorTextFormat the format text for prompt error
///
///
/// returns:
/// the <code>PinCustomerAuthenticationPromptBuilder</code>
- (PinCustomerAuthenticationPromptBuilder * _Nonnull)setErrorTextFormat:(NSString * _Nullable)errorTextFormat;
/// Sets the value defining whether the close button is visible or not (default : true)
/// \param showCancel the value defining whether the close button is visible or not
///
///
/// returns:
/// the <code>PinCustomerAuthenticationPromptBuilder</code>
- (PinCustomerAuthenticationPromptBuilder * _Nonnull)setShowCancel:(BOOL)showCancel;
/// Sets the PIN length (default : 5)
/// \param pinSize the PIN length
///
///
/// returns:
/// the <code>PinCustomerAuthenticationPromptBuilder</code>
- (PinCustomerAuthenticationPromptBuilder * _Nonnull)setPinSize:(NSInteger)pinSize;
/// Sets the <code>UIColor</code>of the view background (default : “#404040”)
/// \param backgroundColor the <code>UIColor</code>of the view background
///
///
/// returns:
/// the <code>PinCustomerAuthenticationPromptBuilder</code>
- (PinCustomerAuthenticationPromptBuilder * _Nonnull)setBackgroundColor:(UIColor * _Nullable)backgroundColor;
/// Sets the <code>UIColor</code>of the “primary” color (texts, buttons, bullets, keyboard)  (default : “#FFFFFF”)
/// \param primaryColor the <code>UIColor</code>of the “primary” color (texts, buttons, bullets, keyboard)
///
///
/// returns:
/// the <code>PinCustomerAuthenticationPromptBuilder</code>
- (PinCustomerAuthenticationPromptBuilder * _Nonnull)setPrimaryColor:(UIColor * _Nullable)primaryColor;
/// Sets the <code>UIColor</code>of the “secondary” color (keyboard buttons background)  (default : “#FFFFFF”)
/// \param secondaryColor the <code>UIColor</code>of the “secondary” color (keyboard buttons background)
///
///
/// returns:
/// the <code>PinCustomerAuthenticationPromptBuilder</code>
- (PinCustomerAuthenticationPromptBuilder * _Nonnull)setSecondaryColor:(UIColor * _Nullable)secondaryColor;
/// Sets the value defining whether the keyboard numbers are randomized or with standard placement (default : true)
/// Standard placement is : 3 lines with 3 buttons per line - start on top left with “1” , left to right arrangement +  a last line with centered button “0”.
/// \param randomizeKeyboard the value defining whether the keyboard numbers are randomized or with standard placement
///
///
/// returns:
/// the <code>PinCustomerAuthenticationPromptBuilder</code>
- (PinCustomerAuthenticationPromptBuilder * _Nonnull)setRandomizeKeyboard:(BOOL)randomizeKeyboard;
- (PinCustomerAuthenticationPrompt * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
@end

/// A Product represents a service that can be offered by Antelop SDK to the mobile application it is embedded into.
typedef SWIFT_ENUM(NSInteger, Product, open) {
/// Refers to the Strong Customer Authentication service.
/// This service enables the mobile application to perform Strong Customer Authentication.
  ProductSca = 0,
/// Refers to the one digital card product.
  ProductDigitalCard = 1,
};


/// Class to handle an authentication request from back-end
SWIFT_CLASS("_TtC10AntelopSDK25PushAuthenticationRequest")
@interface PushAuthenticationRequest : NSObject
/// Cancel the process by running online command
- (void)cancel;
/// Cancel the process by running online command
- (void)cancel:(void (^ _Nonnull)(void))completion;
/// Return unique identifier of SCA Request
- (NSString * _Nonnull)getId SWIFT_WARN_UNUSED_RESULT;
/// Return the issuer data to be signed in the SCA Request as Base64
- (NSString * _Nonnull)getIssuerData SWIFT_WARN_UNUSED_RESULT;
/// Return the expiry date of the SCA Request
- (uint64_t)getExpiryTimestamp SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface PushAuthenticationRequest (SWIFT_EXTENSION(AntelopSDK))
- (NSString * _Nonnull)getAuthenticationPatternName SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isOnline SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getMessage SWIFT_WARN_UNUSED_RESULT;
@end


/// The data of a SCA Request notification
SWIFT_CLASS("_TtC10AntelopSDK29PushAuthenticationRequestInfo")
@interface PushAuthenticationRequestInfo : NSObject
/// The unique identifier of the authentication request
@property (nonatomic, readonly, copy) NSString * _Nonnull requestId;
/// The desired authentication pattern name from the request
@property (nonatomic, readonly, copy) NSString * _Nonnull authenticationPattern;
/// The expiration date as timestamp format
@property (nonatomic, readonly) double expiryDate;
/// The data to be signed in the authentication request, as Base64
@property (nonatomic, readonly, copy) NSString * _Nonnull data;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol PushAuthenticationRequestListenerProtocol;

/// Class to register an implementation of <code>PushAuthenticationRequestListenerProtocol</code>
SWIFT_CLASS("_TtC10AntelopSDK33PushAuthenticationRequestListener")
@interface PushAuthenticationRequestListener : NSObject
/// Singleton pattern. you should use this shared object and never try to init another one
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PushAuthenticationRequestListener * _Nonnull shared;)
+ (PushAuthenticationRequestListener * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Method to register an implementation of <code>PushAuthenticationRequestListenerProtocol</code>
/// \param observer instance of <code>PushAuthenticationRequestListenerProtocol</code>
///
///
/// returns:
/// an UUID that represents the registration of your protocol implementation
- (NSString * _Nonnull)registerWithObserver:(id <PushAuthenticationRequestListenerProtocol> _Nonnull)observer;
/// Method to remove a PushAuthenticationRequestListenerProtocol previously registered
/// \param identifier the UUID given by a previous call to <code>PushAuthenticationRequestListener.register</code>  method
///
///
/// returns:
/// a Bool value of result process
- (BOOL)removeWithIdentifier:(NSString * _Nonnull)identifier;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Protocol to obtain a callback when an authenticate request is received
SWIFT_PROTOCOL("_TtP10AntelopSDK41PushAuthenticationRequestListenerProtocol_")
@protocol PushAuthenticationRequestListenerProtocol
- (void)onRequestReceivedWithRequest:(PushAuthenticationRequest * _Nonnull)request;
- (void)onRequestCancelledWithRequestId:(NSString * _Nonnull)requestId reason:(enum CancellationReason)reason;
@end

typedef SWIFT_ENUM(NSInteger, SignatureType, open) {
  SignatureTypeLocalJws = 0,
};

typedef SWIFT_ENUM(NSInteger, TokenRequestorType, open) {
  TokenRequestorTypeWallet = 0,
  TokenRequestorTypeEcommerce = 1,
};

typedef SWIFT_ENUM(NSInteger, TokenServiceProvider, open) {
  TokenServiceProviderMdes = 0,
  TokenServiceProviderVts = 1,
};

typedef SWIFT_ENUM(NSInteger, TokenStatus, open) {
  TokenStatusInactive = 0,
  TokenStatusActive = 1,
  TokenStatusSuspended = 2,
};

typedef SWIFT_ENUM(NSInteger, TokenType, open) {
  TokenTypeSecureElement = 0,
  TokenTypeHce = 1,
  TokenTypeCardOnFile = 2,
  TokenTypeQrCode = 3,
  TokenTypeOther = 4,
};








typedef SWIFT_ENUM(NSInteger, VirtualCardNumberStatus, open) {
  VirtualCardNumberStatusActive = 0,
  VirtualCardNumberStatusSuspended = 1,
  VirtualCardNumberStatusExpired = 2,
};


/// This struct gives access to the information pertaining to the cards, settings and counters.
/// This class also provides card management functions.
/// To obtain an instance of this class, one must connect to the <code>WalletManager</code> through <code>WalletManager.connect()</code>
/// This ensures that the activation of the wallet is made and that the wallet is up to date.
/// The wallet is obtained upon connection success in the <code>WalletManagerDelegate.walletManager(_:,didSucceedConnectWithWallet:)</code> callback.
/// The wallet may be updated anytime.
/// It is hence good practice to avoid keeping a hard copy of this class and always working with the reference passed in
/// the <code>WalletManagerDelegate.walletManager(_:,didSucceedConnectWithWallet:)</code> callback.
/// seealso:
/// <code>WalletManagerProtocol.walletManager(_:,didSucceedConnectWithWallet:)</code>
SWIFT_CLASS("_TtC10AntelopSDK6Wallet")
@interface Wallet : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface Wallet (SWIFT_EXTENSION(AntelopSDK))
/// The objective-C version of enrollDigitalCard(enrollmentData:, completion:)
/// \param enrollmentData The string gathering the parameters of the digital card to be enrolled
///
/// \param success The success callback
///
/// \param error The error callback
///
- (BOOL)enrollDigitalCardWithEnrollmentData:(NSString * _Nonnull)enrollmentData error:(NSError * _Nullable * _Nullable)error success:(void (^ _Nonnull)(void))success error:(void (^ _Nonnull)(NSError * _Nonnull))error;
@end


@interface Wallet (SWIFT_EXTENSION(AntelopSDK))
///
/// returns:
/// issuer wallet id
- (NSString * _Nullable)getIssuerWalletId SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// issuer client id
- (NSString * _Nullable)getIssuerClientId SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// issuer data
- (NSString * _Nullable)getIssuerData SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// wallet certificate
- (NSData * _Nullable)getCertificate SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// secure display certificate
- (NSData * _Nullable)getSecureDisplayCertificate SWIFT_WARN_UNUSED_RESULT;
@end


/// This class manages the access to Antelop wallet services except provisioning which is handled by <code>WalletProvisioning</code> class.
/// When connecting to the <code>WalletManager</code>, Antelop SDK ensures that everything is properly activated.
/// If so, a <code>Wallet</code> object is returned in the success delegate method which allows to
/// have access to all the parameters of the wallet (cards, settings…).
/// The connection should be made through <code>WalletManager.connect()</code>.
/// A successful connection is mandatory before calling the other <code>WalletManager</code> entry points.
SWIFT_CLASS("_TtC10AntelopSDK13WalletManager")
@interface WalletManager : NSObject
/// Attempts to connect to Antelop wallet services.
/// The <code>connect</code> result is returned through the <code>WalletManagerProtocol</code>:
/// <ul>
///   <li>
///     <code>WalletManagerProtocol.onConnectionError(_:)</code> is called in case of connect failure.
///   </li>
///   <li>
///     <code>WalletManagerProtocol.onCredentialsRequired(_:)</code> is called in case <code>CustomerAuthenticationPasscode</code> are missing or need to be updated.
///   </li>
///   <li>
///     <code>WalletManagerProtocol.onProvisioningRequired()</code> is called in case Wallet is not present on the device, and need to be initialized before
///   </li>
///   <li>
///     <code>WalletManagerProtocol.onConnectionSuccess(_:)</code> is called in case of connect success.
///   </li>
/// </ul>
/// Connection to Antelop wallet service must be done first through <code>WalletManager.connect()</code> method.
/// Connecting through WalletManager.connect(currentPasscode:)<code>must only be done if the previous connection attempt has triggered the delegate function</code>WalletManagerProtocol.onCredentialsRequired(_:)<code>with the reason</code>notSet`
- (void)connect;
/// Attempts to connect to Antelop wallet services.
/// The <code>connect</code> result is returned through the <code>WalletManagerProtocol</code>:
/// <ul>
///   <li>
///     <code>WalletManagerProtocol.onConnectionError(_:)</code> is called in case of connect failure.
///   </li>
///   <li>
///     <code>WalletManagerProtocol.onCredentialsRequired(_:)</code> is called in case <code>CustomerAuthenticationPasscode</code> are missing or need to be updated.
///   </li>
///   <li>
///     <code>WalletManagerProtocol.onProvisioningRequired()</code> is called in case Wallet is not present on the device, and need to be initialized before
///   </li>
///   <li>
///     <code>WalletManagerProtocol.onConnectionSuccess(_:)</code> is called in case of connect success.
///   </li>
/// </ul>
/// Connection to Antelop wallet service must be done first through <code>WalletManager.connect()</code> method.
/// Connecting through WalletManager.connect(currentPasscode:)<code>must only be done if the previous connection attempt has triggered the delegate function</code>WalletManagerProtocol.onCredentialsRequired(_:)<code>with the reason</code>notSet`
- (BOOL)connectWithCurrentCredentials:(Credentials * _Nullable)currentCredentials newCredentials:(Credentials * _Nullable)newCredentials error:(NSError * _Nullable * _Nullable)error;
/// Attemps to check customer current <code>CustomerCredentials</code> with input
/// This method can be called only once successfully connected to Antelop wallet services.
/// This method returns immediately and triggers asynchronously a credentials change.
/// Upon success, <code>WalletManagerProtocol.onAsyncRequestSuccess(_:)</code> is called
/// Upon failure, <code>WalletManagerProtocol.onAsyncRequestError(_:)</code> is called with the encoutered error as <code>AntelopError</code>
/// \param currentCredentials Customer current <code>Credentials</code> to verify.
///
///
/// throws:
/// <code>WalletValidationError</code> if <code>changeCredentials</code> function is called while <code>WalletManager</code> is not connected
- (BOOL)checkCredentialsWithCurrentCredentials:(Credentials * _Nonnull)currentCredentials error:(NSError * _Nullable * _Nullable)error;
/// Attempts to change customer current <code>CustomerCredentials</code> with new ones.
/// This method can be called only once successfully connected to Antelop wallet services.
/// This method returns immediately and triggers asynchronously a credentials change.
/// Upon success, <code>WalletManagerProtocol.onAsyncRequestSuccess(_:)</code> is called.
/// Upon failure, <code>WalletManagerProtocol.onAsyncRequestError(_:)</code> is called with the encoutered error as <code>AntelopError</code>
/// \param currentCredentials Customer current <code>Credentials</code> to replace.
///
/// \param newCredentials     Customer new <code>Credentials</code> which will replace the old ones.
///
///
/// throws:
/// <code>WalletValidationError</code> if <code>changeCredentials</code> function is called while <code>WalletManager</code> is not connected
- (BOOL)changeCredentialsWithCurrentCredentials:(Credentials * _Nonnull)currentCredentials newCredentials:(Credentials * _Nonnull)newCredentials error:(NSError * _Nullable * _Nullable)error;
/// Attempts to logout from the Antelop <code>Wallet</code>.
/// A logout disconnects from Antelop Wallet services and any subsequent connections will require customer authentication.
/// Once logged out, transactions are forbidden until a new connection succeeds.
/// This method can be called only once successfully connected to Antelop wallet Services.
/// This method returns immediately and triggers asynchronously a logout.
/// Upon success, <code>WalletManagerProtocol.onAsyncRequestSuccess(_:)</code> is called.
/// Upon failure, <code>WalletManagerProtocol.onAsyncRequestError(_:)</code> is called with the encoutered error as <code>AntelopError</code>
///
/// throws:
/// <code>WalletValidationError</code> when logout function is called while <code>WalletManager</code> is not connected.
- (BOOL)logoutAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Attempts to lock the ‘Wallet’.
/// The reason why the wallet is locked must be specified.
/// The provided reason (‘LockReason’) can only be equal to ‘fraudulentUseSuspected’ or ‘stopService’.
/// Other locking reasons can only be invoked on issuer side.
/// This method can be called only once successfully connected to Antelop wallet Services.
/// This method returns immediately and triggers asynchronously a lock.
/// Upon success, <code>WalletManagerProtocol.onAsyncRequestSuccess(_:)</code> is called.
/// Upon failure, <code>WalletManagerProtocol.onAsyncRequestError(_:)</code> is called with the encoutered error as <code>AntelopError</code>
///
/// throws:
/// <code>WalletValidationError</code> when logout function is called while <code>WalletManager</code> is not connected.
- (BOOL)lockWithReason:(enum LockReason)reason error:(NSError * _Nullable * _Nullable)error;
/// Attempts to delete the Antelop <code>Wallet</code>.
/// This method returns immediately and triggers asynchronously a delete.
/// Upon success, <code>WalletManagerProtocol.onAsyncRequestSuccess(_:)</code> is called.
- (void)delete;
/// Disconnects from the Antelop wallet services.
/// The delegate <code>InnerWalletManagerDelegate</code> provided in the <code>WalletManager.init</code> will not be called anymore.
/// You should always disconnect properly from the Antelop wallet services if a previous connection took place.
- (void)disconnect;
/// Attemps to activate an authentication method given as parameter
/// <ul>
///   <li>
///     The type of authentication method must be given
///   </li>
///   <li>
///     If wallet is PinPasscode protected, a credentials must be passed in addition
///   </li>
///   <li>
///     This method can be called only once successfully connected to Antelop wallet Services.
///   </li>
///   <li>
///   </li>
///   <li>
///     This method returns immediatlely and triggers asynchronously result
///   </li>
///   <li>
///     Upon success, <code>WalletManagerProtocol.onAsyncRequestSuccess(_:)</code> is called
///   </li>
///   <li>
///     Upon failure, <code>WalletManagerProtocol.onAsyncRequestError(_:)</code> is called with the encoutered error as <code>AntelopError</code>
///   </li>
///   <li>
///     <ul>
///       <li>
///         Throws <code>WalletValidationError</code> in case you try to do something not permitted by SDK, like activate an already active method, or not present
///       </li>
///     </ul>
///   </li>
/// </ul>
- (BOOL)activateAuthenticationMethodWithType:(enum CustomerAuthenticationMethodType)type credentials:(Credentials * _Nullable)credentials error:(NSError * _Nullable * _Nullable)error;
/// Attemps to deactivate an authentication method given as parameter
/// <ul>
///   <li>
///     The type of authentication method must be given
///   </li>
///   <li>
///     If wallet is PinPasscode protected, a credentials must be passed in addition
///   </li>
///   <li>
///     This method can be called only once successfully connected to Antelop wallet Services.
///   </li>
///   <li>
///   </li>
///   <li>
///     This method returns immediatlely and triggers asynchronously result
///   </li>
///   <li>
///     Upon success, <code>WalletManagerProtocol.onAsyncRequestSuccess(_:)</code> is called
///   </li>
///   <li>
///     Upon failure, <code>WalletManagerProtocol.onAsyncRequestError(_:)</code> is called with the encoutered error as <code>AntelopError</code>
///   </li>
///   <li>
///     <ul>
///       <li>
///         Throws <code>WalletValidationError</code> in case you try to do something not permitted by SDK, like deactivate a non-active method, or not present
///       </li>
///     </ul>
///   </li>
/// </ul>
- (BOOL)deactivateAuthenticationMethodWithType:(enum CustomerAuthenticationMethodType)type credentials:(Credentials * _Nullable)credentials error:(NSError * _Nullable * _Nullable)error;
- (BOOL)synchronizeAuthenticationMethodWithType:(enum CustomerAuthenticationMethodType)type credentials:(Credentials * _Nullable)credentials error:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Enum for callbacks <code>WalletManagerProtocol</code>
/// <code>onAsyncRequestError</code>
/// <code>onAsyncRequestSuccess</code>
typedef SWIFT_ENUM(NSInteger, WalletManagerAsyncRequestEnum, open) {
  WalletManagerAsyncRequestEnumLogout = 0,
  WalletManagerAsyncRequestEnumChangeCredentials = 1,
  WalletManagerAsyncRequestEnumCheckCredentials = 2,
  WalletManagerAsyncRequestEnumActivateAuthMethod = 3,
  WalletManagerAsyncRequestEnumDeactivateAuthMethod = 4,
  WalletManagerAsyncRequestEnumLock = 5,
  WalletManagerAsyncRequestEnumDelete = 6,
  WalletManagerAsyncRequestEnumSynchronizeAuthMethod = 7,
};


/// This class handles observers (<code>WalletNotificationsObserver</code>) subscribing and unsubscribing to the Wallet Notifications.
SWIFT_CLASS("_TtC10AntelopSDK19WalletNotifications")
@interface WalletNotifications : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class allows the payment app to perform the provisioning of the wallet.
SWIFT_CLASS("_TtC10AntelopSDK18WalletProvisioning")
@interface WalletProvisioning : NSObject
/// Checks that the Wallet Provisioning requirement is met.
/// Those requirements consist on having a remote notifications token and the background refresh available.
/// The <code>initialize</code> result is returned through the <code>WalletProvisioningProtocol</code>:
/// <ul>
///   <li>
///     <code>WalletProvisioningProtocol.onInitializationSuccess()</code> is called if background refresh is available and after apnsToken has been forwarded to the sdk
///   </li>
///   <li>
///     <code>WalletProvisioningProtocol.onInitializationError(error: AntelopError)</code> is called with <code>AntelopError</code> if background activity is not authorized
///   </li>
/// </ul>
- (void)initialize;
/// Checks if the current running environment (device, os,…) is eligible to run Antelop wallet services or not.
/// The <code>checkEligibility</code> result is returned through the <code>WalletProvisioningProtocol</code>:
/// <ul>
///   <li>
///     <code>WalletProvisioningProtocol.onDeviceEligible(fingerprintAllowed: Bool, eligibleProducts: [Product])</code> is called if the device is eligible.
///   </li>
///   <li>
///     <code>WalletProvisioningProtocol.onDeviceNotEligible(reason: EligibilityDenialReason?, denialReference: String?)</code> is called if the device is not eligible.
///   </li>
///   <li>
///     <code>WalletProvisioningProtocol.onCheckEligibilityError(error: AntelopError)</code> is called if an error occurred during the check.
///   </li>
/// </ul>
/// \param forbidJailBrokenDevices Defines if rooted devices can be eligible to the Antelop wallet services or not.
/// If its value is set to true, being rooted is a sufficient condition for a device not to be eligible
/// to any of antelop wallet service, otherwise it is not a sufficient condition.
///
- (void)checkEligibilityWithForbidJailBrokenDevices:(BOOL)forbidJailBrokenDevices;
/// Launches the Antelop provisioning process through automatic wallet creation mode.
/// This mode first triggers a wallet creation on server side based on the provided wallet creation parameters and once a wallet is created,
/// it is provisioned on the device.
/// This method must be called once <code>WalletProvisioning</code> object initialization is properly done.
/// <code>WalletProvisioning</code> initialization success is notified through <code>WalletProvisioningProtocol.onInitializationSuccess()</code>.
/// The completion of the provisioning is notified through <code>WalletProvisioningProtocol</code>:
/// seealso:
/// <code>WalletProvisioning.initialize()</code>
/// <ul>
///   <li>
///     <code>WalletProvisioningProtocol.onProvisioningPending()</code> is called after the initialization and before the authentication
///   </li>
///   <li>
///     <code>WalletProvisioningProtocol.onProvisioningSuccess()</code> is called in case of success.
///   </li>
///   <li>
///     <code>WalletProvisioningProtocol.onProvisioningError(error: AntelopError)</code> is called in case of failure.
///   </li>
/// </ul>
/// \param clientId The identifier of the customer associated to the wallet to be created.
/// <code>clientId</code> must contain between 0 and 32 alphanumeric characters.
/// In case a <code>nil</code> value is provided, the default client identifier is used.
///
/// \param walletId The identifier of the wallet to be created.
/// <code>walletId</code> must contain between 0 and 32 alphanumeric characters.
/// In case a <code>nil</code> value is provided, the default wallet identifier is used.
///
/// \param settingsProfileId The identifier of the settings profile used to configure the wallet to be created.
/// <code>settingsProfileId</code> must contain between 0 and 32 alphanumeric characters.
///
/// \param phoneNumber An optional phone number associated to the wallet to be created.
/// <code>phoneNumber</code> must start with a “+” and must contain between 6 and 15 digits (<a href="https://en.wikipedia.org/wiki/E.164">E.164 format</a>).
///
///
/// throws:
/// <code>WalletValidationError</code> if one of the provided parameters has an invalid format.
- (BOOL)launchWithClientId:(NSString * _Nullable)clientId walletId:(NSString * _Nullable)walletId settingsProfileId:(NSString * _Nullable)settingsProfileId phoneNumber:(NSString * _Nullable)phoneNumber error:(NSError * _Nullable * _Nullable)error;
/// Launches wallet provisioning process through activation code mode, with a hex string activation code.
/// The provided activation code must be associated to a wallet already created on the backend platform
/// This method must be called once <code>WalletProvisioning</code> object initialization is properly done.
/// <code>WalletProvisioning</code> initialization success is notified through <code>WalletProvisioningProtocol.onInitializationSuccess()</code>.
/// The completion of the provisioning is notified through <code>WalletProvisioningProtocol</code>:
/// seealso:
/// <code>WalletProvisioning.initialize()</code>
/// <ul>
///   <li>
///     <code>WalletProvisioningProtocol.onProvisioningPending()</code> is called after the initialization and before the authentication
///   </li>
///   <li>
///     <code>WalletProvisioningProtocol.onProvisioningSuccess()</code> is called in case of success.
///   </li>
///   <li>
///     <code>WalletProvisioningProtocol.onProvisioningError(error: AntelopError)</code> is called in case of failure.
///   </li>
/// </ul>
/// \param activationCode Hex representation of the 16-byte long array activation code of a wallet created on the backend platform.
///
/// \param phoneNumber An optional phone number associated to the wallet to be created.
/// <code>phoneNumber</code> must start with a “+” and must contain between 6 and 15 digits (<a href="https://en.wikipedia.org/wiki/E.164">E.164 format</a>).
///
///
/// throws:
/// <code>WalletValidationError</code> if one of the provided parameters have an invalid format.
- (BOOL)launchWithActivationCode:(NSString * _Nonnull)activationCode phoneNumber:(NSString * _Nullable)phoneNumber error:(NSError * _Nullable * _Nullable)error;
/// Launches wallet provisioning process through activation code mode, with a hex string activation identifier and code.
/// The provided activation code must be associated to a wallet already created on the backend platform
/// This method must be called once <code>WalletProvisioning</code> object initialization is properly done.
/// <code>WalletProvisioning</code> initialization success is notified through <code>WalletProvisioningProtocol.onInitializationSuccess()</code>.
/// The completion of the provisioning is notified through <code>WalletProvisioningProtocol</code>:
/// seealso:
/// <code>WalletProvisioning.initialize()</code>
/// <ul>
///   <li>
///     <code>WalletProvisioningProtocol.onProvisioningPending()</code> is called after the initialization and before the authentication
///   </li>
///   <li>
///     <code>WalletProvisioningProtocol.onProvisioningSuccess()</code> is called in case of success.
///   </li>
///   <li>
///     <code>WalletProvisioningProtocol.onProvisioningError(error: AntelopError)</code> is called in case of failure.
///   </li>
/// </ul>
/// \param issuerActivationId The byte array representing the activation identifier of a wallet created on the backend platform. issuerActivationId must contain between 0 and 1024 byte.
///
/// \param activationCode The byte array representing the activation code of a wallet created on the backend platform. issuerActivationId must contain between 0 and 1024 byte.
///
/// \param phoneNumber An optional phone number associated to the wallet to be created.
/// <code>phoneNumber</code> must start with a “+” and must contain between 6 and 15 digits (<a href="https://en.wikipedia.org/wiki/E.164">E.164 format</a>).
///
///
/// throws:
/// <code>WalletValidationError</code> if one of the provided parameters have an invalid format.
- (BOOL)launchWithIssuerActivationId:(NSString * _Nonnull)issuerActivationId activationCode:(NSString * _Nonnull)activationCode phoneNumber:(NSString * _Nullable)phoneNumber error:(NSError * _Nullable * _Nullable)error SWIFT_DEPRECATED_MSG("Use launch(issuerActivationId:, issuerActivationCode:, phoneNumber:) instead");
/// Launches wallet provisioning process through activation code mode, with a hex string activation identifier and code.
/// The provided activation code must be associated to a wallet already created on the backend platform
/// This method must be called once <code>WalletProvisioning</code> object initialization is properly done.
/// <code>WalletProvisioning</code> initialization success is notified through <code>WalletProvisioningProtocol.onInitializationSuccess()</code>.
/// The completion of the provisioning is notified through <code>WalletProvisioningProtocol</code>:
/// seealso:
/// <code>WalletProvisioning.initialize()</code>
/// <ul>
///   <li>
///     <code>WalletProvisioningProtocol.onProvisioningPending()</code> is called after the initialization and before the authentication
///   </li>
///   <li>
///     <code>WalletProvisioningProtocol.onProvisioningSuccess()</code> is called in case of success.
///   </li>
///   <li>
///     <code>WalletProvisioningProtocol.onProvisioningError(error: AntelopError)</code> is called in case of failure.
///   </li>
/// </ul>
/// \param issuerActivationId The byte array representing the activation identifier of a wallet created on the backend platform. issuerActivationId must contain between 0 and 1024 byte.
///
/// \param activationCode The byte array representing the activation code of a wallet created on the backend platform. issuerActivationId must contain between 0 and 1024 byte.
///
/// \param phoneNumber An optional phone number associated to the wallet to be created.
/// <code>phoneNumber</code> must start with a “+” and must contain between 6 and 15 digits (<a href="https://en.wikipedia.org/wiki/E.164">E.164 format</a>).
///
///
/// throws:
/// <code>WalletValidationError</code> if one of the provided parameters have an invalid format.
- (BOOL)launchWithIssuerActivationId:(NSString * _Nonnull)issuerActivationId issuerActivationCode:(NSString * _Nonnull)issuerActivationCode phoneNumber:(NSString * _Nullable)phoneNumber error:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
